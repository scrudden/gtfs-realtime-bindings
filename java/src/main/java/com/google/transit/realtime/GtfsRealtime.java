// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/gtfs-realtime.proto

package com.google.transit.realtime;

public final class GtfsRealtime {
  private GtfsRealtime() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface FeedMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.FeedMessage)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<FeedMessage> {

    /**
     * <code>required .transit_realtime.FeedHeader header = 1;</code>
     *
     * <pre>
     * Metadata about this feed and feed message.
     * </pre>
     */
    boolean hasHeader();
    /**
     * <code>required .transit_realtime.FeedHeader header = 1;</code>
     *
     * <pre>
     * Metadata about this feed and feed message.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.FeedHeader getHeader();
    /**
     * <code>required .transit_realtime.FeedHeader header = 1;</code>
     *
     * <pre>
     * Metadata about this feed and feed message.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.FeedHeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    java.util.List<com.google.transit.realtime.GtfsRealtime.FeedEntity> 
        getEntityList();
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.FeedEntity getEntity(int index);
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    int getEntityCount();
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    java.util.List<? extends com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder> 
        getEntityOrBuilderList();
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder getEntityOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code transit_realtime.FeedMessage}
   *
   * <pre>
   * The contents of a feed message.
   * A feed is a continuous stream of feed messages. Each message in the stream is
   * obtained as a response to an appropriate HTTP GET request.
   * A realtime feed is always defined with relation to an existing GTFS feed.
   * All the entity ids are resolved with respect to the GTFS feed.
   * Note that "required" and "optional" as stated in this file refer to Protocol
   * Buffer cardinality, not semantic cardinality.  See reference.md at
   * https://github.com/google/transit/tree/master/gtfs-realtime for field
   * semantic cardinality.
   * </pre>
   */
  public static final class FeedMessage extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        FeedMessage> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.FeedMessage)
      FeedMessageOrBuilder {
    // Use FeedMessage.newBuilder() to construct.
    private FeedMessage(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.FeedMessage, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FeedMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FeedMessage defaultInstance;
    public static FeedMessage getDefaultInstance() {
      return defaultInstance;
    }

    public FeedMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FeedMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.transit.realtime.GtfsRealtime.FeedHeader.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.FeedHeader.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                entity_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.FeedEntity>();
                mutable_bitField0_ |= 0x00000002;
              }
              entity_.add(input.readMessage(com.google.transit.realtime.GtfsRealtime.FeedEntity.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          entity_ = java.util.Collections.unmodifiableList(entity_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.FeedMessage.class, com.google.transit.realtime.GtfsRealtime.FeedMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<FeedMessage> PARSER =
        new com.google.protobuf.AbstractParser<FeedMessage>() {
      public FeedMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FeedMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FeedMessage> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int HEADER_FIELD_NUMBER = 1;
    private com.google.transit.realtime.GtfsRealtime.FeedHeader header_;
    /**
     * <code>required .transit_realtime.FeedHeader header = 1;</code>
     *
     * <pre>
     * Metadata about this feed and feed message.
     * </pre>
     */
    public boolean hasHeader() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .transit_realtime.FeedHeader header = 1;</code>
     *
     * <pre>
     * Metadata about this feed and feed message.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.FeedHeader getHeader() {
      return header_;
    }
    /**
     * <code>required .transit_realtime.FeedHeader header = 1;</code>
     *
     * <pre>
     * Metadata about this feed and feed message.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.FeedHeaderOrBuilder getHeaderOrBuilder() {
      return header_;
    }

    public static final int ENTITY_FIELD_NUMBER = 2;
    private java.util.List<com.google.transit.realtime.GtfsRealtime.FeedEntity> entity_;
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    public java.util.List<com.google.transit.realtime.GtfsRealtime.FeedEntity> getEntityList() {
      return entity_;
    }
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder> 
        getEntityOrBuilderList() {
      return entity_;
    }
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    public int getEntityCount() {
      return entity_.size();
    }
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.FeedEntity getEntity(int index) {
      return entity_.get(index);
    }
    /**
     * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
     *
     * <pre>
     * Contents of the feed.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder getEntityOrBuilder(
        int index) {
      return entity_.get(index);
    }

    private void initFields() {
      header_ = com.google.transit.realtime.GtfsRealtime.FeedHeader.getDefaultInstance();
      entity_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasHeader()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getHeader().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getEntityCount(); i++) {
        if (!getEntity(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.FeedMessage>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, header_);
      }
      for (int i = 0; i < entity_.size(); i++) {
        output.writeMessage(2, entity_.get(i));
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, header_);
      }
      for (int i = 0; i < entity_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, entity_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.FeedMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.FeedMessage}
     *
     * <pre>
     * The contents of a feed message.
     * A feed is a continuous stream of feed messages. Each message in the stream is
     * obtained as a response to an appropriate HTTP GET request.
     * A realtime feed is always defined with relation to an existing GTFS feed.
     * All the entity ids are resolved with respect to the GTFS feed.
     * Note that "required" and "optional" as stated in this file refer to Protocol
     * Buffer cardinality, not semantic cardinality.  See reference.md at
     * https://github.com/google/transit/tree/master/gtfs-realtime for field
     * semantic cardinality.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.FeedMessage, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.FeedMessage)
        com.google.transit.realtime.GtfsRealtime.FeedMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.FeedMessage.class, com.google.transit.realtime.GtfsRealtime.FeedMessage.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.FeedMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHeaderFieldBuilder();
          getEntityFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = com.google.transit.realtime.GtfsRealtime.FeedHeader.getDefaultInstance();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (entityBuilder_ == null) {
          entity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          entityBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedMessage_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.FeedMessage getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.FeedMessage.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.FeedMessage build() {
        com.google.transit.realtime.GtfsRealtime.FeedMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.FeedMessage buildPartial() {
        com.google.transit.realtime.GtfsRealtime.FeedMessage result = new com.google.transit.realtime.GtfsRealtime.FeedMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (entityBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            entity_ = java.util.Collections.unmodifiableList(entity_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.entity_ = entity_;
        } else {
          result.entity_ = entityBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.FeedMessage) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.FeedMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.FeedMessage other) {
        if (other == com.google.transit.realtime.GtfsRealtime.FeedMessage.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (entityBuilder_ == null) {
          if (!other.entity_.isEmpty()) {
            if (entity_.isEmpty()) {
              entity_ = other.entity_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEntityIsMutable();
              entity_.addAll(other.entity_);
            }
            onChanged();
          }
        } else {
          if (!other.entity_.isEmpty()) {
            if (entityBuilder_.isEmpty()) {
              entityBuilder_.dispose();
              entityBuilder_ = null;
              entity_ = other.entity_;
              bitField0_ = (bitField0_ & ~0x00000002);
              entityBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEntityFieldBuilder() : null;
            } else {
              entityBuilder_.addAllMessages(other.entity_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHeader()) {
          
          return false;
        }
        if (!getHeader().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getEntityCount(); i++) {
          if (!getEntity(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.FeedMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.FeedMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.transit.realtime.GtfsRealtime.FeedHeader header_ = com.google.transit.realtime.GtfsRealtime.FeedHeader.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.FeedHeader, com.google.transit.realtime.GtfsRealtime.FeedHeader.Builder, com.google.transit.realtime.GtfsRealtime.FeedHeaderOrBuilder> headerBuilder_;
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedHeader getHeader() {
        if (headerBuilder_ == null) {
          return header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      public Builder setHeader(com.google.transit.realtime.GtfsRealtime.FeedHeader value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      public Builder setHeader(
          com.google.transit.realtime.GtfsRealtime.FeedHeader.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      public Builder mergeHeader(com.google.transit.realtime.GtfsRealtime.FeedHeader value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              header_ != com.google.transit.realtime.GtfsRealtime.FeedHeader.getDefaultInstance()) {
            header_ =
              com.google.transit.realtime.GtfsRealtime.FeedHeader.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = com.google.transit.realtime.GtfsRealtime.FeedHeader.getDefaultInstance();
          onChanged();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedHeader.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedHeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_;
        }
      }
      /**
       * <code>required .transit_realtime.FeedHeader header = 1;</code>
       *
       * <pre>
       * Metadata about this feed and feed message.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.FeedHeader, com.google.transit.realtime.GtfsRealtime.FeedHeader.Builder, com.google.transit.realtime.GtfsRealtime.FeedHeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.FeedHeader, com.google.transit.realtime.GtfsRealtime.FeedHeader.Builder, com.google.transit.realtime.GtfsRealtime.FeedHeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private java.util.List<com.google.transit.realtime.GtfsRealtime.FeedEntity> entity_ =
        java.util.Collections.emptyList();
      private void ensureEntityIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          entity_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.FeedEntity>(entity_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.FeedEntity, com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder, com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder> entityBuilder_;

      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.FeedEntity> getEntityList() {
        if (entityBuilder_ == null) {
          return java.util.Collections.unmodifiableList(entity_);
        } else {
          return entityBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public int getEntityCount() {
        if (entityBuilder_ == null) {
          return entity_.size();
        } else {
          return entityBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedEntity getEntity(int index) {
        if (entityBuilder_ == null) {
          return entity_.get(index);
        } else {
          return entityBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder setEntity(
          int index, com.google.transit.realtime.GtfsRealtime.FeedEntity value) {
        if (entityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntityIsMutable();
          entity_.set(index, value);
          onChanged();
        } else {
          entityBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder setEntity(
          int index, com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder builderForValue) {
        if (entityBuilder_ == null) {
          ensureEntityIsMutable();
          entity_.set(index, builderForValue.build());
          onChanged();
        } else {
          entityBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder addEntity(com.google.transit.realtime.GtfsRealtime.FeedEntity value) {
        if (entityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntityIsMutable();
          entity_.add(value);
          onChanged();
        } else {
          entityBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder addEntity(
          int index, com.google.transit.realtime.GtfsRealtime.FeedEntity value) {
        if (entityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntityIsMutable();
          entity_.add(index, value);
          onChanged();
        } else {
          entityBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder addEntity(
          com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder builderForValue) {
        if (entityBuilder_ == null) {
          ensureEntityIsMutable();
          entity_.add(builderForValue.build());
          onChanged();
        } else {
          entityBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder addEntity(
          int index, com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder builderForValue) {
        if (entityBuilder_ == null) {
          ensureEntityIsMutable();
          entity_.add(index, builderForValue.build());
          onChanged();
        } else {
          entityBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder addAllEntity(
          java.lang.Iterable<? extends com.google.transit.realtime.GtfsRealtime.FeedEntity> values) {
        if (entityBuilder_ == null) {
          ensureEntityIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, entity_);
          onChanged();
        } else {
          entityBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder clearEntity() {
        if (entityBuilder_ == null) {
          entity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          entityBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public Builder removeEntity(int index) {
        if (entityBuilder_ == null) {
          ensureEntityIsMutable();
          entity_.remove(index);
          onChanged();
        } else {
          entityBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder getEntityBuilder(
          int index) {
        return getEntityFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder getEntityOrBuilder(
          int index) {
        if (entityBuilder_ == null) {
          return entity_.get(index);  } else {
          return entityBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder> 
           getEntityOrBuilderList() {
        if (entityBuilder_ != null) {
          return entityBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(entity_);
        }
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder addEntityBuilder() {
        return getEntityFieldBuilder().addBuilder(
            com.google.transit.realtime.GtfsRealtime.FeedEntity.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder addEntityBuilder(
          int index) {
        return getEntityFieldBuilder().addBuilder(
            index, com.google.transit.realtime.GtfsRealtime.FeedEntity.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.FeedEntity entity = 2;</code>
       *
       * <pre>
       * Contents of the feed.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder> 
           getEntityBuilderList() {
        return getEntityFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.FeedEntity, com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder, com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder> 
          getEntityFieldBuilder() {
        if (entityBuilder_ == null) {
          entityBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.FeedEntity, com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder, com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder>(
                  entity_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          entity_ = null;
        }
        return entityBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.FeedMessage)
    }

    static {
      defaultInstance = new FeedMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.FeedMessage)
  }

  public interface FeedHeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.FeedHeader)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<FeedHeader> {

    /**
     * <code>required string gtfs_realtime_version = 1;</code>
     *
     * <pre>
     * Version of the feed specification.
     * The current version is 2.0.  Valid versions are "2.0", "1.0".
     * </pre>
     */
    boolean hasGtfsRealtimeVersion();
    /**
     * <code>required string gtfs_realtime_version = 1;</code>
     *
     * <pre>
     * Version of the feed specification.
     * The current version is 2.0.  Valid versions are "2.0", "1.0".
     * </pre>
     */
    java.lang.String getGtfsRealtimeVersion();
    /**
     * <code>required string gtfs_realtime_version = 1;</code>
     *
     * <pre>
     * Version of the feed specification.
     * The current version is 2.0.  Valid versions are "2.0", "1.0".
     * </pre>
     */
    com.google.protobuf.ByteString
        getGtfsRealtimeVersionBytes();

    /**
     * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];</code>
     */
    boolean hasIncrementality();
    /**
     * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];</code>
     */
    com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality getIncrementality();

    /**
     * <code>optional uint64 timestamp = 3;</code>
     *
     * <pre>
     * This timestamp identifies the moment when the content of this feed has been
     * created (in server time). In POSIX time (i.e., number of seconds since
     * January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    boolean hasTimestamp();
    /**
     * <code>optional uint64 timestamp = 3;</code>
     *
     * <pre>
     * This timestamp identifies the moment when the content of this feed has been
     * created (in server time). In POSIX time (i.e., number of seconds since
     * January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    long getTimestamp();
  }
  /**
   * Protobuf type {@code transit_realtime.FeedHeader}
   *
   * <pre>
   * Metadata about a feed, included in feed messages.
   * </pre>
   */
  public static final class FeedHeader extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        FeedHeader> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.FeedHeader)
      FeedHeaderOrBuilder {
    // Use FeedHeader.newBuilder() to construct.
    private FeedHeader(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.FeedHeader, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FeedHeader(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FeedHeader defaultInstance;
    public static FeedHeader getDefaultInstance() {
      return defaultInstance;
    }

    public FeedHeader getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FeedHeader(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              gtfsRealtimeVersion_ = bs;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality value = com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                incrementality_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              timestamp_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedHeader_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedHeader_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.FeedHeader.class, com.google.transit.realtime.GtfsRealtime.FeedHeader.Builder.class);
    }

    public static com.google.protobuf.Parser<FeedHeader> PARSER =
        new com.google.protobuf.AbstractParser<FeedHeader>() {
      public FeedHeader parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FeedHeader(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FeedHeader> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.FeedHeader.Incrementality}
     *
     * <pre>
     * Determines whether the current fetch is incremental.  Currently,
     * DIFFERENTIAL mode is unsupported and behavior is unspecified for feeds
     * that use this mode.  There are discussions on the GTFS Realtime mailing
     * list around fully specifying the behavior of DIFFERENTIAL mode and the
     * documentation will be updated when those discussions are finalized.
     * </pre>
     */
    public enum Incrementality
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FULL_DATASET = 0;</code>
       */
      FULL_DATASET(0, 0),
      /**
       * <code>DIFFERENTIAL = 1;</code>
       */
      DIFFERENTIAL(1, 1),
      ;

      /**
       * <code>FULL_DATASET = 0;</code>
       */
      public static final int FULL_DATASET_VALUE = 0;
      /**
       * <code>DIFFERENTIAL = 1;</code>
       */
      public static final int DIFFERENTIAL_VALUE = 1;


      public final int getNumber() { return value; }

      public static Incrementality valueOf(int value) {
        switch (value) {
          case 0: return FULL_DATASET;
          case 1: return DIFFERENTIAL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Incrementality>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Incrementality>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Incrementality>() {
              public Incrementality findValueByNumber(int number) {
                return Incrementality.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.FeedHeader.getDescriptor().getEnumTypes().get(0);
      }

      private static final Incrementality[] VALUES = values();

      public static Incrementality valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Incrementality(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.FeedHeader.Incrementality)
    }

    private int bitField0_;
    public static final int GTFS_REALTIME_VERSION_FIELD_NUMBER = 1;
    private java.lang.Object gtfsRealtimeVersion_;
    /**
     * <code>required string gtfs_realtime_version = 1;</code>
     *
     * <pre>
     * Version of the feed specification.
     * The current version is 2.0.  Valid versions are "2.0", "1.0".
     * </pre>
     */
    public boolean hasGtfsRealtimeVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string gtfs_realtime_version = 1;</code>
     *
     * <pre>
     * Version of the feed specification.
     * The current version is 2.0.  Valid versions are "2.0", "1.0".
     * </pre>
     */
    public java.lang.String getGtfsRealtimeVersion() {
      java.lang.Object ref = gtfsRealtimeVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          gtfsRealtimeVersion_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string gtfs_realtime_version = 1;</code>
     *
     * <pre>
     * Version of the feed specification.
     * The current version is 2.0.  Valid versions are "2.0", "1.0".
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGtfsRealtimeVersionBytes() {
      java.lang.Object ref = gtfsRealtimeVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        gtfsRealtimeVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INCREMENTALITY_FIELD_NUMBER = 2;
    private com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality incrementality_;
    /**
     * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];</code>
     */
    public boolean hasIncrementality() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];</code>
     */
    public com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality getIncrementality() {
      return incrementality_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private long timestamp_;
    /**
     * <code>optional uint64 timestamp = 3;</code>
     *
     * <pre>
     * This timestamp identifies the moment when the content of this feed has been
     * created (in server time). In POSIX time (i.e., number of seconds since
     * January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 timestamp = 3;</code>
     *
     * <pre>
     * This timestamp identifies the moment when the content of this feed has been
     * created (in server time). In POSIX time (i.e., number of seconds since
     * January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    private void initFields() {
      gtfsRealtimeVersion_ = "";
      incrementality_ = com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality.FULL_DATASET;
      timestamp_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasGtfsRealtimeVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.FeedHeader>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getGtfsRealtimeVersionBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, incrementality_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, timestamp_);
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getGtfsRealtimeVersionBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, incrementality_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, timestamp_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedHeader parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.FeedHeader prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.FeedHeader}
     *
     * <pre>
     * Metadata about a feed, included in feed messages.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.FeedHeader, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.FeedHeader)
        com.google.transit.realtime.GtfsRealtime.FeedHeaderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedHeader_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedHeader_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.FeedHeader.class, com.google.transit.realtime.GtfsRealtime.FeedHeader.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.FeedHeader.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gtfsRealtimeVersion_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        incrementality_ = com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality.FULL_DATASET;
        bitField0_ = (bitField0_ & ~0x00000002);
        timestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedHeader_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.FeedHeader getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.FeedHeader.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.FeedHeader build() {
        com.google.transit.realtime.GtfsRealtime.FeedHeader result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.FeedHeader buildPartial() {
        com.google.transit.realtime.GtfsRealtime.FeedHeader result = new com.google.transit.realtime.GtfsRealtime.FeedHeader(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gtfsRealtimeVersion_ = gtfsRealtimeVersion_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.incrementality_ = incrementality_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timestamp_ = timestamp_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.FeedHeader) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.FeedHeader)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.FeedHeader other) {
        if (other == com.google.transit.realtime.GtfsRealtime.FeedHeader.getDefaultInstance()) return this;
        if (other.hasGtfsRealtimeVersion()) {
          bitField0_ |= 0x00000001;
          gtfsRealtimeVersion_ = other.gtfsRealtimeVersion_;
          onChanged();
        }
        if (other.hasIncrementality()) {
          setIncrementality(other.getIncrementality());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGtfsRealtimeVersion()) {
          
          return false;
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.FeedHeader parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.FeedHeader) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object gtfsRealtimeVersion_ = "";
      /**
       * <code>required string gtfs_realtime_version = 1;</code>
       *
       * <pre>
       * Version of the feed specification.
       * The current version is 2.0.  Valid versions are "2.0", "1.0".
       * </pre>
       */
      public boolean hasGtfsRealtimeVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string gtfs_realtime_version = 1;</code>
       *
       * <pre>
       * Version of the feed specification.
       * The current version is 2.0.  Valid versions are "2.0", "1.0".
       * </pre>
       */
      public java.lang.String getGtfsRealtimeVersion() {
        java.lang.Object ref = gtfsRealtimeVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            gtfsRealtimeVersion_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string gtfs_realtime_version = 1;</code>
       *
       * <pre>
       * Version of the feed specification.
       * The current version is 2.0.  Valid versions are "2.0", "1.0".
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGtfsRealtimeVersionBytes() {
        java.lang.Object ref = gtfsRealtimeVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          gtfsRealtimeVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string gtfs_realtime_version = 1;</code>
       *
       * <pre>
       * Version of the feed specification.
       * The current version is 2.0.  Valid versions are "2.0", "1.0".
       * </pre>
       */
      public Builder setGtfsRealtimeVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        gtfsRealtimeVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string gtfs_realtime_version = 1;</code>
       *
       * <pre>
       * Version of the feed specification.
       * The current version is 2.0.  Valid versions are "2.0", "1.0".
       * </pre>
       */
      public Builder clearGtfsRealtimeVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gtfsRealtimeVersion_ = getDefaultInstance().getGtfsRealtimeVersion();
        onChanged();
        return this;
      }
      /**
       * <code>required string gtfs_realtime_version = 1;</code>
       *
       * <pre>
       * Version of the feed specification.
       * The current version is 2.0.  Valid versions are "2.0", "1.0".
       * </pre>
       */
      public Builder setGtfsRealtimeVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        gtfsRealtimeVersion_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality incrementality_ = com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality.FULL_DATASET;
      /**
       * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];</code>
       */
      public boolean hasIncrementality() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];</code>
       */
      public com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality getIncrementality() {
        return incrementality_;
      }
      /**
       * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];</code>
       */
      public Builder setIncrementality(com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        incrementality_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];</code>
       */
      public Builder clearIncrementality() {
        bitField0_ = (bitField0_ & ~0x00000002);
        incrementality_ = com.google.transit.realtime.GtfsRealtime.FeedHeader.Incrementality.FULL_DATASET;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <code>optional uint64 timestamp = 3;</code>
       *
       * <pre>
       * This timestamp identifies the moment when the content of this feed has been
       * created (in server time). In POSIX time (i.e., number of seconds since
       * January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 timestamp = 3;</code>
       *
       * <pre>
       * This timestamp identifies the moment when the content of this feed has been
       * created (in server time). In POSIX time (i.e., number of seconds since
       * January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>optional uint64 timestamp = 3;</code>
       *
       * <pre>
       * This timestamp identifies the moment when the content of this feed has been
       * created (in server time). In POSIX time (i.e., number of seconds since
       * January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public Builder setTimestamp(long value) {
        bitField0_ |= 0x00000004;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 timestamp = 3;</code>
       *
       * <pre>
       * This timestamp identifies the moment when the content of this feed has been
       * created (in server time). In POSIX time (i.e., number of seconds since
       * January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.FeedHeader)
    }

    static {
      defaultInstance = new FeedHeader(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.FeedHeader)
  }

  public interface FeedEntityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.FeedEntity)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<FeedEntity> {

    /**
     * <code>required string id = 1;</code>
     *
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required string id = 1;</code>
     *
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     */
    java.lang.String getId();
    /**
     * <code>required string id = 1;</code>
     *
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional bool is_deleted = 2 [default = false];</code>
     *
     * <pre>
     * Whether this entity is to be deleted. Relevant only for incremental
     * fetches.
     * </pre>
     */
    boolean hasIsDeleted();
    /**
     * <code>optional bool is_deleted = 2 [default = false];</code>
     *
     * <pre>
     * Whether this entity is to be deleted. Relevant only for incremental
     * fetches.
     * </pre>
     */
    boolean getIsDeleted();

    /**
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     *
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     */
    boolean hasTripUpdate();
    /**
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     *
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TripUpdate getTripUpdate();
    /**
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     *
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TripUpdateOrBuilder getTripUpdateOrBuilder();

    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    boolean hasVehicle();
    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    com.google.transit.realtime.GtfsRealtime.VehiclePosition getVehicle();
    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    com.google.transit.realtime.GtfsRealtime.VehiclePositionOrBuilder getVehicleOrBuilder();

    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    boolean hasAlert();
    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    com.google.transit.realtime.GtfsRealtime.Alert getAlert();
    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    com.google.transit.realtime.GtfsRealtime.AlertOrBuilder getAlertOrBuilder();

    /**
     * <code>optional .transit_realtime.Trip trip = 6;</code>
     */
    boolean hasTrip();
    /**
     * <code>optional .transit_realtime.Trip trip = 6;</code>
     */
    com.google.transit.realtime.GtfsRealtime.Trip getTrip();
    /**
     * <code>optional .transit_realtime.Trip trip = 6;</code>
     */
    com.google.transit.realtime.GtfsRealtime.TripOrBuilder getTripOrBuilder();

    /**
     * <code>optional .transit_realtime.Shape shape = 7;</code>
     */
    boolean hasShape();
    /**
     * <code>optional .transit_realtime.Shape shape = 7;</code>
     */
    com.google.transit.realtime.GtfsRealtime.Shape getShape();
    /**
     * <code>optional .transit_realtime.Shape shape = 7;</code>
     */
    com.google.transit.realtime.GtfsRealtime.ShapeOrBuilder getShapeOrBuilder();

    /**
     * <code>optional .transit_realtime.Route route = 8;</code>
     */
    boolean hasRoute();
    /**
     * <code>optional .transit_realtime.Route route = 8;</code>
     */
    com.google.transit.realtime.GtfsRealtime.Route getRoute();
    /**
     * <code>optional .transit_realtime.Route route = 8;</code>
     */
    com.google.transit.realtime.GtfsRealtime.RouteOrBuilder getRouteOrBuilder();

    /**
     * <code>optional .transit_realtime.Stop stop = 9;</code>
     */
    boolean hasStop();
    /**
     * <code>optional .transit_realtime.Stop stop = 9;</code>
     */
    com.google.transit.realtime.GtfsRealtime.Stop getStop();
    /**
     * <code>optional .transit_realtime.Stop stop = 9;</code>
     */
    com.google.transit.realtime.GtfsRealtime.StopOrBuilder getStopOrBuilder();
  }
  /**
   * Protobuf type {@code transit_realtime.FeedEntity}
   *
   * <pre>
   * A definition (or update) of an entity in the transit feed.
   * </pre>
   */
  public static final class FeedEntity extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        FeedEntity> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.FeedEntity)
      FeedEntityOrBuilder {
    // Use FeedEntity.newBuilder() to construct.
    private FeedEntity(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.FeedEntity, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FeedEntity(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FeedEntity defaultInstance;
    public static FeedEntity getDefaultInstance() {
      return defaultInstance;
    }

    public FeedEntity getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FeedEntity(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              id_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isDeleted_ = input.readBool();
              break;
            }
            case 26: {
              com.google.transit.realtime.GtfsRealtime.TripUpdate.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = tripUpdate_.toBuilder();
              }
              tripUpdate_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TripUpdate.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tripUpdate_);
                tripUpdate_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.google.transit.realtime.GtfsRealtime.VehiclePosition.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = vehicle_.toBuilder();
              }
              vehicle_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.VehiclePosition.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(vehicle_);
                vehicle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.google.transit.realtime.GtfsRealtime.Alert.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = alert_.toBuilder();
              }
              alert_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.Alert.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(alert_);
                alert_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.google.transit.realtime.GtfsRealtime.Trip.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = trip_.toBuilder();
              }
              trip_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.Trip.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(trip_);
                trip_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.google.transit.realtime.GtfsRealtime.Shape.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = shape_.toBuilder();
              }
              shape_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.Shape.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(shape_);
                shape_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              com.google.transit.realtime.GtfsRealtime.Route.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = route_.toBuilder();
              }
              route_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.Route.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(route_);
                route_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.google.transit.realtime.GtfsRealtime.Stop.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = stop_.toBuilder();
              }
              stop_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.Stop.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stop_);
                stop_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedEntity_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedEntity_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.FeedEntity.class, com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder.class);
    }

    public static com.google.protobuf.Parser<FeedEntity> PARSER =
        new com.google.protobuf.AbstractParser<FeedEntity>() {
      public FeedEntity parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FeedEntity(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FeedEntity> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private java.lang.Object id_;
    /**
     * <code>required string id = 1;</code>
     *
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string id = 1;</code>
     *
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string id = 1;</code>
     *
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IS_DELETED_FIELD_NUMBER = 2;
    private boolean isDeleted_;
    /**
     * <code>optional bool is_deleted = 2 [default = false];</code>
     *
     * <pre>
     * Whether this entity is to be deleted. Relevant only for incremental
     * fetches.
     * </pre>
     */
    public boolean hasIsDeleted() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool is_deleted = 2 [default = false];</code>
     *
     * <pre>
     * Whether this entity is to be deleted. Relevant only for incremental
     * fetches.
     * </pre>
     */
    public boolean getIsDeleted() {
      return isDeleted_;
    }

    public static final int TRIP_UPDATE_FIELD_NUMBER = 3;
    private com.google.transit.realtime.GtfsRealtime.TripUpdate tripUpdate_;
    /**
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     *
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     */
    public boolean hasTripUpdate() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     *
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TripUpdate getTripUpdate() {
      return tripUpdate_;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     *
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TripUpdateOrBuilder getTripUpdateOrBuilder() {
      return tripUpdate_;
    }

    public static final int VEHICLE_FIELD_NUMBER = 4;
    private com.google.transit.realtime.GtfsRealtime.VehiclePosition vehicle_;
    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    public boolean hasVehicle() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.VehiclePosition getVehicle() {
      return vehicle_;
    }
    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.VehiclePositionOrBuilder getVehicleOrBuilder() {
      return vehicle_;
    }

    public static final int ALERT_FIELD_NUMBER = 5;
    private com.google.transit.realtime.GtfsRealtime.Alert alert_;
    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    public boolean hasAlert() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.Alert getAlert() {
      return alert_;
    }
    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.AlertOrBuilder getAlertOrBuilder() {
      return alert_;
    }

    public static final int TRIP_FIELD_NUMBER = 6;
    private com.google.transit.realtime.GtfsRealtime.Trip trip_;
    /**
     * <code>optional .transit_realtime.Trip trip = 6;</code>
     */
    public boolean hasTrip() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .transit_realtime.Trip trip = 6;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.Trip getTrip() {
      return trip_;
    }
    /**
     * <code>optional .transit_realtime.Trip trip = 6;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.TripOrBuilder getTripOrBuilder() {
      return trip_;
    }

    public static final int SHAPE_FIELD_NUMBER = 7;
    private com.google.transit.realtime.GtfsRealtime.Shape shape_;
    /**
     * <code>optional .transit_realtime.Shape shape = 7;</code>
     */
    public boolean hasShape() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .transit_realtime.Shape shape = 7;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.Shape getShape() {
      return shape_;
    }
    /**
     * <code>optional .transit_realtime.Shape shape = 7;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.ShapeOrBuilder getShapeOrBuilder() {
      return shape_;
    }

    public static final int ROUTE_FIELD_NUMBER = 8;
    private com.google.transit.realtime.GtfsRealtime.Route route_;
    /**
     * <code>optional .transit_realtime.Route route = 8;</code>
     */
    public boolean hasRoute() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .transit_realtime.Route route = 8;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.Route getRoute() {
      return route_;
    }
    /**
     * <code>optional .transit_realtime.Route route = 8;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.RouteOrBuilder getRouteOrBuilder() {
      return route_;
    }

    public static final int STOP_FIELD_NUMBER = 9;
    private com.google.transit.realtime.GtfsRealtime.Stop stop_;
    /**
     * <code>optional .transit_realtime.Stop stop = 9;</code>
     */
    public boolean hasStop() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .transit_realtime.Stop stop = 9;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.Stop getStop() {
      return stop_;
    }
    /**
     * <code>optional .transit_realtime.Stop stop = 9;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.StopOrBuilder getStopOrBuilder() {
      return stop_;
    }

    private void initFields() {
      id_ = "";
      isDeleted_ = false;
      tripUpdate_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.getDefaultInstance();
      vehicle_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDefaultInstance();
      alert_ = com.google.transit.realtime.GtfsRealtime.Alert.getDefaultInstance();
      trip_ = com.google.transit.realtime.GtfsRealtime.Trip.getDefaultInstance();
      shape_ = com.google.transit.realtime.GtfsRealtime.Shape.getDefaultInstance();
      route_ = com.google.transit.realtime.GtfsRealtime.Route.getDefaultInstance();
      stop_ = com.google.transit.realtime.GtfsRealtime.Stop.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasTripUpdate()) {
        if (!getTripUpdate().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasVehicle()) {
        if (!getVehicle().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasAlert()) {
        if (!getAlert().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTrip()) {
        if (!getTrip().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasShape()) {
        if (!getShape().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRoute()) {
        if (!getRoute().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasStop()) {
        if (!getStop().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.FeedEntity>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, isDeleted_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, tripUpdate_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, vehicle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, alert_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, trip_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, shape_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, route_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, stop_);
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isDeleted_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, tripUpdate_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, vehicle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, alert_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, trip_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, shape_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, route_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, stop_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.FeedEntity parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.FeedEntity prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.FeedEntity}
     *
     * <pre>
     * A definition (or update) of an entity in the transit feed.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.FeedEntity, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.FeedEntity)
        com.google.transit.realtime.GtfsRealtime.FeedEntityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedEntity_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedEntity_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.FeedEntity.class, com.google.transit.realtime.GtfsRealtime.FeedEntity.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.FeedEntity.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTripUpdateFieldBuilder();
          getVehicleFieldBuilder();
          getAlertFieldBuilder();
          getTripFieldBuilder();
          getShapeFieldBuilder();
          getRouteFieldBuilder();
          getStopFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        isDeleted_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (tripUpdateBuilder_ == null) {
          tripUpdate_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.getDefaultInstance();
        } else {
          tripUpdateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (vehicleBuilder_ == null) {
          vehicle_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDefaultInstance();
        } else {
          vehicleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (alertBuilder_ == null) {
          alert_ = com.google.transit.realtime.GtfsRealtime.Alert.getDefaultInstance();
        } else {
          alertBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (tripBuilder_ == null) {
          trip_ = com.google.transit.realtime.GtfsRealtime.Trip.getDefaultInstance();
        } else {
          tripBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (shapeBuilder_ == null) {
          shape_ = com.google.transit.realtime.GtfsRealtime.Shape.getDefaultInstance();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (routeBuilder_ == null) {
          route_ = com.google.transit.realtime.GtfsRealtime.Route.getDefaultInstance();
        } else {
          routeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (stopBuilder_ == null) {
          stop_ = com.google.transit.realtime.GtfsRealtime.Stop.getDefaultInstance();
        } else {
          stopBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_FeedEntity_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.FeedEntity getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.FeedEntity.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.FeedEntity build() {
        com.google.transit.realtime.GtfsRealtime.FeedEntity result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.FeedEntity buildPartial() {
        com.google.transit.realtime.GtfsRealtime.FeedEntity result = new com.google.transit.realtime.GtfsRealtime.FeedEntity(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isDeleted_ = isDeleted_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (tripUpdateBuilder_ == null) {
          result.tripUpdate_ = tripUpdate_;
        } else {
          result.tripUpdate_ = tripUpdateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (vehicleBuilder_ == null) {
          result.vehicle_ = vehicle_;
        } else {
          result.vehicle_ = vehicleBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (alertBuilder_ == null) {
          result.alert_ = alert_;
        } else {
          result.alert_ = alertBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (tripBuilder_ == null) {
          result.trip_ = trip_;
        } else {
          result.trip_ = tripBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (shapeBuilder_ == null) {
          result.shape_ = shape_;
        } else {
          result.shape_ = shapeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (routeBuilder_ == null) {
          result.route_ = route_;
        } else {
          result.route_ = routeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (stopBuilder_ == null) {
          result.stop_ = stop_;
        } else {
          result.stop_ = stopBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.FeedEntity) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.FeedEntity)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.FeedEntity other) {
        if (other == com.google.transit.realtime.GtfsRealtime.FeedEntity.getDefaultInstance()) return this;
        if (other.hasId()) {
          bitField0_ |= 0x00000001;
          id_ = other.id_;
          onChanged();
        }
        if (other.hasIsDeleted()) {
          setIsDeleted(other.getIsDeleted());
        }
        if (other.hasTripUpdate()) {
          mergeTripUpdate(other.getTripUpdate());
        }
        if (other.hasVehicle()) {
          mergeVehicle(other.getVehicle());
        }
        if (other.hasAlert()) {
          mergeAlert(other.getAlert());
        }
        if (other.hasTrip()) {
          mergeTrip(other.getTrip());
        }
        if (other.hasShape()) {
          mergeShape(other.getShape());
        }
        if (other.hasRoute()) {
          mergeRoute(other.getRoute());
        }
        if (other.hasStop()) {
          mergeStop(other.getStop());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (hasTripUpdate()) {
          if (!getTripUpdate().isInitialized()) {
            
            return false;
          }
        }
        if (hasVehicle()) {
          if (!getVehicle().isInitialized()) {
            
            return false;
          }
        }
        if (hasAlert()) {
          if (!getAlert().isInitialized()) {
            
            return false;
          }
        }
        if (hasTrip()) {
          if (!getTrip().isInitialized()) {
            
            return false;
          }
        }
        if (hasShape()) {
          if (!getShape().isInitialized()) {
            
            return false;
          }
        }
        if (hasRoute()) {
          if (!getRoute().isInitialized()) {
            
            return false;
          }
        }
        if (hasStop()) {
          if (!getStop().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.FeedEntity parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.FeedEntity) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <code>required string id = 1;</code>
       *
       * <pre>
       * The ids are used only to provide incrementality support. The id should be
       * unique within a FeedMessage. Consequent FeedMessages may contain
       * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
       * FeedEntity with some id will replace the old FeedEntity with the same id
       * (or delete it - see is_deleted below).
       * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
       * feed must be specified by explicit selectors (see EntitySelector below for
       * more info).
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string id = 1;</code>
       *
       * <pre>
       * The ids are used only to provide incrementality support. The id should be
       * unique within a FeedMessage. Consequent FeedMessages may contain
       * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
       * FeedEntity with some id will replace the old FeedEntity with the same id
       * (or delete it - see is_deleted below).
       * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
       * feed must be specified by explicit selectors (see EntitySelector below for
       * more info).
       * </pre>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string id = 1;</code>
       *
       * <pre>
       * The ids are used only to provide incrementality support. The id should be
       * unique within a FeedMessage. Consequent FeedMessages may contain
       * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
       * FeedEntity with some id will replace the old FeedEntity with the same id
       * (or delete it - see is_deleted below).
       * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
       * feed must be specified by explicit selectors (see EntitySelector below for
       * more info).
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string id = 1;</code>
       *
       * <pre>
       * The ids are used only to provide incrementality support. The id should be
       * unique within a FeedMessage. Consequent FeedMessages may contain
       * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
       * FeedEntity with some id will replace the old FeedEntity with the same id
       * (or delete it - see is_deleted below).
       * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
       * feed must be specified by explicit selectors (see EntitySelector below for
       * more info).
       * </pre>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string id = 1;</code>
       *
       * <pre>
       * The ids are used only to provide incrementality support. The id should be
       * unique within a FeedMessage. Consequent FeedMessages may contain
       * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
       * FeedEntity with some id will replace the old FeedEntity with the same id
       * (or delete it - see is_deleted below).
       * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
       * feed must be specified by explicit selectors (see EntitySelector below for
       * more info).
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <code>required string id = 1;</code>
       *
       * <pre>
       * The ids are used only to provide incrementality support. The id should be
       * unique within a FeedMessage. Consequent FeedMessages may contain
       * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
       * FeedEntity with some id will replace the old FeedEntity with the same id
       * (or delete it - see is_deleted below).
       * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
       * feed must be specified by explicit selectors (see EntitySelector below for
       * more info).
       * </pre>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }

      private boolean isDeleted_ ;
      /**
       * <code>optional bool is_deleted = 2 [default = false];</code>
       *
       * <pre>
       * Whether this entity is to be deleted. Relevant only for incremental
       * fetches.
       * </pre>
       */
      public boolean hasIsDeleted() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool is_deleted = 2 [default = false];</code>
       *
       * <pre>
       * Whether this entity is to be deleted. Relevant only for incremental
       * fetches.
       * </pre>
       */
      public boolean getIsDeleted() {
        return isDeleted_;
      }
      /**
       * <code>optional bool is_deleted = 2 [default = false];</code>
       *
       * <pre>
       * Whether this entity is to be deleted. Relevant only for incremental
       * fetches.
       * </pre>
       */
      public Builder setIsDeleted(boolean value) {
        bitField0_ |= 0x00000002;
        isDeleted_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_deleted = 2 [default = false];</code>
       *
       * <pre>
       * Whether this entity is to be deleted. Relevant only for incremental
       * fetches.
       * </pre>
       */
      public Builder clearIsDeleted() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isDeleted_ = false;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TripUpdate tripUpdate_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripUpdate, com.google.transit.realtime.GtfsRealtime.TripUpdate.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdateOrBuilder> tripUpdateBuilder_;
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      public boolean hasTripUpdate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate getTripUpdate() {
        if (tripUpdateBuilder_ == null) {
          return tripUpdate_;
        } else {
          return tripUpdateBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      public Builder setTripUpdate(com.google.transit.realtime.GtfsRealtime.TripUpdate value) {
        if (tripUpdateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tripUpdate_ = value;
          onChanged();
        } else {
          tripUpdateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      public Builder setTripUpdate(
          com.google.transit.realtime.GtfsRealtime.TripUpdate.Builder builderForValue) {
        if (tripUpdateBuilder_ == null) {
          tripUpdate_ = builderForValue.build();
          onChanged();
        } else {
          tripUpdateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      public Builder mergeTripUpdate(com.google.transit.realtime.GtfsRealtime.TripUpdate value) {
        if (tripUpdateBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              tripUpdate_ != com.google.transit.realtime.GtfsRealtime.TripUpdate.getDefaultInstance()) {
            tripUpdate_ =
              com.google.transit.realtime.GtfsRealtime.TripUpdate.newBuilder(tripUpdate_).mergeFrom(value).buildPartial();
          } else {
            tripUpdate_ = value;
          }
          onChanged();
        } else {
          tripUpdateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      public Builder clearTripUpdate() {
        if (tripUpdateBuilder_ == null) {
          tripUpdate_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.getDefaultInstance();
          onChanged();
        } else {
          tripUpdateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.Builder getTripUpdateBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTripUpdateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdateOrBuilder getTripUpdateOrBuilder() {
        if (tripUpdateBuilder_ != null) {
          return tripUpdateBuilder_.getMessageOrBuilder();
        } else {
          return tripUpdate_;
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
       *
       * <pre>
       * Data about the entity itself. Exactly one of the following fields must be
       * present (unless the entity is being deleted).
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripUpdate, com.google.transit.realtime.GtfsRealtime.TripUpdate.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdateOrBuilder> 
          getTripUpdateFieldBuilder() {
        if (tripUpdateBuilder_ == null) {
          tripUpdateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TripUpdate, com.google.transit.realtime.GtfsRealtime.TripUpdate.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdateOrBuilder>(
                  getTripUpdate(),
                  getParentForChildren(),
                  isClean());
          tripUpdate_ = null;
        }
        return tripUpdateBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.VehiclePosition vehicle_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.VehiclePosition, com.google.transit.realtime.GtfsRealtime.VehiclePosition.Builder, com.google.transit.realtime.GtfsRealtime.VehiclePositionOrBuilder> vehicleBuilder_;
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      public boolean hasVehicle() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.VehiclePosition getVehicle() {
        if (vehicleBuilder_ == null) {
          return vehicle_;
        } else {
          return vehicleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      public Builder setVehicle(com.google.transit.realtime.GtfsRealtime.VehiclePosition value) {
        if (vehicleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          vehicle_ = value;
          onChanged();
        } else {
          vehicleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      public Builder setVehicle(
          com.google.transit.realtime.GtfsRealtime.VehiclePosition.Builder builderForValue) {
        if (vehicleBuilder_ == null) {
          vehicle_ = builderForValue.build();
          onChanged();
        } else {
          vehicleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      public Builder mergeVehicle(com.google.transit.realtime.GtfsRealtime.VehiclePosition value) {
        if (vehicleBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              vehicle_ != com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDefaultInstance()) {
            vehicle_ =
              com.google.transit.realtime.GtfsRealtime.VehiclePosition.newBuilder(vehicle_).mergeFrom(value).buildPartial();
          } else {
            vehicle_ = value;
          }
          onChanged();
        } else {
          vehicleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      public Builder clearVehicle() {
        if (vehicleBuilder_ == null) {
          vehicle_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDefaultInstance();
          onChanged();
        } else {
          vehicleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.VehiclePosition.Builder getVehicleBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getVehicleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.VehiclePositionOrBuilder getVehicleOrBuilder() {
        if (vehicleBuilder_ != null) {
          return vehicleBuilder_.getMessageOrBuilder();
        } else {
          return vehicle_;
        }
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.VehiclePosition, com.google.transit.realtime.GtfsRealtime.VehiclePosition.Builder, com.google.transit.realtime.GtfsRealtime.VehiclePositionOrBuilder> 
          getVehicleFieldBuilder() {
        if (vehicleBuilder_ == null) {
          vehicleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.VehiclePosition, com.google.transit.realtime.GtfsRealtime.VehiclePosition.Builder, com.google.transit.realtime.GtfsRealtime.VehiclePositionOrBuilder>(
                  getVehicle(),
                  getParentForChildren(),
                  isClean());
          vehicle_ = null;
        }
        return vehicleBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Alert alert_ = com.google.transit.realtime.GtfsRealtime.Alert.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Alert, com.google.transit.realtime.GtfsRealtime.Alert.Builder, com.google.transit.realtime.GtfsRealtime.AlertOrBuilder> alertBuilder_;
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      public boolean hasAlert() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Alert getAlert() {
        if (alertBuilder_ == null) {
          return alert_;
        } else {
          return alertBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      public Builder setAlert(com.google.transit.realtime.GtfsRealtime.Alert value) {
        if (alertBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          alert_ = value;
          onChanged();
        } else {
          alertBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      public Builder setAlert(
          com.google.transit.realtime.GtfsRealtime.Alert.Builder builderForValue) {
        if (alertBuilder_ == null) {
          alert_ = builderForValue.build();
          onChanged();
        } else {
          alertBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      public Builder mergeAlert(com.google.transit.realtime.GtfsRealtime.Alert value) {
        if (alertBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              alert_ != com.google.transit.realtime.GtfsRealtime.Alert.getDefaultInstance()) {
            alert_ =
              com.google.transit.realtime.GtfsRealtime.Alert.newBuilder(alert_).mergeFrom(value).buildPartial();
          } else {
            alert_ = value;
          }
          onChanged();
        } else {
          alertBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      public Builder clearAlert() {
        if (alertBuilder_ == null) {
          alert_ = com.google.transit.realtime.GtfsRealtime.Alert.getDefaultInstance();
          onChanged();
        } else {
          alertBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Alert.Builder getAlertBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getAlertFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.AlertOrBuilder getAlertOrBuilder() {
        if (alertBuilder_ != null) {
          return alertBuilder_.getMessageOrBuilder();
        } else {
          return alert_;
        }
      }
      /**
       * <code>optional .transit_realtime.Alert alert = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Alert, com.google.transit.realtime.GtfsRealtime.Alert.Builder, com.google.transit.realtime.GtfsRealtime.AlertOrBuilder> 
          getAlertFieldBuilder() {
        if (alertBuilder_ == null) {
          alertBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.Alert, com.google.transit.realtime.GtfsRealtime.Alert.Builder, com.google.transit.realtime.GtfsRealtime.AlertOrBuilder>(
                  getAlert(),
                  getParentForChildren(),
                  isClean());
          alert_ = null;
        }
        return alertBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Trip trip_ = com.google.transit.realtime.GtfsRealtime.Trip.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Trip, com.google.transit.realtime.GtfsRealtime.Trip.Builder, com.google.transit.realtime.GtfsRealtime.TripOrBuilder> tripBuilder_;
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      public boolean hasTrip() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Trip getTrip() {
        if (tripBuilder_ == null) {
          return trip_;
        } else {
          return tripBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      public Builder setTrip(com.google.transit.realtime.GtfsRealtime.Trip value) {
        if (tripBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trip_ = value;
          onChanged();
        } else {
          tripBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      public Builder setTrip(
          com.google.transit.realtime.GtfsRealtime.Trip.Builder builderForValue) {
        if (tripBuilder_ == null) {
          trip_ = builderForValue.build();
          onChanged();
        } else {
          tripBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      public Builder mergeTrip(com.google.transit.realtime.GtfsRealtime.Trip value) {
        if (tripBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              trip_ != com.google.transit.realtime.GtfsRealtime.Trip.getDefaultInstance()) {
            trip_ =
              com.google.transit.realtime.GtfsRealtime.Trip.newBuilder(trip_).mergeFrom(value).buildPartial();
          } else {
            trip_ = value;
          }
          onChanged();
        } else {
          tripBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      public Builder clearTrip() {
        if (tripBuilder_ == null) {
          trip_ = com.google.transit.realtime.GtfsRealtime.Trip.getDefaultInstance();
          onChanged();
        } else {
          tripBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Trip.Builder getTripBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getTripFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripOrBuilder getTripOrBuilder() {
        if (tripBuilder_ != null) {
          return tripBuilder_.getMessageOrBuilder();
        } else {
          return trip_;
        }
      }
      /**
       * <code>optional .transit_realtime.Trip trip = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Trip, com.google.transit.realtime.GtfsRealtime.Trip.Builder, com.google.transit.realtime.GtfsRealtime.TripOrBuilder> 
          getTripFieldBuilder() {
        if (tripBuilder_ == null) {
          tripBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.Trip, com.google.transit.realtime.GtfsRealtime.Trip.Builder, com.google.transit.realtime.GtfsRealtime.TripOrBuilder>(
                  getTrip(),
                  getParentForChildren(),
                  isClean());
          trip_ = null;
        }
        return tripBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Shape shape_ = com.google.transit.realtime.GtfsRealtime.Shape.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Shape, com.google.transit.realtime.GtfsRealtime.Shape.Builder, com.google.transit.realtime.GtfsRealtime.ShapeOrBuilder> shapeBuilder_;
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      public boolean hasShape() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Shape getShape() {
        if (shapeBuilder_ == null) {
          return shape_;
        } else {
          return shapeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      public Builder setShape(com.google.transit.realtime.GtfsRealtime.Shape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          shape_ = value;
          onChanged();
        } else {
          shapeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      public Builder setShape(
          com.google.transit.realtime.GtfsRealtime.Shape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          shape_ = builderForValue.build();
          onChanged();
        } else {
          shapeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      public Builder mergeShape(com.google.transit.realtime.GtfsRealtime.Shape value) {
        if (shapeBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              shape_ != com.google.transit.realtime.GtfsRealtime.Shape.getDefaultInstance()) {
            shape_ =
              com.google.transit.realtime.GtfsRealtime.Shape.newBuilder(shape_).mergeFrom(value).buildPartial();
          } else {
            shape_ = value;
          }
          onChanged();
        } else {
          shapeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      public Builder clearShape() {
        if (shapeBuilder_ == null) {
          shape_ = com.google.transit.realtime.GtfsRealtime.Shape.getDefaultInstance();
          onChanged();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Shape.Builder getShapeBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getShapeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.ShapeOrBuilder getShapeOrBuilder() {
        if (shapeBuilder_ != null) {
          return shapeBuilder_.getMessageOrBuilder();
        } else {
          return shape_;
        }
      }
      /**
       * <code>optional .transit_realtime.Shape shape = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Shape, com.google.transit.realtime.GtfsRealtime.Shape.Builder, com.google.transit.realtime.GtfsRealtime.ShapeOrBuilder> 
          getShapeFieldBuilder() {
        if (shapeBuilder_ == null) {
          shapeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.Shape, com.google.transit.realtime.GtfsRealtime.Shape.Builder, com.google.transit.realtime.GtfsRealtime.ShapeOrBuilder>(
                  getShape(),
                  getParentForChildren(),
                  isClean());
          shape_ = null;
        }
        return shapeBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Route route_ = com.google.transit.realtime.GtfsRealtime.Route.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Route, com.google.transit.realtime.GtfsRealtime.Route.Builder, com.google.transit.realtime.GtfsRealtime.RouteOrBuilder> routeBuilder_;
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      public boolean hasRoute() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Route getRoute() {
        if (routeBuilder_ == null) {
          return route_;
        } else {
          return routeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      public Builder setRoute(com.google.transit.realtime.GtfsRealtime.Route value) {
        if (routeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          route_ = value;
          onChanged();
        } else {
          routeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      public Builder setRoute(
          com.google.transit.realtime.GtfsRealtime.Route.Builder builderForValue) {
        if (routeBuilder_ == null) {
          route_ = builderForValue.build();
          onChanged();
        } else {
          routeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      public Builder mergeRoute(com.google.transit.realtime.GtfsRealtime.Route value) {
        if (routeBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              route_ != com.google.transit.realtime.GtfsRealtime.Route.getDefaultInstance()) {
            route_ =
              com.google.transit.realtime.GtfsRealtime.Route.newBuilder(route_).mergeFrom(value).buildPartial();
          } else {
            route_ = value;
          }
          onChanged();
        } else {
          routeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      public Builder clearRoute() {
        if (routeBuilder_ == null) {
          route_ = com.google.transit.realtime.GtfsRealtime.Route.getDefaultInstance();
          onChanged();
        } else {
          routeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Route.Builder getRouteBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getRouteFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.RouteOrBuilder getRouteOrBuilder() {
        if (routeBuilder_ != null) {
          return routeBuilder_.getMessageOrBuilder();
        } else {
          return route_;
        }
      }
      /**
       * <code>optional .transit_realtime.Route route = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Route, com.google.transit.realtime.GtfsRealtime.Route.Builder, com.google.transit.realtime.GtfsRealtime.RouteOrBuilder> 
          getRouteFieldBuilder() {
        if (routeBuilder_ == null) {
          routeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.Route, com.google.transit.realtime.GtfsRealtime.Route.Builder, com.google.transit.realtime.GtfsRealtime.RouteOrBuilder>(
                  getRoute(),
                  getParentForChildren(),
                  isClean());
          route_ = null;
        }
        return routeBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Stop stop_ = com.google.transit.realtime.GtfsRealtime.Stop.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Stop, com.google.transit.realtime.GtfsRealtime.Stop.Builder, com.google.transit.realtime.GtfsRealtime.StopOrBuilder> stopBuilder_;
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      public boolean hasStop() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Stop getStop() {
        if (stopBuilder_ == null) {
          return stop_;
        } else {
          return stopBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      public Builder setStop(com.google.transit.realtime.GtfsRealtime.Stop value) {
        if (stopBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stop_ = value;
          onChanged();
        } else {
          stopBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      public Builder setStop(
          com.google.transit.realtime.GtfsRealtime.Stop.Builder builderForValue) {
        if (stopBuilder_ == null) {
          stop_ = builderForValue.build();
          onChanged();
        } else {
          stopBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      public Builder mergeStop(com.google.transit.realtime.GtfsRealtime.Stop value) {
        if (stopBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              stop_ != com.google.transit.realtime.GtfsRealtime.Stop.getDefaultInstance()) {
            stop_ =
              com.google.transit.realtime.GtfsRealtime.Stop.newBuilder(stop_).mergeFrom(value).buildPartial();
          } else {
            stop_ = value;
          }
          onChanged();
        } else {
          stopBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      public Builder clearStop() {
        if (stopBuilder_ == null) {
          stop_ = com.google.transit.realtime.GtfsRealtime.Stop.getDefaultInstance();
          onChanged();
        } else {
          stopBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Stop.Builder getStopBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getStopFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.StopOrBuilder getStopOrBuilder() {
        if (stopBuilder_ != null) {
          return stopBuilder_.getMessageOrBuilder();
        } else {
          return stop_;
        }
      }
      /**
       * <code>optional .transit_realtime.Stop stop = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Stop, com.google.transit.realtime.GtfsRealtime.Stop.Builder, com.google.transit.realtime.GtfsRealtime.StopOrBuilder> 
          getStopFieldBuilder() {
        if (stopBuilder_ == null) {
          stopBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.Stop, com.google.transit.realtime.GtfsRealtime.Stop.Builder, com.google.transit.realtime.GtfsRealtime.StopOrBuilder>(
                  getStop(),
                  getParentForChildren(),
                  isClean());
          stop_ = null;
        }
        return stopBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.FeedEntity)
    }

    static {
      defaultInstance = new FeedEntity(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.FeedEntity)
  }

  public interface TripUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<TripUpdate> {

    /**
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     */
    boolean hasTrip();
    /**
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip();
    /**
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder();

    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    boolean hasVehicle();
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.VehicleDescriptor getVehicle();
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder getVehicleOrBuilder();

    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    java.util.List<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate> 
        getStopTimeUpdateList();
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate getStopTimeUpdate(int index);
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    int getStopTimeUpdateCount();
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder> 
        getStopTimeUpdateOrBuilderList();
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(
        int index);

    /**
     * <code>optional uint64 timestamp = 4;</code>
     *
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    boolean hasTimestamp();
    /**
     * <code>optional uint64 timestamp = 4;</code>
     *
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    long getTimestamp();

    /**
     * <code>optional int32 delay = 5;</code>
     *
     * <pre>
     * The current schedule deviation for the trip.  Delay should only be
     * specified when the prediction is given relative to some existing schedule
     * in GTFS.
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * Delay information in StopTimeUpdates take precedent of trip-level delay
     * information, such that trip-level delay is only propagated until the next
     * stop along the trip with a StopTimeUpdate delay value specified.
     * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
     * value indicating when the delay value was last updated, in order to
     * evaluate the freshness of the data.
     * NOTE: This field is still experimental, and subject to change. It may be
     * formally adopted in the future.
     * </pre>
     */
    boolean hasDelay();
    /**
     * <code>optional int32 delay = 5;</code>
     *
     * <pre>
     * The current schedule deviation for the trip.  Delay should only be
     * specified when the prediction is given relative to some existing schedule
     * in GTFS.
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * Delay information in StopTimeUpdates take precedent of trip-level delay
     * information, such that trip-level delay is only propagated until the next
     * stop along the trip with a StopTimeUpdate delay value specified.
     * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
     * value indicating when the delay value was last updated, in order to
     * evaluate the freshness of the data.
     * NOTE: This field is still experimental, and subject to change. It may be
     * formally adopted in the future.
     * </pre>
     */
    int getDelay();

    /**
     * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
     */
    boolean hasTripProperties();
    /**
     * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
     */
    com.google.transit.realtime.GtfsRealtime.TripProperties getTripProperties();
    /**
     * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
     */
    com.google.transit.realtime.GtfsRealtime.TripPropertiesOrBuilder getTripPropertiesOrBuilder();

    /**
     * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
     */
    boolean hasVehicleProperties();
    /**
     * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
     */
    com.google.transit.realtime.GtfsRealtime.VehicleProperties getVehicleProperties();
    /**
     * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
     */
    com.google.transit.realtime.GtfsRealtime.VehiclePropertiesOrBuilder getVehiclePropertiesOrBuilder();
  }
  /**
   * Protobuf type {@code transit_realtime.TripUpdate}
   *
   * <pre>
   * Realtime update of the progress of a vehicle along a trip.
   * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
   * - A trip that proceeds along the schedule.
   * - A trip that proceeds along a route but has no fixed schedule.
   * - A trip that have been added or removed with regard to schedule.
   * The updates can be for future, predicted arrival/departure events, or for
   * past events that already occurred.
   * Normally, updates should get more precise and more certain (see
   * uncertainty below) as the events gets closer to current time.
   * Even if that is not possible, the information for past events should be
   * precise and certain. In particular, if an update points to time in the past
   * but its update's uncertainty is not 0, the client should conclude that the
   * update is a (wrong) prediction and that the trip has not completed yet.
   * Note that the update can describe a trip that is already completed.
   * To this end, it is enough to provide an update for the last stop of the trip.
   * If the time of that is in the past, the client will conclude from that that
   * the whole trip is in the past (it is possible, although inconsequential, to
   * also provide updates for preceding stops).
   * This option is most relevant for a trip that has completed ahead of schedule,
   * but according to the schedule, the trip is still proceeding at the current
   * time. Removing the updates for this trip could make the client assume
   * that the trip is still proceeding.
   * Note that the feed provider is allowed, but not required, to purge past
   * updates - this is one case where this would be practically useful.
   * </pre>
   */
  public static final class TripUpdate extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        TripUpdate> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate)
      TripUpdateOrBuilder {
    // Use TripUpdate.newBuilder() to construct.
    private TripUpdate(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.TripUpdate, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TripUpdate(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TripUpdate defaultInstance;
    public static TripUpdate getDefaultInstance() {
      return defaultInstance;
    }

    public TripUpdate getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TripUpdate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = trip_.toBuilder();
              }
              trip_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TripDescriptor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(trip_);
                trip_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                stopTimeUpdate_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate>();
                mutable_bitField0_ |= 0x00000004;
              }
              stopTimeUpdate_.add(input.readMessage(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = vehicle_.toBuilder();
              }
              vehicle_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(vehicle_);
                vehicle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              timestamp_ = input.readUInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              delay_ = input.readInt32();
              break;
            }
            case 50: {
              com.google.transit.realtime.GtfsRealtime.TripProperties.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = tripProperties_.toBuilder();
              }
              tripProperties_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TripProperties.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tripProperties_);
                tripProperties_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 58: {
              com.google.transit.realtime.GtfsRealtime.VehicleProperties.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = vehicleProperties_.toBuilder();
              }
              vehicleProperties_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.VehicleProperties.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(vehicleProperties_);
                vehicleProperties_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          stopTimeUpdate_ = java.util.Collections.unmodifiableList(stopTimeUpdate_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.TripUpdate.class, com.google.transit.realtime.GtfsRealtime.TripUpdate.Builder.class);
    }

    public static com.google.protobuf.Parser<TripUpdate> PARSER =
        new com.google.protobuf.AbstractParser<TripUpdate>() {
      public TripUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TripUpdate(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TripUpdate> getParserForType() {
      return PARSER;
    }

    public interface StopTimeEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.StopTimeEvent)
        com.google.protobuf.GeneratedMessage.
            ExtendableMessageOrBuilder<StopTimeEvent> {

      /**
       * <code>optional int32 delay = 1;</code>
       *
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       */
      boolean hasDelay();
      /**
       * <code>optional int32 delay = 1;</code>
       *
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       */
      int getDelay();

      /**
       * <code>optional int64 time = 2;</code>
       *
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       */
      boolean hasTime();
      /**
       * <code>optional int64 time = 2;</code>
       *
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       */
      long getTime();

      /**
       * <code>optional int32 uncertainty = 3;</code>
       *
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       */
      boolean hasUncertainty();
      /**
       * <code>optional int32 uncertainty = 3;</code>
       *
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       */
      int getUncertainty();

      /**
       * <code>optional int64 schedule_time = 4;</code>
       */
      boolean hasScheduleTime();
      /**
       * <code>optional int64 schedule_time = 4;</code>
       */
      long getScheduleTime();
    }
    /**
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeEvent}
     *
     * <pre>
     * Timing information for a single predicted event (either arrival or
     * departure).
     * Timing consists of delay and/or estimated time, and uncertainty.
     * - delay should be used when the prediction is given relative to some
     *   existing schedule in GTFS.
     * - time should be given whether there is a predicted schedule or not. If
     *   both time and delay are specified, time will take precedence
     *   (although normally, time, if given for a scheduled trip, should be
     *   equal to scheduled time in GTFS + delay).
     * Uncertainty applies equally to both time and delay.
     * The uncertainty roughly specifies the expected error in true delay (but
     * note, we don't yet define its precise statistical meaning). It's possible
     * for the uncertainty to be 0, for example for trains that are driven under
     * computer timing control.
     * </pre>
     */
    public static final class StopTimeEvent extends
        com.google.protobuf.GeneratedMessage.ExtendableMessage<
          StopTimeEvent> implements
        // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate.StopTimeEvent)
        StopTimeEventOrBuilder {
      // Use StopTimeEvent.newBuilder() to construct.
      private StopTimeEvent(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent, ?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private StopTimeEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final StopTimeEvent defaultInstance;
      public static StopTimeEvent getDefaultInstance() {
        return defaultInstance;
      }

      public StopTimeEvent getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private StopTimeEvent(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                delay_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                time_ = input.readInt64();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                uncertainty_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                scheduleTime_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.class, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder.class);
      }

      public static com.google.protobuf.Parser<StopTimeEvent> PARSER =
          new com.google.protobuf.AbstractParser<StopTimeEvent>() {
        public StopTimeEvent parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new StopTimeEvent(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<StopTimeEvent> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int DELAY_FIELD_NUMBER = 1;
      private int delay_;
      /**
       * <code>optional int32 delay = 1;</code>
       *
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       */
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 delay = 1;</code>
       *
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       */
      public int getDelay() {
        return delay_;
      }

      public static final int TIME_FIELD_NUMBER = 2;
      private long time_;
      /**
       * <code>optional int64 time = 2;</code>
       *
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 time = 2;</code>
       *
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       */
      public long getTime() {
        return time_;
      }

      public static final int UNCERTAINTY_FIELD_NUMBER = 3;
      private int uncertainty_;
      /**
       * <code>optional int32 uncertainty = 3;</code>
       *
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       */
      public boolean hasUncertainty() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 uncertainty = 3;</code>
       *
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       */
      public int getUncertainty() {
        return uncertainty_;
      }

      public static final int SCHEDULE_TIME_FIELD_NUMBER = 4;
      private long scheduleTime_;
      /**
       * <code>optional int64 schedule_time = 4;</code>
       */
      public boolean hasScheduleTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 schedule_time = 4;</code>
       */
      public long getScheduleTime() {
        return scheduleTime_;
      }

      private void initFields() {
        delay_ = 0;
        time_ = 0L;
        uncertainty_ = 0;
        scheduleTime_ = 0L;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!extensionsAreInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        com.google.protobuf.GeneratedMessage
          .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent>.ExtensionWriter extensionWriter =
            newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, delay_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt64(2, time_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, uncertainty_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt64(4, scheduleTime_);
        }
        extensionWriter.writeUntil(2000, output);
        extensionWriter.writeUntil(10000, output);
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, delay_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, time_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, uncertainty_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, scheduleTime_);
        }
        size += extensionsSerializedSize();
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code transit_realtime.TripUpdate.StopTimeEvent}
       *
       * <pre>
       * Timing information for a single predicted event (either arrival or
       * departure).
       * Timing consists of delay and/or estimated time, and uncertainty.
       * - delay should be used when the prediction is given relative to some
       *   existing schedule in GTFS.
       * - time should be given whether there is a predicted schedule or not. If
       *   both time and delay are specified, time will take precedence
       *   (although normally, time, if given for a scheduled trip, should be
       *   equal to scheduled time in GTFS + delay).
       * Uncertainty applies equally to both time and delay.
       * The uncertainty roughly specifies the expected error in true delay (but
       * note, we don't yet define its precise statistical meaning). It's possible
       * for the uncertainty to be 0, for example for trains that are driven under
       * computer timing control.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.ExtendableBuilder<
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent, Builder> implements
          // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate.StopTimeEvent)
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.class, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder.class);
        }

        // Construct using com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          delay_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          time_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000002);
          uncertainty_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          scheduleTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
        }

        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent getDefaultInstanceForType() {
          return com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
        }

        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent build() {
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent buildPartial() {
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent result = new com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.delay_ = delay_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.time_ = time_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.uncertainty_ = uncertainty_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.scheduleTime_ = scheduleTime_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent) {
            return mergeFrom((com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent other) {
          if (other == com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance()) return this;
          if (other.hasDelay()) {
            setDelay(other.getDelay());
          }
          if (other.hasTime()) {
            setTime(other.getTime());
          }
          if (other.hasUncertainty()) {
            setUncertainty(other.getUncertainty());
          }
          if (other.hasScheduleTime()) {
            setScheduleTime(other.getScheduleTime());
          }
          this.mergeExtensionFields(other);
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!extensionsAreInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int delay_ ;
        /**
         * <code>optional int32 delay = 1;</code>
         *
         * <pre>
         * Delay (in seconds) can be positive (meaning that the vehicle is late) or
         * negative (meaning that the vehicle is ahead of schedule). Delay of 0
         * means that the vehicle is exactly on time.
         * </pre>
         */
        public boolean hasDelay() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 delay = 1;</code>
         *
         * <pre>
         * Delay (in seconds) can be positive (meaning that the vehicle is late) or
         * negative (meaning that the vehicle is ahead of schedule). Delay of 0
         * means that the vehicle is exactly on time.
         * </pre>
         */
        public int getDelay() {
          return delay_;
        }
        /**
         * <code>optional int32 delay = 1;</code>
         *
         * <pre>
         * Delay (in seconds) can be positive (meaning that the vehicle is late) or
         * negative (meaning that the vehicle is ahead of schedule). Delay of 0
         * means that the vehicle is exactly on time.
         * </pre>
         */
        public Builder setDelay(int value) {
          bitField0_ |= 0x00000001;
          delay_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 delay = 1;</code>
         *
         * <pre>
         * Delay (in seconds) can be positive (meaning that the vehicle is late) or
         * negative (meaning that the vehicle is ahead of schedule). Delay of 0
         * means that the vehicle is exactly on time.
         * </pre>
         */
        public Builder clearDelay() {
          bitField0_ = (bitField0_ & ~0x00000001);
          delay_ = 0;
          onChanged();
          return this;
        }

        private long time_ ;
        /**
         * <code>optional int64 time = 2;</code>
         *
         * <pre>
         * Event as absolute time.
         * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
         * UTC).
         * </pre>
         */
        public boolean hasTime() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int64 time = 2;</code>
         *
         * <pre>
         * Event as absolute time.
         * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
         * UTC).
         * </pre>
         */
        public long getTime() {
          return time_;
        }
        /**
         * <code>optional int64 time = 2;</code>
         *
         * <pre>
         * Event as absolute time.
         * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
         * UTC).
         * </pre>
         */
        public Builder setTime(long value) {
          bitField0_ |= 0x00000002;
          time_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 time = 2;</code>
         *
         * <pre>
         * Event as absolute time.
         * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
         * UTC).
         * </pre>
         */
        public Builder clearTime() {
          bitField0_ = (bitField0_ & ~0x00000002);
          time_ = 0L;
          onChanged();
          return this;
        }

        private int uncertainty_ ;
        /**
         * <code>optional int32 uncertainty = 3;</code>
         *
         * <pre>
         * If uncertainty is omitted, it is interpreted as unknown.
         * If the prediction is unknown or too uncertain, the delay (or time) field
         * should be empty. In such case, the uncertainty field is ignored.
         * To specify a completely certain prediction, set its uncertainty to 0.
         * </pre>
         */
        public boolean hasUncertainty() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int32 uncertainty = 3;</code>
         *
         * <pre>
         * If uncertainty is omitted, it is interpreted as unknown.
         * If the prediction is unknown or too uncertain, the delay (or time) field
         * should be empty. In such case, the uncertainty field is ignored.
         * To specify a completely certain prediction, set its uncertainty to 0.
         * </pre>
         */
        public int getUncertainty() {
          return uncertainty_;
        }
        /**
         * <code>optional int32 uncertainty = 3;</code>
         *
         * <pre>
         * If uncertainty is omitted, it is interpreted as unknown.
         * If the prediction is unknown or too uncertain, the delay (or time) field
         * should be empty. In such case, the uncertainty field is ignored.
         * To specify a completely certain prediction, set its uncertainty to 0.
         * </pre>
         */
        public Builder setUncertainty(int value) {
          bitField0_ |= 0x00000004;
          uncertainty_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 uncertainty = 3;</code>
         *
         * <pre>
         * If uncertainty is omitted, it is interpreted as unknown.
         * If the prediction is unknown or too uncertain, the delay (or time) field
         * should be empty. In such case, the uncertainty field is ignored.
         * To specify a completely certain prediction, set its uncertainty to 0.
         * </pre>
         */
        public Builder clearUncertainty() {
          bitField0_ = (bitField0_ & ~0x00000004);
          uncertainty_ = 0;
          onChanged();
          return this;
        }

        private long scheduleTime_ ;
        /**
         * <code>optional int64 schedule_time = 4;</code>
         */
        public boolean hasScheduleTime() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional int64 schedule_time = 4;</code>
         */
        public long getScheduleTime() {
          return scheduleTime_;
        }
        /**
         * <code>optional int64 schedule_time = 4;</code>
         */
        public Builder setScheduleTime(long value) {
          bitField0_ |= 0x00000008;
          scheduleTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 schedule_time = 4;</code>
         */
        public Builder clearScheduleTime() {
          bitField0_ = (bitField0_ & ~0x00000008);
          scheduleTime_ = 0L;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeEvent)
      }

      static {
        defaultInstance = new StopTimeEvent(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeEvent)
    }

    public interface StopTimeUpdateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.StopTimeUpdate)
        com.google.protobuf.GeneratedMessage.
            ExtendableMessageOrBuilder<StopTimeUpdate> {

      /**
       * <code>optional uint32 stop_sequence = 1;</code>
       *
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       */
      boolean hasStopSequence();
      /**
       * <code>optional uint32 stop_sequence = 1;</code>
       *
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       */
      int getStopSequence();

      /**
       * <code>optional string stop_id = 4;</code>
       *
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       */
      boolean hasStopId();
      /**
       * <code>optional string stop_id = 4;</code>
       *
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       */
      java.lang.String getStopId();
      /**
       * <code>optional string stop_id = 4;</code>
       *
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       */
      com.google.protobuf.ByteString
          getStopIdBytes();

      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      boolean hasArrival();
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent getArrival();
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder();

      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      boolean hasDeparture();
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent getDeparture();
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder();

      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       */
      boolean hasScheduleRelationship();
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       */
      com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship();

      /**
       * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
       */
      boolean hasStopTimeProperties();
      /**
       * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
       */
      com.google.transit.realtime.GtfsRealtime.StopTimeProperties getStopTimeProperties();
      /**
       * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
       */
      com.google.transit.realtime.GtfsRealtime.StopTimePropertiesOrBuilder getStopTimePropertiesOrBuilder();
    }
    /**
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate}
     *
     * <pre>
     * Realtime update for arrival and/or departure events for a given stop on a
     * trip. Updates can be supplied for both past and future events.
     * The producer is allowed, although not required, to drop past events.
     * </pre>
     */
    public static final class StopTimeUpdate extends
        com.google.protobuf.GeneratedMessage.ExtendableMessage<
          StopTimeUpdate> implements
        // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate.StopTimeUpdate)
        StopTimeUpdateOrBuilder {
      // Use StopTimeUpdate.newBuilder() to construct.
      private StopTimeUpdate(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate, ?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private StopTimeUpdate(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final StopTimeUpdate defaultInstance;
      public static StopTimeUpdate getDefaultInstance() {
        return defaultInstance;
      }

      public StopTimeUpdate getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private StopTimeUpdate(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                stopSequence_ = input.readUInt32();
                break;
              }
              case 18: {
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = arrival_.toBuilder();
                }
                arrival_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(arrival_);
                  arrival_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 26: {
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = departure_.toBuilder();
                }
                departure_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(departure_);
                  departure_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 34: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                stopId_ = bs;
                break;
              }
              case 40: {
                int rawValue = input.readEnum();
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship value = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(5, rawValue);
                } else {
                  bitField0_ |= 0x00000010;
                  scheduleRelationship_ = value;
                }
                break;
              }
              case 50: {
                com.google.transit.realtime.GtfsRealtime.StopTimeProperties.Builder subBuilder = null;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                  subBuilder = stopTimeProperties_.toBuilder();
                }
                stopTimeProperties_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(stopTimeProperties_);
                  stopTimeProperties_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000020;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.class, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder.class);
      }

      public static com.google.protobuf.Parser<StopTimeUpdate> PARSER =
          new com.google.protobuf.AbstractParser<StopTimeUpdate>() {
        public StopTimeUpdate parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new StopTimeUpdate(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<StopTimeUpdate> getParserForType() {
        return PARSER;
      }

      /**
       * Protobuf enum {@code transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship}
       *
       * <pre>
       * The relation between this StopTime and the static schedule.
       * </pre>
       */
      public enum ScheduleRelationship
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>SCHEDULED = 0;</code>
         *
         * <pre>
         * The vehicle is proceeding in accordance with its static schedule of
         * stops, although not necessarily according to the times of the schedule.
         * At least one of arrival and departure must be provided. If the schedule
         * for this stop contains both arrival and departure times then so must
         * this update. Frequency-based trips (GTFS frequencies.txt with exact_times = 0)
         * should not have a SCHEDULED value and should use UNSCHEDULED instead.
         * </pre>
         */
        SCHEDULED(0, 0),
        /**
         * <code>SKIPPED = 1;</code>
         *
         * <pre>
         * The stop is skipped, i.e., the vehicle will not stop at this stop.
         * Arrival and departure are optional.
         * </pre>
         */
        SKIPPED(1, 1),
        /**
         * <code>NO_DATA = 2;</code>
         *
         * <pre>
         * No data is given for this stop. The main intention for this value is to
         * give the predictions only for part of a trip, i.e., if the last update
         * for a trip has a NO_DATA specifier, then StopTimes for the rest of the
         * stops in the trip are considered to be unspecified as well.
         * Neither arrival nor departure should be supplied.
         * </pre>
         */
        NO_DATA(2, 2),
        /**
         * <code>UNSCHEDULED = 3;</code>
         *
         * <pre>
         * The vehicle is operating a trip defined in GTFS frequencies.txt with exact_times = 0.
         * This value should not be used for trips that are not defined in GTFS frequencies.txt,
         * or trips in GTFS frequencies.txt with exact_times = 1. Trips containing StopTimeUpdates
         * with ScheduleRelationship=UNSCHEDULED must also set TripDescriptor.ScheduleRelationship=UNSCHEDULED.
         * NOTE: This field is still experimental, and subject to change. It may be
         * formally adopted in the future.
         * </pre>
         */
        UNSCHEDULED(3, 3),
        ;

        /**
         * <code>SCHEDULED = 0;</code>
         *
         * <pre>
         * The vehicle is proceeding in accordance with its static schedule of
         * stops, although not necessarily according to the times of the schedule.
         * At least one of arrival and departure must be provided. If the schedule
         * for this stop contains both arrival and departure times then so must
         * this update. Frequency-based trips (GTFS frequencies.txt with exact_times = 0)
         * should not have a SCHEDULED value and should use UNSCHEDULED instead.
         * </pre>
         */
        public static final int SCHEDULED_VALUE = 0;
        /**
         * <code>SKIPPED = 1;</code>
         *
         * <pre>
         * The stop is skipped, i.e., the vehicle will not stop at this stop.
         * Arrival and departure are optional.
         * </pre>
         */
        public static final int SKIPPED_VALUE = 1;
        /**
         * <code>NO_DATA = 2;</code>
         *
         * <pre>
         * No data is given for this stop. The main intention for this value is to
         * give the predictions only for part of a trip, i.e., if the last update
         * for a trip has a NO_DATA specifier, then StopTimes for the rest of the
         * stops in the trip are considered to be unspecified as well.
         * Neither arrival nor departure should be supplied.
         * </pre>
         */
        public static final int NO_DATA_VALUE = 2;
        /**
         * <code>UNSCHEDULED = 3;</code>
         *
         * <pre>
         * The vehicle is operating a trip defined in GTFS frequencies.txt with exact_times = 0.
         * This value should not be used for trips that are not defined in GTFS frequencies.txt,
         * or trips in GTFS frequencies.txt with exact_times = 1. Trips containing StopTimeUpdates
         * with ScheduleRelationship=UNSCHEDULED must also set TripDescriptor.ScheduleRelationship=UNSCHEDULED.
         * NOTE: This field is still experimental, and subject to change. It may be
         * formally adopted in the future.
         * </pre>
         */
        public static final int UNSCHEDULED_VALUE = 3;


        public final int getNumber() { return value; }

        public static ScheduleRelationship valueOf(int value) {
          switch (value) {
            case 0: return SCHEDULED;
            case 1: return SKIPPED;
            case 2: return NO_DATA;
            case 3: return UNSCHEDULED;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>
            internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>() {
                public ScheduleRelationship findValueByNumber(int number) {
                  return ScheduleRelationship.valueOf(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.getDescriptor().getEnumTypes().get(0);
        }

        private static final ScheduleRelationship[] VALUES = values();

        public static ScheduleRelationship valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private ScheduleRelationship(int index, int value) {
          this.index = index;
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship)
      }

      private int bitField0_;
      public static final int STOP_SEQUENCE_FIELD_NUMBER = 1;
      private int stopSequence_;
      /**
       * <code>optional uint32 stop_sequence = 1;</code>
       *
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       */
      public boolean hasStopSequence() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 stop_sequence = 1;</code>
       *
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       */
      public int getStopSequence() {
        return stopSequence_;
      }

      public static final int STOP_ID_FIELD_NUMBER = 4;
      private java.lang.Object stopId_;
      /**
       * <code>optional string stop_id = 4;</code>
       *
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       */
      public boolean hasStopId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string stop_id = 4;</code>
       *
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       */
      public java.lang.String getStopId() {
        java.lang.Object ref = stopId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string stop_id = 4;</code>
       *
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStopIdBytes() {
        java.lang.Object ref = stopId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int ARRIVAL_FIELD_NUMBER = 2;
      private com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent arrival_;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public boolean hasArrival() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent getArrival() {
        return arrival_;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder() {
        return arrival_;
      }

      public static final int DEPARTURE_FIELD_NUMBER = 3;
      private com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent departure_;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public boolean hasDeparture() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent getDeparture() {
        return departure_;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder() {
        return departure_;
      }

      public static final int SCHEDULE_RELATIONSHIP_FIELD_NUMBER = 5;
      private com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship scheduleRelationship_;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       */
      public boolean hasScheduleRelationship() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship() {
        return scheduleRelationship_;
      }

      public static final int STOP_TIME_PROPERTIES_FIELD_NUMBER = 6;
      private com.google.transit.realtime.GtfsRealtime.StopTimeProperties stopTimeProperties_;
      /**
       * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
       */
      public boolean hasStopTimeProperties() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.StopTimeProperties getStopTimeProperties() {
        return stopTimeProperties_;
      }
      /**
       * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.StopTimePropertiesOrBuilder getStopTimePropertiesOrBuilder() {
        return stopTimeProperties_;
      }

      private void initFields() {
        stopSequence_ = 0;
        stopId_ = "";
        arrival_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
        departure_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
        scheduleRelationship_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED;
        stopTimeProperties_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasArrival()) {
          if (!getArrival().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasDeparture()) {
          if (!getDeparture().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasStopTimeProperties()) {
          if (!getStopTimeProperties().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        com.google.protobuf.GeneratedMessage
          .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate>.ExtensionWriter extensionWriter =
            newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, stopSequence_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(2, arrival_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(3, departure_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(4, getStopIdBytes());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeEnum(5, scheduleRelationship_.getNumber());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(6, stopTimeProperties_);
        }
        extensionWriter.writeUntil(2000, output);
        extensionWriter.writeUntil(10000, output);
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, stopSequence_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, arrival_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, departure_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, getStopIdBytes());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(5, scheduleRelationship_.getNumber());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, stopTimeProperties_);
        }
        size += extensionsSerializedSize();
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate}
       *
       * <pre>
       * Realtime update for arrival and/or departure events for a given stop on a
       * trip. Updates can be supplied for both past and future events.
       * The producer is allowed, although not required, to drop past events.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.ExtendableBuilder<
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate, Builder> implements
          // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate.StopTimeUpdate)
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.class, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder.class);
        }

        // Construct using com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getArrivalFieldBuilder();
            getDepartureFieldBuilder();
            getStopTimePropertiesFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          stopSequence_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          stopId_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          if (arrivalBuilder_ == null) {
            arrival_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
          } else {
            arrivalBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (departureBuilder_ == null) {
            departure_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
          } else {
            departureBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          scheduleRelationship_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED;
          bitField0_ = (bitField0_ & ~0x00000010);
          if (stopTimePropertiesBuilder_ == null) {
            stopTimeProperties_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDefaultInstance();
          } else {
            stopTimePropertiesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
        }

        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate getDefaultInstanceForType() {
          return com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.getDefaultInstance();
        }

        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate build() {
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate buildPartial() {
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate result = new com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.stopSequence_ = stopSequence_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.stopId_ = stopId_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (arrivalBuilder_ == null) {
            result.arrival_ = arrival_;
          } else {
            result.arrival_ = arrivalBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          if (departureBuilder_ == null) {
            result.departure_ = departure_;
          } else {
            result.departure_ = departureBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.scheduleRelationship_ = scheduleRelationship_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          if (stopTimePropertiesBuilder_ == null) {
            result.stopTimeProperties_ = stopTimeProperties_;
          } else {
            result.stopTimeProperties_ = stopTimePropertiesBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate) {
            return mergeFrom((com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate other) {
          if (other == com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.getDefaultInstance()) return this;
          if (other.hasStopSequence()) {
            setStopSequence(other.getStopSequence());
          }
          if (other.hasStopId()) {
            bitField0_ |= 0x00000002;
            stopId_ = other.stopId_;
            onChanged();
          }
          if (other.hasArrival()) {
            mergeArrival(other.getArrival());
          }
          if (other.hasDeparture()) {
            mergeDeparture(other.getDeparture());
          }
          if (other.hasScheduleRelationship()) {
            setScheduleRelationship(other.getScheduleRelationship());
          }
          if (other.hasStopTimeProperties()) {
            mergeStopTimeProperties(other.getStopTimeProperties());
          }
          this.mergeExtensionFields(other);
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasArrival()) {
            if (!getArrival().isInitialized()) {
              
              return false;
            }
          }
          if (hasDeparture()) {
            if (!getDeparture().isInitialized()) {
              
              return false;
            }
          }
          if (hasStopTimeProperties()) {
            if (!getStopTimeProperties().isInitialized()) {
              
              return false;
            }
          }
          if (!extensionsAreInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int stopSequence_ ;
        /**
         * <code>optional uint32 stop_sequence = 1;</code>
         *
         * <pre>
         * Must be the same as in stop_times.txt in the corresponding GTFS feed.
         * </pre>
         */
        public boolean hasStopSequence() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 stop_sequence = 1;</code>
         *
         * <pre>
         * Must be the same as in stop_times.txt in the corresponding GTFS feed.
         * </pre>
         */
        public int getStopSequence() {
          return stopSequence_;
        }
        /**
         * <code>optional uint32 stop_sequence = 1;</code>
         *
         * <pre>
         * Must be the same as in stop_times.txt in the corresponding GTFS feed.
         * </pre>
         */
        public Builder setStopSequence(int value) {
          bitField0_ |= 0x00000001;
          stopSequence_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 stop_sequence = 1;</code>
         *
         * <pre>
         * Must be the same as in stop_times.txt in the corresponding GTFS feed.
         * </pre>
         */
        public Builder clearStopSequence() {
          bitField0_ = (bitField0_ & ~0x00000001);
          stopSequence_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object stopId_ = "";
        /**
         * <code>optional string stop_id = 4;</code>
         *
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         */
        public boolean hasStopId() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string stop_id = 4;</code>
         *
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         */
        public java.lang.String getStopId() {
          java.lang.Object ref = stopId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              stopId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string stop_id = 4;</code>
         *
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getStopIdBytes() {
          java.lang.Object ref = stopId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            stopId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string stop_id = 4;</code>
         *
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         */
        public Builder setStopId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          stopId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string stop_id = 4;</code>
         *
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         */
        public Builder clearStopId() {
          bitField0_ = (bitField0_ & ~0x00000002);
          stopId_ = getDefaultInstance().getStopId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string stop_id = 4;</code>
         *
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         */
        public Builder setStopIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          stopId_ = value;
          onChanged();
          return this;
        }

        private com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent arrival_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder> arrivalBuilder_;
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        public boolean hasArrival() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent getArrival() {
          if (arrivalBuilder_ == null) {
            return arrival_;
          } else {
            return arrivalBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        public Builder setArrival(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent value) {
          if (arrivalBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            arrival_ = value;
            onChanged();
          } else {
            arrivalBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        public Builder setArrival(
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder builderForValue) {
          if (arrivalBuilder_ == null) {
            arrival_ = builderForValue.build();
            onChanged();
          } else {
            arrivalBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        public Builder mergeArrival(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent value) {
          if (arrivalBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                arrival_ != com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance()) {
              arrival_ =
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.newBuilder(arrival_).mergeFrom(value).buildPartial();
            } else {
              arrival_ = value;
            }
            onChanged();
          } else {
            arrivalBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        public Builder clearArrival() {
          if (arrivalBuilder_ == null) {
            arrival_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
            onChanged();
          } else {
            arrivalBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder getArrivalBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getArrivalFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder() {
          if (arrivalBuilder_ != null) {
            return arrivalBuilder_.getMessageOrBuilder();
          } else {
            return arrival_;
          }
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder> 
            getArrivalFieldBuilder() {
          if (arrivalBuilder_ == null) {
            arrivalBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder>(
                    getArrival(),
                    getParentForChildren(),
                    isClean());
            arrival_ = null;
          }
          return arrivalBuilder_;
        }

        private com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent departure_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder> departureBuilder_;
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        public boolean hasDeparture() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent getDeparture() {
          if (departureBuilder_ == null) {
            return departure_;
          } else {
            return departureBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        public Builder setDeparture(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent value) {
          if (departureBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            departure_ = value;
            onChanged();
          } else {
            departureBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        public Builder setDeparture(
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder builderForValue) {
          if (departureBuilder_ == null) {
            departure_ = builderForValue.build();
            onChanged();
          } else {
            departureBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        public Builder mergeDeparture(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent value) {
          if (departureBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                departure_ != com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance()) {
              departure_ =
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.newBuilder(departure_).mergeFrom(value).buildPartial();
            } else {
              departure_ = value;
            }
            onChanged();
          } else {
            departureBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        public Builder clearDeparture() {
          if (departureBuilder_ == null) {
            departure_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.getDefaultInstance();
            onChanged();
          } else {
            departureBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder getDepartureBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getDepartureFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder() {
          if (departureBuilder_ != null) {
            return departureBuilder_.getMessageOrBuilder();
          } else {
            return departure_;
          }
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder> 
            getDepartureFieldBuilder() {
          if (departureBuilder_ == null) {
            departureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEvent.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeEventOrBuilder>(
                    getDeparture(),
                    getParentForChildren(),
                    isClean());
            departure_ = null;
          }
          return departureBuilder_;
        }

        private com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship scheduleRelationship_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED;
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
         */
        public boolean hasScheduleRelationship() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
         */
        public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship() {
          return scheduleRelationship_;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
         */
        public Builder setScheduleRelationship(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000010;
          scheduleRelationship_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
         */
        public Builder clearScheduleRelationship() {
          bitField0_ = (bitField0_ & ~0x00000010);
          scheduleRelationship_ = com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED;
          onChanged();
          return this;
        }

        private com.google.transit.realtime.GtfsRealtime.StopTimeProperties stopTimeProperties_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.google.transit.realtime.GtfsRealtime.StopTimeProperties, com.google.transit.realtime.GtfsRealtime.StopTimeProperties.Builder, com.google.transit.realtime.GtfsRealtime.StopTimePropertiesOrBuilder> stopTimePropertiesBuilder_;
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        public boolean hasStopTimeProperties() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.StopTimeProperties getStopTimeProperties() {
          if (stopTimePropertiesBuilder_ == null) {
            return stopTimeProperties_;
          } else {
            return stopTimePropertiesBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        public Builder setStopTimeProperties(com.google.transit.realtime.GtfsRealtime.StopTimeProperties value) {
          if (stopTimePropertiesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            stopTimeProperties_ = value;
            onChanged();
          } else {
            stopTimePropertiesBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        public Builder setStopTimeProperties(
            com.google.transit.realtime.GtfsRealtime.StopTimeProperties.Builder builderForValue) {
          if (stopTimePropertiesBuilder_ == null) {
            stopTimeProperties_ = builderForValue.build();
            onChanged();
          } else {
            stopTimePropertiesBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        public Builder mergeStopTimeProperties(com.google.transit.realtime.GtfsRealtime.StopTimeProperties value) {
          if (stopTimePropertiesBuilder_ == null) {
            if (((bitField0_ & 0x00000020) == 0x00000020) &&
                stopTimeProperties_ != com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDefaultInstance()) {
              stopTimeProperties_ =
                com.google.transit.realtime.GtfsRealtime.StopTimeProperties.newBuilder(stopTimeProperties_).mergeFrom(value).buildPartial();
            } else {
              stopTimeProperties_ = value;
            }
            onChanged();
          } else {
            stopTimePropertiesBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        public Builder clearStopTimeProperties() {
          if (stopTimePropertiesBuilder_ == null) {
            stopTimeProperties_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDefaultInstance();
            onChanged();
          } else {
            stopTimePropertiesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.StopTimeProperties.Builder getStopTimePropertiesBuilder() {
          bitField0_ |= 0x00000020;
          onChanged();
          return getStopTimePropertiesFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        public com.google.transit.realtime.GtfsRealtime.StopTimePropertiesOrBuilder getStopTimePropertiesOrBuilder() {
          if (stopTimePropertiesBuilder_ != null) {
            return stopTimePropertiesBuilder_.getMessageOrBuilder();
          } else {
            return stopTimeProperties_;
          }
        }
        /**
         * <code>optional .transit_realtime.StopTimeProperties stop_time_properties = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.google.transit.realtime.GtfsRealtime.StopTimeProperties, com.google.transit.realtime.GtfsRealtime.StopTimeProperties.Builder, com.google.transit.realtime.GtfsRealtime.StopTimePropertiesOrBuilder> 
            getStopTimePropertiesFieldBuilder() {
          if (stopTimePropertiesBuilder_ == null) {
            stopTimePropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.google.transit.realtime.GtfsRealtime.StopTimeProperties, com.google.transit.realtime.GtfsRealtime.StopTimeProperties.Builder, com.google.transit.realtime.GtfsRealtime.StopTimePropertiesOrBuilder>(
                    getStopTimeProperties(),
                    getParentForChildren(),
                    isClean());
            stopTimeProperties_ = null;
          }
          return stopTimePropertiesBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeUpdate)
      }

      static {
        defaultInstance = new StopTimeUpdate(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeUpdate)
    }

    private int bitField0_;
    public static final int TRIP_FIELD_NUMBER = 1;
    private com.google.transit.realtime.GtfsRealtime.TripDescriptor trip_;
    /**
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     */
    public boolean hasTrip() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip() {
      return trip_;
    }
    /**
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder() {
      return trip_;
    }

    public static final int VEHICLE_FIELD_NUMBER = 3;
    private com.google.transit.realtime.GtfsRealtime.VehicleDescriptor vehicle_;
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    public boolean hasVehicle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor getVehicle() {
      return vehicle_;
    }
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
      return vehicle_;
    }

    public static final int STOP_TIME_UPDATE_FIELD_NUMBER = 2;
    private java.util.List<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate> stopTimeUpdate_;
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    public java.util.List<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate> getStopTimeUpdateList() {
      return stopTimeUpdate_;
    }
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder> 
        getStopTimeUpdateOrBuilderList() {
      return stopTimeUpdate_;
    }
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    public int getStopTimeUpdateCount() {
      return stopTimeUpdate_.size();
    }
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate getStopTimeUpdate(int index) {
      return stopTimeUpdate_.get(index);
    }
    /**
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     *
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(
        int index) {
      return stopTimeUpdate_.get(index);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 4;
    private long timestamp_;
    /**
     * <code>optional uint64 timestamp = 4;</code>
     *
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 timestamp = 4;</code>
     *
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int DELAY_FIELD_NUMBER = 5;
    private int delay_;
    /**
     * <code>optional int32 delay = 5;</code>
     *
     * <pre>
     * The current schedule deviation for the trip.  Delay should only be
     * specified when the prediction is given relative to some existing schedule
     * in GTFS.
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * Delay information in StopTimeUpdates take precedent of trip-level delay
     * information, such that trip-level delay is only propagated until the next
     * stop along the trip with a StopTimeUpdate delay value specified.
     * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
     * value indicating when the delay value was last updated, in order to
     * evaluate the freshness of the data.
     * NOTE: This field is still experimental, and subject to change. It may be
     * formally adopted in the future.
     * </pre>
     */
    public boolean hasDelay() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 delay = 5;</code>
     *
     * <pre>
     * The current schedule deviation for the trip.  Delay should only be
     * specified when the prediction is given relative to some existing schedule
     * in GTFS.
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * Delay information in StopTimeUpdates take precedent of trip-level delay
     * information, such that trip-level delay is only propagated until the next
     * stop along the trip with a StopTimeUpdate delay value specified.
     * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
     * value indicating when the delay value was last updated, in order to
     * evaluate the freshness of the data.
     * NOTE: This field is still experimental, and subject to change. It may be
     * formally adopted in the future.
     * </pre>
     */
    public int getDelay() {
      return delay_;
    }

    public static final int TRIP_PROPERTIES_FIELD_NUMBER = 6;
    private com.google.transit.realtime.GtfsRealtime.TripProperties tripProperties_;
    /**
     * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
     */
    public boolean hasTripProperties() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.TripProperties getTripProperties() {
      return tripProperties_;
    }
    /**
     * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.TripPropertiesOrBuilder getTripPropertiesOrBuilder() {
      return tripProperties_;
    }

    public static final int VEHICLE_PROPERTIES_FIELD_NUMBER = 7;
    private com.google.transit.realtime.GtfsRealtime.VehicleProperties vehicleProperties_;
    /**
     * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
     */
    public boolean hasVehicleProperties() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.VehicleProperties getVehicleProperties() {
      return vehicleProperties_;
    }
    /**
     * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.VehiclePropertiesOrBuilder getVehiclePropertiesOrBuilder() {
      return vehicleProperties_;
    }

    private void initFields() {
      trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
      vehicle_ = com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
      stopTimeUpdate_ = java.util.Collections.emptyList();
      timestamp_ = 0L;
      delay_ = 0;
      tripProperties_ = com.google.transit.realtime.GtfsRealtime.TripProperties.getDefaultInstance();
      vehicleProperties_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTrip()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTrip().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasVehicle()) {
        if (!getVehicle().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getStopTimeUpdateCount(); i++) {
        if (!getStopTimeUpdate(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTripProperties()) {
        if (!getTripProperties().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.TripUpdate>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, trip_);
      }
      for (int i = 0; i < stopTimeUpdate_.size(); i++) {
        output.writeMessage(2, stopTimeUpdate_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, vehicle_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(4, timestamp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, delay_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, tripProperties_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(7, vehicleProperties_);
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, trip_);
      }
      for (int i = 0; i < stopTimeUpdate_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, stopTimeUpdate_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, vehicle_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, timestamp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, delay_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, tripProperties_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, vehicleProperties_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.TripUpdate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.TripUpdate}
     *
     * <pre>
     * Realtime update of the progress of a vehicle along a trip.
     * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
     * - A trip that proceeds along the schedule.
     * - A trip that proceeds along a route but has no fixed schedule.
     * - A trip that have been added or removed with regard to schedule.
     * The updates can be for future, predicted arrival/departure events, or for
     * past events that already occurred.
     * Normally, updates should get more precise and more certain (see
     * uncertainty below) as the events gets closer to current time.
     * Even if that is not possible, the information for past events should be
     * precise and certain. In particular, if an update points to time in the past
     * but its update's uncertainty is not 0, the client should conclude that the
     * update is a (wrong) prediction and that the trip has not completed yet.
     * Note that the update can describe a trip that is already completed.
     * To this end, it is enough to provide an update for the last stop of the trip.
     * If the time of that is in the past, the client will conclude from that that
     * the whole trip is in the past (it is possible, although inconsequential, to
     * also provide updates for preceding stops).
     * This option is most relevant for a trip that has completed ahead of schedule,
     * but according to the schedule, the trip is still proceeding at the current
     * time. Removing the updates for this trip could make the client assume
     * that the trip is still proceeding.
     * Note that the feed provider is allowed, but not required, to purge past
     * updates - this is one case where this would be practically useful.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.TripUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate)
        com.google.transit.realtime.GtfsRealtime.TripUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.TripUpdate.class, com.google.transit.realtime.GtfsRealtime.TripUpdate.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.TripUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTripFieldBuilder();
          getVehicleFieldBuilder();
          getStopTimeUpdateFieldBuilder();
          getTripPropertiesFieldBuilder();
          getVehiclePropertiesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (tripBuilder_ == null) {
          trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
        } else {
          tripBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (vehicleBuilder_ == null) {
          vehicle_ = com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
        } else {
          vehicleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (stopTimeUpdateBuilder_ == null) {
          stopTimeUpdate_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          stopTimeUpdateBuilder_.clear();
        }
        timestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        delay_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (tripPropertiesBuilder_ == null) {
          tripProperties_ = com.google.transit.realtime.GtfsRealtime.TripProperties.getDefaultInstance();
        } else {
          tripPropertiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (vehiclePropertiesBuilder_ == null) {
          vehicleProperties_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDefaultInstance();
        } else {
          vehiclePropertiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.TripUpdate getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.TripUpdate.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.TripUpdate build() {
        com.google.transit.realtime.GtfsRealtime.TripUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.TripUpdate buildPartial() {
        com.google.transit.realtime.GtfsRealtime.TripUpdate result = new com.google.transit.realtime.GtfsRealtime.TripUpdate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (tripBuilder_ == null) {
          result.trip_ = trip_;
        } else {
          result.trip_ = tripBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (vehicleBuilder_ == null) {
          result.vehicle_ = vehicle_;
        } else {
          result.vehicle_ = vehicleBuilder_.build();
        }
        if (stopTimeUpdateBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            stopTimeUpdate_ = java.util.Collections.unmodifiableList(stopTimeUpdate_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.stopTimeUpdate_ = stopTimeUpdate_;
        } else {
          result.stopTimeUpdate_ = stopTimeUpdateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timestamp_ = timestamp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.delay_ = delay_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        if (tripPropertiesBuilder_ == null) {
          result.tripProperties_ = tripProperties_;
        } else {
          result.tripProperties_ = tripPropertiesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        if (vehiclePropertiesBuilder_ == null) {
          result.vehicleProperties_ = vehicleProperties_;
        } else {
          result.vehicleProperties_ = vehiclePropertiesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.TripUpdate) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.TripUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.TripUpdate other) {
        if (other == com.google.transit.realtime.GtfsRealtime.TripUpdate.getDefaultInstance()) return this;
        if (other.hasTrip()) {
          mergeTrip(other.getTrip());
        }
        if (other.hasVehicle()) {
          mergeVehicle(other.getVehicle());
        }
        if (stopTimeUpdateBuilder_ == null) {
          if (!other.stopTimeUpdate_.isEmpty()) {
            if (stopTimeUpdate_.isEmpty()) {
              stopTimeUpdate_ = other.stopTimeUpdate_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureStopTimeUpdateIsMutable();
              stopTimeUpdate_.addAll(other.stopTimeUpdate_);
            }
            onChanged();
          }
        } else {
          if (!other.stopTimeUpdate_.isEmpty()) {
            if (stopTimeUpdateBuilder_.isEmpty()) {
              stopTimeUpdateBuilder_.dispose();
              stopTimeUpdateBuilder_ = null;
              stopTimeUpdate_ = other.stopTimeUpdate_;
              bitField0_ = (bitField0_ & ~0x00000004);
              stopTimeUpdateBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStopTimeUpdateFieldBuilder() : null;
            } else {
              stopTimeUpdateBuilder_.addAllMessages(other.stopTimeUpdate_);
            }
          }
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasDelay()) {
          setDelay(other.getDelay());
        }
        if (other.hasTripProperties()) {
          mergeTripProperties(other.getTripProperties());
        }
        if (other.hasVehicleProperties()) {
          mergeVehicleProperties(other.getVehicleProperties());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTrip()) {
          
          return false;
        }
        if (!getTrip().isInitialized()) {
          
          return false;
        }
        if (hasVehicle()) {
          if (!getVehicle().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getStopTimeUpdateCount(); i++) {
          if (!getStopTimeUpdate(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasTripProperties()) {
          if (!getTripProperties().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.TripUpdate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.TripUpdate) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.transit.realtime.GtfsRealtime.TripDescriptor trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder> tripBuilder_;
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      public boolean hasTrip() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip() {
        if (tripBuilder_ == null) {
          return trip_;
        } else {
          return tripBuilder_.getMessage();
        }
      }
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      public Builder setTrip(com.google.transit.realtime.GtfsRealtime.TripDescriptor value) {
        if (tripBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trip_ = value;
          onChanged();
        } else {
          tripBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      public Builder setTrip(
          com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder builderForValue) {
        if (tripBuilder_ == null) {
          trip_ = builderForValue.build();
          onChanged();
        } else {
          tripBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      public Builder mergeTrip(com.google.transit.realtime.GtfsRealtime.TripDescriptor value) {
        if (tripBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              trip_ != com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance()) {
            trip_ =
              com.google.transit.realtime.GtfsRealtime.TripDescriptor.newBuilder(trip_).mergeFrom(value).buildPartial();
          } else {
            trip_ = value;
          }
          onChanged();
        } else {
          tripBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      public Builder clearTrip() {
        if (tripBuilder_ == null) {
          trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
          onChanged();
        } else {
          tripBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder getTripBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTripFieldBuilder().getBuilder();
      }
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder() {
        if (tripBuilder_ != null) {
          return tripBuilder_.getMessageOrBuilder();
        } else {
          return trip_;
        }
      }
      /**
       * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this message applies to. There can be at most one
       * TripUpdate entity for each actual trip instance.
       * If there is none, that means there is no prediction information available.
       * It does *not* mean that the trip is progressing according to schedule.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder> 
          getTripFieldBuilder() {
        if (tripBuilder_ == null) {
          tripBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder>(
                  getTrip(),
                  getParentForChildren(),
                  isClean());
          trip_ = null;
        }
        return tripBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.VehicleDescriptor vehicle_ = com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.VehicleDescriptor, com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder> vehicleBuilder_;
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public boolean hasVehicle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor getVehicle() {
        if (vehicleBuilder_ == null) {
          return vehicle_;
        } else {
          return vehicleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public Builder setVehicle(com.google.transit.realtime.GtfsRealtime.VehicleDescriptor value) {
        if (vehicleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          vehicle_ = value;
          onChanged();
        } else {
          vehicleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public Builder setVehicle(
          com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder builderForValue) {
        if (vehicleBuilder_ == null) {
          vehicle_ = builderForValue.build();
          onChanged();
        } else {
          vehicleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public Builder mergeVehicle(com.google.transit.realtime.GtfsRealtime.VehicleDescriptor value) {
        if (vehicleBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              vehicle_ != com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance()) {
            vehicle_ =
              com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.newBuilder(vehicle_).mergeFrom(value).buildPartial();
          } else {
            vehicle_ = value;
          }
          onChanged();
        } else {
          vehicleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public Builder clearVehicle() {
        if (vehicleBuilder_ == null) {
          vehicle_ = com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
          onChanged();
        } else {
          vehicleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder getVehicleBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getVehicleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
        if (vehicleBuilder_ != null) {
          return vehicleBuilder_.getMessageOrBuilder();
        } else {
          return vehicle_;
        }
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.VehicleDescriptor, com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder> 
          getVehicleFieldBuilder() {
        if (vehicleBuilder_ == null) {
          vehicleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.VehicleDescriptor, com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder>(
                  getVehicle(),
                  getParentForChildren(),
                  isClean());
          vehicle_ = null;
        }
        return vehicleBuilder_;
      }

      private java.util.List<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate> stopTimeUpdate_ =
        java.util.Collections.emptyList();
      private void ensureStopTimeUpdateIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          stopTimeUpdate_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate>(stopTimeUpdate_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder> stopTimeUpdateBuilder_;

      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate> getStopTimeUpdateList() {
        if (stopTimeUpdateBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stopTimeUpdate_);
        } else {
          return stopTimeUpdateBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public int getStopTimeUpdateCount() {
        if (stopTimeUpdateBuilder_ == null) {
          return stopTimeUpdate_.size();
        } else {
          return stopTimeUpdateBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate getStopTimeUpdate(int index) {
        if (stopTimeUpdateBuilder_ == null) {
          return stopTimeUpdate_.get(index);
        } else {
          return stopTimeUpdateBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder setStopTimeUpdate(
          int index, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate value) {
        if (stopTimeUpdateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopTimeUpdateIsMutable();
          stopTimeUpdate_.set(index, value);
          onChanged();
        } else {
          stopTimeUpdateBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder setStopTimeUpdate(
          int index, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder builderForValue) {
        if (stopTimeUpdateBuilder_ == null) {
          ensureStopTimeUpdateIsMutable();
          stopTimeUpdate_.set(index, builderForValue.build());
          onChanged();
        } else {
          stopTimeUpdateBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder addStopTimeUpdate(com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate value) {
        if (stopTimeUpdateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopTimeUpdateIsMutable();
          stopTimeUpdate_.add(value);
          onChanged();
        } else {
          stopTimeUpdateBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder addStopTimeUpdate(
          int index, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate value) {
        if (stopTimeUpdateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStopTimeUpdateIsMutable();
          stopTimeUpdate_.add(index, value);
          onChanged();
        } else {
          stopTimeUpdateBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder addStopTimeUpdate(
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder builderForValue) {
        if (stopTimeUpdateBuilder_ == null) {
          ensureStopTimeUpdateIsMutable();
          stopTimeUpdate_.add(builderForValue.build());
          onChanged();
        } else {
          stopTimeUpdateBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder addStopTimeUpdate(
          int index, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder builderForValue) {
        if (stopTimeUpdateBuilder_ == null) {
          ensureStopTimeUpdateIsMutable();
          stopTimeUpdate_.add(index, builderForValue.build());
          onChanged();
        } else {
          stopTimeUpdateBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder addAllStopTimeUpdate(
          java.lang.Iterable<? extends com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate> values) {
        if (stopTimeUpdateBuilder_ == null) {
          ensureStopTimeUpdateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stopTimeUpdate_);
          onChanged();
        } else {
          stopTimeUpdateBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder clearStopTimeUpdate() {
        if (stopTimeUpdateBuilder_ == null) {
          stopTimeUpdate_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          stopTimeUpdateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public Builder removeStopTimeUpdate(int index) {
        if (stopTimeUpdateBuilder_ == null) {
          ensureStopTimeUpdateIsMutable();
          stopTimeUpdate_.remove(index);
          onChanged();
        } else {
          stopTimeUpdateBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder getStopTimeUpdateBuilder(
          int index) {
        return getStopTimeUpdateFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(
          int index) {
        if (stopTimeUpdateBuilder_ == null) {
          return stopTimeUpdate_.get(index);  } else {
          return stopTimeUpdateBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder> 
           getStopTimeUpdateOrBuilderList() {
        if (stopTimeUpdateBuilder_ != null) {
          return stopTimeUpdateBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stopTimeUpdate_);
        }
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder addStopTimeUpdateBuilder() {
        return getStopTimeUpdateFieldBuilder().addBuilder(
            com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder addStopTimeUpdateBuilder(
          int index) {
        return getStopTimeUpdateFieldBuilder().addBuilder(
            index, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
       *
       * <pre>
       * Updates to StopTimes for the trip (both future, i.e., predictions, and in
       * some cases, past ones, i.e., those that already happened).
       * The updates must be sorted by stop_sequence, and apply for all the
       * following stops of the trip up to the next specified one.
       * Example 1:
       * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
       * delay of 0 for stop_sequence of the current stop means that the trip is
       * exactly on time.
       * Example 2:
       * For the same trip instance, 3 StopTimeUpdates are provided:
       * - delay of 5 min for stop_sequence 3
       * - delay of 1 min for stop_sequence 8
       * - delay of unspecified duration for stop_sequence 10
       * This will be interpreted as:
       * - stop_sequences 3,4,5,6,7 have delay of 5 min.
       * - stop_sequences 8,9 have delay of 1 min.
       * - stop_sequences 10,... have unknown delay.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder> 
           getStopTimeUpdateBuilderList() {
        return getStopTimeUpdateFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder> 
          getStopTimeUpdateFieldBuilder() {
        if (stopTimeUpdateBuilder_ == null) {
          stopTimeUpdateBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdate.Builder, com.google.transit.realtime.GtfsRealtime.TripUpdate.StopTimeUpdateOrBuilder>(
                  stopTimeUpdate_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          stopTimeUpdate_ = null;
        }
        return stopTimeUpdateBuilder_;
      }

      private long timestamp_ ;
      /**
       * <code>optional uint64 timestamp = 4;</code>
       *
       * <pre>
       * Moment at which the vehicle's real-time progress was measured. In POSIX
       * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint64 timestamp = 4;</code>
       *
       * <pre>
       * Moment at which the vehicle's real-time progress was measured. In POSIX
       * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>optional uint64 timestamp = 4;</code>
       *
       * <pre>
       * Moment at which the vehicle's real-time progress was measured. In POSIX
       * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public Builder setTimestamp(long value) {
        bitField0_ |= 0x00000008;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 timestamp = 4;</code>
       *
       * <pre>
       * Moment at which the vehicle's real-time progress was measured. In POSIX
       * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private int delay_ ;
      /**
       * <code>optional int32 delay = 5;</code>
       *
       * <pre>
       * The current schedule deviation for the trip.  Delay should only be
       * specified when the prediction is given relative to some existing schedule
       * in GTFS.
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * Delay information in StopTimeUpdates take precedent of trip-level delay
       * information, such that trip-level delay is only propagated until the next
       * stop along the trip with a StopTimeUpdate delay value specified.
       * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
       * value indicating when the delay value was last updated, in order to
       * evaluate the freshness of the data.
       * NOTE: This field is still experimental, and subject to change. It may be
       * formally adopted in the future.
       * </pre>
       */
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 delay = 5;</code>
       *
       * <pre>
       * The current schedule deviation for the trip.  Delay should only be
       * specified when the prediction is given relative to some existing schedule
       * in GTFS.
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * Delay information in StopTimeUpdates take precedent of trip-level delay
       * information, such that trip-level delay is only propagated until the next
       * stop along the trip with a StopTimeUpdate delay value specified.
       * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
       * value indicating when the delay value was last updated, in order to
       * evaluate the freshness of the data.
       * NOTE: This field is still experimental, and subject to change. It may be
       * formally adopted in the future.
       * </pre>
       */
      public int getDelay() {
        return delay_;
      }
      /**
       * <code>optional int32 delay = 5;</code>
       *
       * <pre>
       * The current schedule deviation for the trip.  Delay should only be
       * specified when the prediction is given relative to some existing schedule
       * in GTFS.
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * Delay information in StopTimeUpdates take precedent of trip-level delay
       * information, such that trip-level delay is only propagated until the next
       * stop along the trip with a StopTimeUpdate delay value specified.
       * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
       * value indicating when the delay value was last updated, in order to
       * evaluate the freshness of the data.
       * NOTE: This field is still experimental, and subject to change. It may be
       * formally adopted in the future.
       * </pre>
       */
      public Builder setDelay(int value) {
        bitField0_ |= 0x00000010;
        delay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 delay = 5;</code>
       *
       * <pre>
       * The current schedule deviation for the trip.  Delay should only be
       * specified when the prediction is given relative to some existing schedule
       * in GTFS.
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * Delay information in StopTimeUpdates take precedent of trip-level delay
       * information, such that trip-level delay is only propagated until the next
       * stop along the trip with a StopTimeUpdate delay value specified.
       * Feed providers are strongly encouraged to provide a TripUpdate.timestamp
       * value indicating when the delay value was last updated, in order to
       * evaluate the freshness of the data.
       * NOTE: This field is still experimental, and subject to change. It may be
       * formally adopted in the future.
       * </pre>
       */
      public Builder clearDelay() {
        bitField0_ = (bitField0_ & ~0x00000010);
        delay_ = 0;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TripProperties tripProperties_ = com.google.transit.realtime.GtfsRealtime.TripProperties.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripProperties, com.google.transit.realtime.GtfsRealtime.TripProperties.Builder, com.google.transit.realtime.GtfsRealtime.TripPropertiesOrBuilder> tripPropertiesBuilder_;
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      public boolean hasTripProperties() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripProperties getTripProperties() {
        if (tripPropertiesBuilder_ == null) {
          return tripProperties_;
        } else {
          return tripPropertiesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      public Builder setTripProperties(com.google.transit.realtime.GtfsRealtime.TripProperties value) {
        if (tripPropertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tripProperties_ = value;
          onChanged();
        } else {
          tripPropertiesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      public Builder setTripProperties(
          com.google.transit.realtime.GtfsRealtime.TripProperties.Builder builderForValue) {
        if (tripPropertiesBuilder_ == null) {
          tripProperties_ = builderForValue.build();
          onChanged();
        } else {
          tripPropertiesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      public Builder mergeTripProperties(com.google.transit.realtime.GtfsRealtime.TripProperties value) {
        if (tripPropertiesBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              tripProperties_ != com.google.transit.realtime.GtfsRealtime.TripProperties.getDefaultInstance()) {
            tripProperties_ =
              com.google.transit.realtime.GtfsRealtime.TripProperties.newBuilder(tripProperties_).mergeFrom(value).buildPartial();
          } else {
            tripProperties_ = value;
          }
          onChanged();
        } else {
          tripPropertiesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      public Builder clearTripProperties() {
        if (tripPropertiesBuilder_ == null) {
          tripProperties_ = com.google.transit.realtime.GtfsRealtime.TripProperties.getDefaultInstance();
          onChanged();
        } else {
          tripPropertiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripProperties.Builder getTripPropertiesBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getTripPropertiesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripPropertiesOrBuilder getTripPropertiesOrBuilder() {
        if (tripPropertiesBuilder_ != null) {
          return tripPropertiesBuilder_.getMessageOrBuilder();
        } else {
          return tripProperties_;
        }
      }
      /**
       * <code>optional .transit_realtime.TripProperties trip_properties = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripProperties, com.google.transit.realtime.GtfsRealtime.TripProperties.Builder, com.google.transit.realtime.GtfsRealtime.TripPropertiesOrBuilder> 
          getTripPropertiesFieldBuilder() {
        if (tripPropertiesBuilder_ == null) {
          tripPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TripProperties, com.google.transit.realtime.GtfsRealtime.TripProperties.Builder, com.google.transit.realtime.GtfsRealtime.TripPropertiesOrBuilder>(
                  getTripProperties(),
                  getParentForChildren(),
                  isClean());
          tripProperties_ = null;
        }
        return tripPropertiesBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.VehicleProperties vehicleProperties_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.VehicleProperties, com.google.transit.realtime.GtfsRealtime.VehicleProperties.Builder, com.google.transit.realtime.GtfsRealtime.VehiclePropertiesOrBuilder> vehiclePropertiesBuilder_;
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      public boolean hasVehicleProperties() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleProperties getVehicleProperties() {
        if (vehiclePropertiesBuilder_ == null) {
          return vehicleProperties_;
        } else {
          return vehiclePropertiesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      public Builder setVehicleProperties(com.google.transit.realtime.GtfsRealtime.VehicleProperties value) {
        if (vehiclePropertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          vehicleProperties_ = value;
          onChanged();
        } else {
          vehiclePropertiesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      public Builder setVehicleProperties(
          com.google.transit.realtime.GtfsRealtime.VehicleProperties.Builder builderForValue) {
        if (vehiclePropertiesBuilder_ == null) {
          vehicleProperties_ = builderForValue.build();
          onChanged();
        } else {
          vehiclePropertiesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      public Builder mergeVehicleProperties(com.google.transit.realtime.GtfsRealtime.VehicleProperties value) {
        if (vehiclePropertiesBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              vehicleProperties_ != com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDefaultInstance()) {
            vehicleProperties_ =
              com.google.transit.realtime.GtfsRealtime.VehicleProperties.newBuilder(vehicleProperties_).mergeFrom(value).buildPartial();
          } else {
            vehicleProperties_ = value;
          }
          onChanged();
        } else {
          vehiclePropertiesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      public Builder clearVehicleProperties() {
        if (vehiclePropertiesBuilder_ == null) {
          vehicleProperties_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDefaultInstance();
          onChanged();
        } else {
          vehiclePropertiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleProperties.Builder getVehiclePropertiesBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getVehiclePropertiesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.VehiclePropertiesOrBuilder getVehiclePropertiesOrBuilder() {
        if (vehiclePropertiesBuilder_ != null) {
          return vehiclePropertiesBuilder_.getMessageOrBuilder();
        } else {
          return vehicleProperties_;
        }
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties vehicle_properties = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.VehicleProperties, com.google.transit.realtime.GtfsRealtime.VehicleProperties.Builder, com.google.transit.realtime.GtfsRealtime.VehiclePropertiesOrBuilder> 
          getVehiclePropertiesFieldBuilder() {
        if (vehiclePropertiesBuilder_ == null) {
          vehiclePropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.VehicleProperties, com.google.transit.realtime.GtfsRealtime.VehicleProperties.Builder, com.google.transit.realtime.GtfsRealtime.VehiclePropertiesOrBuilder>(
                  getVehicleProperties(),
                  getParentForChildren(),
                  isClean());
          vehicleProperties_ = null;
        }
        return vehiclePropertiesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate)
    }

    static {
      defaultInstance = new TripUpdate(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate)
  }

  public interface VehiclePositionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.VehiclePosition)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<VehiclePosition> {

    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     */
    boolean hasTrip();
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip();
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder();

    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    boolean hasVehicle();
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.VehicleDescriptor getVehicle();
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder getVehicleOrBuilder();

    /**
     * <code>optional .transit_realtime.Position position = 2;</code>
     *
     * <pre>
     * Current position of this vehicle.
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>optional .transit_realtime.Position position = 2;</code>
     *
     * <pre>
     * Current position of this vehicle.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.Position getPosition();
    /**
     * <code>optional .transit_realtime.Position position = 2;</code>
     *
     * <pre>
     * Current position of this vehicle.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.PositionOrBuilder getPositionOrBuilder();

    /**
     * <code>optional uint32 current_stop_sequence = 3;</code>
     *
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     */
    boolean hasCurrentStopSequence();
    /**
     * <code>optional uint32 current_stop_sequence = 3;</code>
     *
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     */
    int getCurrentStopSequence();

    /**
     * <code>optional string stop_id = 7;</code>
     *
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     */
    boolean hasStopId();
    /**
     * <code>optional string stop_id = 7;</code>
     *
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     */
    java.lang.String getStopId();
    /**
     * <code>optional string stop_id = 7;</code>
     *
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStopIdBytes();

    /**
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
     *
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     */
    boolean hasCurrentStatus();
    /**
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
     *
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus getCurrentStatus();

    /**
     * <code>optional uint64 timestamp = 5;</code>
     *
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    boolean hasTimestamp();
    /**
     * <code>optional uint64 timestamp = 5;</code>
     *
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    long getTimestamp();

    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     */
    boolean hasCongestionLevel();
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     */
    com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel getCongestionLevel();

    /**
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     */
    boolean hasOccupancyStatus();
    /**
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     */
    com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus getOccupancyStatus();
  }
  /**
   * Protobuf type {@code transit_realtime.VehiclePosition}
   *
   * <pre>
   * Realtime positioning information for a given vehicle.
   * </pre>
   */
  public static final class VehiclePosition extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        VehiclePosition> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.VehiclePosition)
      VehiclePositionOrBuilder {
    // Use VehiclePosition.newBuilder() to construct.
    private VehiclePosition(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.VehiclePosition, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VehiclePosition(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VehiclePosition defaultInstance;
    public static VehiclePosition getDefaultInstance() {
      return defaultInstance;
    }

    public VehiclePosition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VehiclePosition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = trip_.toBuilder();
              }
              trip_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TripDescriptor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(trip_);
                trip_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.google.transit.realtime.GtfsRealtime.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000008;
              currentStopSequence_ = input.readUInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus value = com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                currentStatus_ = value;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000040;
              timestamp_ = input.readUInt64();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel value = com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                congestionLevel_ = value;
              }
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              stopId_ = bs;
              break;
            }
            case 66: {
              com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = vehicle_.toBuilder();
              }
              vehicle_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(vehicle_);
                vehicle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus value = com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000100;
                occupancyStatus_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.VehiclePosition.class, com.google.transit.realtime.GtfsRealtime.VehiclePosition.Builder.class);
    }

    public static com.google.protobuf.Parser<VehiclePosition> PARSER =
        new com.google.protobuf.AbstractParser<VehiclePosition>() {
      public VehiclePosition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VehiclePosition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VehiclePosition> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.VehiclePosition.VehicleStopStatus}
     */
    public enum VehicleStopStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>INCOMING_AT = 0;</code>
       *
       * <pre>
       * The vehicle is just about to arrive at the stop (on a stop
       * display, the vehicle symbol typically flashes).
       * </pre>
       */
      INCOMING_AT(0, 0),
      /**
       * <code>STOPPED_AT = 1;</code>
       *
       * <pre>
       * The vehicle is standing at the stop.
       * </pre>
       */
      STOPPED_AT(1, 1),
      /**
       * <code>IN_TRANSIT_TO = 2;</code>
       *
       * <pre>
       * The vehicle has departed and is in transit to the next stop.
       * </pre>
       */
      IN_TRANSIT_TO(2, 2),
      ;

      /**
       * <code>INCOMING_AT = 0;</code>
       *
       * <pre>
       * The vehicle is just about to arrive at the stop (on a stop
       * display, the vehicle symbol typically flashes).
       * </pre>
       */
      public static final int INCOMING_AT_VALUE = 0;
      /**
       * <code>STOPPED_AT = 1;</code>
       *
       * <pre>
       * The vehicle is standing at the stop.
       * </pre>
       */
      public static final int STOPPED_AT_VALUE = 1;
      /**
       * <code>IN_TRANSIT_TO = 2;</code>
       *
       * <pre>
       * The vehicle has departed and is in transit to the next stop.
       * </pre>
       */
      public static final int IN_TRANSIT_TO_VALUE = 2;


      public final int getNumber() { return value; }

      public static VehicleStopStatus valueOf(int value) {
        switch (value) {
          case 0: return INCOMING_AT;
          case 1: return STOPPED_AT;
          case 2: return IN_TRANSIT_TO;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<VehicleStopStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<VehicleStopStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<VehicleStopStatus>() {
              public VehicleStopStatus findValueByNumber(int number) {
                return VehicleStopStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDescriptor().getEnumTypes().get(0);
      }

      private static final VehicleStopStatus[] VALUES = values();

      public static VehicleStopStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private VehicleStopStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.VehiclePosition.VehicleStopStatus)
    }

    /**
     * Protobuf enum {@code transit_realtime.VehiclePosition.CongestionLevel}
     *
     * <pre>
     * Congestion level that is affecting this vehicle.
     * </pre>
     */
    public enum CongestionLevel
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_CONGESTION_LEVEL = 0;</code>
       */
      UNKNOWN_CONGESTION_LEVEL(0, 0),
      /**
       * <code>RUNNING_SMOOTHLY = 1;</code>
       */
      RUNNING_SMOOTHLY(1, 1),
      /**
       * <code>STOP_AND_GO = 2;</code>
       */
      STOP_AND_GO(2, 2),
      /**
       * <code>CONGESTION = 3;</code>
       */
      CONGESTION(3, 3),
      /**
       * <code>SEVERE_CONGESTION = 4;</code>
       *
       * <pre>
       * People leaving their cars.
       * </pre>
       */
      SEVERE_CONGESTION(4, 4),
      ;

      /**
       * <code>UNKNOWN_CONGESTION_LEVEL = 0;</code>
       */
      public static final int UNKNOWN_CONGESTION_LEVEL_VALUE = 0;
      /**
       * <code>RUNNING_SMOOTHLY = 1;</code>
       */
      public static final int RUNNING_SMOOTHLY_VALUE = 1;
      /**
       * <code>STOP_AND_GO = 2;</code>
       */
      public static final int STOP_AND_GO_VALUE = 2;
      /**
       * <code>CONGESTION = 3;</code>
       */
      public static final int CONGESTION_VALUE = 3;
      /**
       * <code>SEVERE_CONGESTION = 4;</code>
       *
       * <pre>
       * People leaving their cars.
       * </pre>
       */
      public static final int SEVERE_CONGESTION_VALUE = 4;


      public final int getNumber() { return value; }

      public static CongestionLevel valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_CONGESTION_LEVEL;
          case 1: return RUNNING_SMOOTHLY;
          case 2: return STOP_AND_GO;
          case 3: return CONGESTION;
          case 4: return SEVERE_CONGESTION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CongestionLevel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CongestionLevel>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CongestionLevel>() {
              public CongestionLevel findValueByNumber(int number) {
                return CongestionLevel.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDescriptor().getEnumTypes().get(1);
      }

      private static final CongestionLevel[] VALUES = values();

      public static CongestionLevel valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private CongestionLevel(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.VehiclePosition.CongestionLevel)
    }

    /**
     * Protobuf enum {@code transit_realtime.VehiclePosition.OccupancyStatus}
     *
     * <pre>
     * The degree of passenger occupancy of the vehicle. This field is still
     * experimental, and subject to change. It may be formally adopted in the
     * future.
     * </pre>
     */
    public enum OccupancyStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>EMPTY = 0;</code>
       *
       * <pre>
       * The vehicle is considered empty by most measures, and has few or no
       * passengers onboard, but is still accepting passengers.
       * </pre>
       */
      EMPTY(0, 0),
      /**
       * <code>MANY_SEATS_AVAILABLE = 1;</code>
       *
       * <pre>
       * The vehicle has a relatively large percentage of seats available.
       * What percentage of free seats out of the total seats available is to be
       * considered large enough to fall into this category is determined at the
       * discretion of the producer.
       * </pre>
       */
      MANY_SEATS_AVAILABLE(1, 1),
      /**
       * <code>FEW_SEATS_AVAILABLE = 2;</code>
       *
       * <pre>
       * The vehicle has a relatively small percentage of seats available.
       * What percentage of free seats out of the total seats available is to be
       * considered small enough to fall into this category is determined at the
       * discretion of the feed producer.
       * </pre>
       */
      FEW_SEATS_AVAILABLE(2, 2),
      /**
       * <code>STANDING_ROOM_ONLY = 3;</code>
       *
       * <pre>
       * The vehicle can currently accommodate only standing passengers.
       * </pre>
       */
      STANDING_ROOM_ONLY(3, 3),
      /**
       * <code>CRUSHED_STANDING_ROOM_ONLY = 4;</code>
       *
       * <pre>
       * The vehicle can currently accommodate only standing passengers
       * and has limited space for them.
       * </pre>
       */
      CRUSHED_STANDING_ROOM_ONLY(4, 4),
      /**
       * <code>FULL = 5;</code>
       *
       * <pre>
       * The vehicle is considered full by most measures, but may still be
       * allowing passengers to board.
       * </pre>
       */
      FULL(5, 5),
      /**
       * <code>NOT_ACCEPTING_PASSENGERS = 6;</code>
       *
       * <pre>
       * The vehicle is not accepting additional passengers.
       * </pre>
       */
      NOT_ACCEPTING_PASSENGERS(6, 6),
      ;

      /**
       * <code>EMPTY = 0;</code>
       *
       * <pre>
       * The vehicle is considered empty by most measures, and has few or no
       * passengers onboard, but is still accepting passengers.
       * </pre>
       */
      public static final int EMPTY_VALUE = 0;
      /**
       * <code>MANY_SEATS_AVAILABLE = 1;</code>
       *
       * <pre>
       * The vehicle has a relatively large percentage of seats available.
       * What percentage of free seats out of the total seats available is to be
       * considered large enough to fall into this category is determined at the
       * discretion of the producer.
       * </pre>
       */
      public static final int MANY_SEATS_AVAILABLE_VALUE = 1;
      /**
       * <code>FEW_SEATS_AVAILABLE = 2;</code>
       *
       * <pre>
       * The vehicle has a relatively small percentage of seats available.
       * What percentage of free seats out of the total seats available is to be
       * considered small enough to fall into this category is determined at the
       * discretion of the feed producer.
       * </pre>
       */
      public static final int FEW_SEATS_AVAILABLE_VALUE = 2;
      /**
       * <code>STANDING_ROOM_ONLY = 3;</code>
       *
       * <pre>
       * The vehicle can currently accommodate only standing passengers.
       * </pre>
       */
      public static final int STANDING_ROOM_ONLY_VALUE = 3;
      /**
       * <code>CRUSHED_STANDING_ROOM_ONLY = 4;</code>
       *
       * <pre>
       * The vehicle can currently accommodate only standing passengers
       * and has limited space for them.
       * </pre>
       */
      public static final int CRUSHED_STANDING_ROOM_ONLY_VALUE = 4;
      /**
       * <code>FULL = 5;</code>
       *
       * <pre>
       * The vehicle is considered full by most measures, but may still be
       * allowing passengers to board.
       * </pre>
       */
      public static final int FULL_VALUE = 5;
      /**
       * <code>NOT_ACCEPTING_PASSENGERS = 6;</code>
       *
       * <pre>
       * The vehicle is not accepting additional passengers.
       * </pre>
       */
      public static final int NOT_ACCEPTING_PASSENGERS_VALUE = 6;


      public final int getNumber() { return value; }

      public static OccupancyStatus valueOf(int value) {
        switch (value) {
          case 0: return EMPTY;
          case 1: return MANY_SEATS_AVAILABLE;
          case 2: return FEW_SEATS_AVAILABLE;
          case 3: return STANDING_ROOM_ONLY;
          case 4: return CRUSHED_STANDING_ROOM_ONLY;
          case 5: return FULL;
          case 6: return NOT_ACCEPTING_PASSENGERS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OccupancyStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OccupancyStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OccupancyStatus>() {
              public OccupancyStatus findValueByNumber(int number) {
                return OccupancyStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDescriptor().getEnumTypes().get(2);
      }

      private static final OccupancyStatus[] VALUES = values();

      public static OccupancyStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OccupancyStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.VehiclePosition.OccupancyStatus)
    }

    private int bitField0_;
    public static final int TRIP_FIELD_NUMBER = 1;
    private com.google.transit.realtime.GtfsRealtime.TripDescriptor trip_;
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     */
    public boolean hasTrip() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip() {
      return trip_;
    }
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     *
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder() {
      return trip_;
    }

    public static final int VEHICLE_FIELD_NUMBER = 8;
    private com.google.transit.realtime.GtfsRealtime.VehicleDescriptor vehicle_;
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    public boolean hasVehicle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor getVehicle() {
      return vehicle_;
    }
    /**
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     *
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
      return vehicle_;
    }

    public static final int POSITION_FIELD_NUMBER = 2;
    private com.google.transit.realtime.GtfsRealtime.Position position_;
    /**
     * <code>optional .transit_realtime.Position position = 2;</code>
     *
     * <pre>
     * Current position of this vehicle.
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .transit_realtime.Position position = 2;</code>
     *
     * <pre>
     * Current position of this vehicle.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.Position getPosition() {
      return position_;
    }
    /**
     * <code>optional .transit_realtime.Position position = 2;</code>
     *
     * <pre>
     * Current position of this vehicle.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.PositionOrBuilder getPositionOrBuilder() {
      return position_;
    }

    public static final int CURRENT_STOP_SEQUENCE_FIELD_NUMBER = 3;
    private int currentStopSequence_;
    /**
     * <code>optional uint32 current_stop_sequence = 3;</code>
     *
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     */
    public boolean hasCurrentStopSequence() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 current_stop_sequence = 3;</code>
     *
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     */
    public int getCurrentStopSequence() {
      return currentStopSequence_;
    }

    public static final int STOP_ID_FIELD_NUMBER = 7;
    private java.lang.Object stopId_;
    /**
     * <code>optional string stop_id = 7;</code>
     *
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     */
    public boolean hasStopId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string stop_id = 7;</code>
     *
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     */
    public java.lang.String getStopId() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string stop_id = 7;</code>
     *
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStopIdBytes() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CURRENT_STATUS_FIELD_NUMBER = 4;
    private com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus currentStatus_;
    /**
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
     *
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     */
    public boolean hasCurrentStatus() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
     *
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus getCurrentStatus() {
      return currentStatus_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 5;
    private long timestamp_;
    /**
     * <code>optional uint64 timestamp = 5;</code>
     *
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint64 timestamp = 5;</code>
     *
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int CONGESTION_LEVEL_FIELD_NUMBER = 6;
    private com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel congestionLevel_;
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     */
    public boolean hasCongestionLevel() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel getCongestionLevel() {
      return congestionLevel_;
    }

    public static final int OCCUPANCY_STATUS_FIELD_NUMBER = 9;
    private com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus occupancyStatus_;
    /**
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     */
    public boolean hasOccupancyStatus() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus getOccupancyStatus() {
      return occupancyStatus_;
    }

    private void initFields() {
      trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
      vehicle_ = com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
      position_ = com.google.transit.realtime.GtfsRealtime.Position.getDefaultInstance();
      currentStopSequence_ = 0;
      stopId_ = "";
      currentStatus_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO;
      timestamp_ = 0L;
      congestionLevel_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL;
      occupancyStatus_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasTrip()) {
        if (!getTrip().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasVehicle()) {
        if (!getVehicle().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPosition()) {
        if (!getPosition().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.VehiclePosition>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, trip_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(2, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(3, currentStopSequence_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(4, currentStatus_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt64(5, timestamp_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(6, congestionLevel_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(7, getStopIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(8, vehicle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(9, occupancyStatus_.getNumber());
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, trip_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, currentStopSequence_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, currentStatus_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, timestamp_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, congestionLevel_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getStopIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, vehicle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, occupancyStatus_.getNumber());
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehiclePosition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.VehiclePosition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.VehiclePosition}
     *
     * <pre>
     * Realtime positioning information for a given vehicle.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.VehiclePosition, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.VehiclePosition)
        com.google.transit.realtime.GtfsRealtime.VehiclePositionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.VehiclePosition.class, com.google.transit.realtime.GtfsRealtime.VehiclePosition.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.VehiclePosition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTripFieldBuilder();
          getVehicleFieldBuilder();
          getPositionFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (tripBuilder_ == null) {
          trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
        } else {
          tripBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (vehicleBuilder_ == null) {
          vehicle_ = com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
        } else {
          vehicleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (positionBuilder_ == null) {
          position_ = com.google.transit.realtime.GtfsRealtime.Position.getDefaultInstance();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        currentStopSequence_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        stopId_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        currentStatus_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO;
        bitField0_ = (bitField0_ & ~0x00000020);
        timestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        congestionLevel_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL;
        bitField0_ = (bitField0_ & ~0x00000080);
        occupancyStatus_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.VehiclePosition getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.VehiclePosition build() {
        com.google.transit.realtime.GtfsRealtime.VehiclePosition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.VehiclePosition buildPartial() {
        com.google.transit.realtime.GtfsRealtime.VehiclePosition result = new com.google.transit.realtime.GtfsRealtime.VehiclePosition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (tripBuilder_ == null) {
          result.trip_ = trip_;
        } else {
          result.trip_ = tripBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (vehicleBuilder_ == null) {
          result.vehicle_ = vehicle_;
        } else {
          result.vehicle_ = vehicleBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (positionBuilder_ == null) {
          result.position_ = position_;
        } else {
          result.position_ = positionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.currentStopSequence_ = currentStopSequence_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.stopId_ = stopId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.currentStatus_ = currentStatus_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.timestamp_ = timestamp_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.congestionLevel_ = congestionLevel_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.occupancyStatus_ = occupancyStatus_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.VehiclePosition) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.VehiclePosition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.VehiclePosition other) {
        if (other == com.google.transit.realtime.GtfsRealtime.VehiclePosition.getDefaultInstance()) return this;
        if (other.hasTrip()) {
          mergeTrip(other.getTrip());
        }
        if (other.hasVehicle()) {
          mergeVehicle(other.getVehicle());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasCurrentStopSequence()) {
          setCurrentStopSequence(other.getCurrentStopSequence());
        }
        if (other.hasStopId()) {
          bitField0_ |= 0x00000010;
          stopId_ = other.stopId_;
          onChanged();
        }
        if (other.hasCurrentStatus()) {
          setCurrentStatus(other.getCurrentStatus());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasCongestionLevel()) {
          setCongestionLevel(other.getCongestionLevel());
        }
        if (other.hasOccupancyStatus()) {
          setOccupancyStatus(other.getOccupancyStatus());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasTrip()) {
          if (!getTrip().isInitialized()) {
            
            return false;
          }
        }
        if (hasVehicle()) {
          if (!getVehicle().isInitialized()) {
            
            return false;
          }
        }
        if (hasPosition()) {
          if (!getPosition().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.VehiclePosition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.VehiclePosition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.transit.realtime.GtfsRealtime.TripDescriptor trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder> tripBuilder_;
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      public boolean hasTrip() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip() {
        if (tripBuilder_ == null) {
          return trip_;
        } else {
          return tripBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      public Builder setTrip(com.google.transit.realtime.GtfsRealtime.TripDescriptor value) {
        if (tripBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trip_ = value;
          onChanged();
        } else {
          tripBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      public Builder setTrip(
          com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder builderForValue) {
        if (tripBuilder_ == null) {
          trip_ = builderForValue.build();
          onChanged();
        } else {
          tripBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      public Builder mergeTrip(com.google.transit.realtime.GtfsRealtime.TripDescriptor value) {
        if (tripBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              trip_ != com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance()) {
            trip_ =
              com.google.transit.realtime.GtfsRealtime.TripDescriptor.newBuilder(trip_).mergeFrom(value).buildPartial();
          } else {
            trip_ = value;
          }
          onChanged();
        } else {
          tripBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      public Builder clearTrip() {
        if (tripBuilder_ == null) {
          trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
          onChanged();
        } else {
          tripBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder getTripBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTripFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder() {
        if (tripBuilder_ != null) {
          return tripBuilder_.getMessageOrBuilder();
        } else {
          return trip_;
        }
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
       *
       * <pre>
       * The Trip that this vehicle is serving.
       * Can be empty or partial if the vehicle can not be identified with a given
       * trip instance.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder> 
          getTripFieldBuilder() {
        if (tripBuilder_ == null) {
          tripBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder>(
                  getTrip(),
                  getParentForChildren(),
                  isClean());
          trip_ = null;
        }
        return tripBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.VehicleDescriptor vehicle_ = com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.VehicleDescriptor, com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder> vehicleBuilder_;
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public boolean hasVehicle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor getVehicle() {
        if (vehicleBuilder_ == null) {
          return vehicle_;
        } else {
          return vehicleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public Builder setVehicle(com.google.transit.realtime.GtfsRealtime.VehicleDescriptor value) {
        if (vehicleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          vehicle_ = value;
          onChanged();
        } else {
          vehicleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public Builder setVehicle(
          com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder builderForValue) {
        if (vehicleBuilder_ == null) {
          vehicle_ = builderForValue.build();
          onChanged();
        } else {
          vehicleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public Builder mergeVehicle(com.google.transit.realtime.GtfsRealtime.VehicleDescriptor value) {
        if (vehicleBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              vehicle_ != com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance()) {
            vehicle_ =
              com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.newBuilder(vehicle_).mergeFrom(value).buildPartial();
          } else {
            vehicle_ = value;
          }
          onChanged();
        } else {
          vehicleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public Builder clearVehicle() {
        if (vehicleBuilder_ == null) {
          vehicle_ = com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
          onChanged();
        } else {
          vehicleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder getVehicleBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getVehicleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
        if (vehicleBuilder_ != null) {
          return vehicleBuilder_.getMessageOrBuilder();
        } else {
          return vehicle_;
        }
      }
      /**
       * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
       *
       * <pre>
       * Additional information on the vehicle that is serving this trip.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.VehicleDescriptor, com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder> 
          getVehicleFieldBuilder() {
        if (vehicleBuilder_ == null) {
          vehicleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.VehicleDescriptor, com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder>(
                  getVehicle(),
                  getParentForChildren(),
                  isClean());
          vehicle_ = null;
        }
        return vehicleBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Position position_ = com.google.transit.realtime.GtfsRealtime.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Position, com.google.transit.realtime.GtfsRealtime.Position.Builder, com.google.transit.realtime.GtfsRealtime.PositionOrBuilder> positionBuilder_;
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.Position getPosition() {
        if (positionBuilder_ == null) {
          return position_;
        } else {
          return positionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      public Builder setPosition(com.google.transit.realtime.GtfsRealtime.Position value) {
        if (positionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          position_ = value;
          onChanged();
        } else {
          positionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      public Builder setPosition(
          com.google.transit.realtime.GtfsRealtime.Position.Builder builderForValue) {
        if (positionBuilder_ == null) {
          position_ = builderForValue.build();
          onChanged();
        } else {
          positionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      public Builder mergePosition(com.google.transit.realtime.GtfsRealtime.Position value) {
        if (positionBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              position_ != com.google.transit.realtime.GtfsRealtime.Position.getDefaultInstance()) {
            position_ =
              com.google.transit.realtime.GtfsRealtime.Position.newBuilder(position_).mergeFrom(value).buildPartial();
          } else {
            position_ = value;
          }
          onChanged();
        } else {
          positionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      public Builder clearPosition() {
        if (positionBuilder_ == null) {
          position_ = com.google.transit.realtime.GtfsRealtime.Position.getDefaultInstance();
          onChanged();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.Position.Builder getPositionBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.PositionOrBuilder getPositionOrBuilder() {
        if (positionBuilder_ != null) {
          return positionBuilder_.getMessageOrBuilder();
        } else {
          return position_;
        }
      }
      /**
       * <code>optional .transit_realtime.Position position = 2;</code>
       *
       * <pre>
       * Current position of this vehicle.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.Position, com.google.transit.realtime.GtfsRealtime.Position.Builder, com.google.transit.realtime.GtfsRealtime.PositionOrBuilder> 
          getPositionFieldBuilder() {
        if (positionBuilder_ == null) {
          positionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.Position, com.google.transit.realtime.GtfsRealtime.Position.Builder, com.google.transit.realtime.GtfsRealtime.PositionOrBuilder>(
                  getPosition(),
                  getParentForChildren(),
                  isClean());
          position_ = null;
        }
        return positionBuilder_;
      }

      private int currentStopSequence_ ;
      /**
       * <code>optional uint32 current_stop_sequence = 3;</code>
       *
       * <pre>
       * The stop sequence index of the current stop. The meaning of
       * current_stop_sequence (i.e., the stop that it refers to) is determined by
       * current_status.
       * If current_status is missing IN_TRANSIT_TO is assumed.
       * </pre>
       */
      public boolean hasCurrentStopSequence() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 current_stop_sequence = 3;</code>
       *
       * <pre>
       * The stop sequence index of the current stop. The meaning of
       * current_stop_sequence (i.e., the stop that it refers to) is determined by
       * current_status.
       * If current_status is missing IN_TRANSIT_TO is assumed.
       * </pre>
       */
      public int getCurrentStopSequence() {
        return currentStopSequence_;
      }
      /**
       * <code>optional uint32 current_stop_sequence = 3;</code>
       *
       * <pre>
       * The stop sequence index of the current stop. The meaning of
       * current_stop_sequence (i.e., the stop that it refers to) is determined by
       * current_status.
       * If current_status is missing IN_TRANSIT_TO is assumed.
       * </pre>
       */
      public Builder setCurrentStopSequence(int value) {
        bitField0_ |= 0x00000008;
        currentStopSequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 current_stop_sequence = 3;</code>
       *
       * <pre>
       * The stop sequence index of the current stop. The meaning of
       * current_stop_sequence (i.e., the stop that it refers to) is determined by
       * current_status.
       * If current_status is missing IN_TRANSIT_TO is assumed.
       * </pre>
       */
      public Builder clearCurrentStopSequence() {
        bitField0_ = (bitField0_ & ~0x00000008);
        currentStopSequence_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object stopId_ = "";
      /**
       * <code>optional string stop_id = 7;</code>
       *
       * <pre>
       * Identifies the current stop. The value must be the same as in stops.txt in
       * the corresponding GTFS feed.
       * </pre>
       */
      public boolean hasStopId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string stop_id = 7;</code>
       *
       * <pre>
       * Identifies the current stop. The value must be the same as in stops.txt in
       * the corresponding GTFS feed.
       * </pre>
       */
      public java.lang.String getStopId() {
        java.lang.Object ref = stopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string stop_id = 7;</code>
       *
       * <pre>
       * Identifies the current stop. The value must be the same as in stops.txt in
       * the corresponding GTFS feed.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStopIdBytes() {
        java.lang.Object ref = stopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string stop_id = 7;</code>
       *
       * <pre>
       * Identifies the current stop. The value must be the same as in stops.txt in
       * the corresponding GTFS feed.
       * </pre>
       */
      public Builder setStopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        stopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string stop_id = 7;</code>
       *
       * <pre>
       * Identifies the current stop. The value must be the same as in stops.txt in
       * the corresponding GTFS feed.
       * </pre>
       */
      public Builder clearStopId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        stopId_ = getDefaultInstance().getStopId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string stop_id = 7;</code>
       *
       * <pre>
       * Identifies the current stop. The value must be the same as in stops.txt in
       * the corresponding GTFS feed.
       * </pre>
       */
      public Builder setStopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        stopId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus currentStatus_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO;
      /**
       * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
       *
       * <pre>
       * The exact status of the vehicle with respect to the current stop.
       * Ignored if current_stop_sequence is missing.
       * </pre>
       */
      public boolean hasCurrentStatus() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
       *
       * <pre>
       * The exact status of the vehicle with respect to the current stop.
       * Ignored if current_stop_sequence is missing.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus getCurrentStatus() {
        return currentStatus_;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
       *
       * <pre>
       * The exact status of the vehicle with respect to the current stop.
       * Ignored if current_stop_sequence is missing.
       * </pre>
       */
      public Builder setCurrentStatus(com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        currentStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
       *
       * <pre>
       * The exact status of the vehicle with respect to the current stop.
       * Ignored if current_stop_sequence is missing.
       * </pre>
       */
      public Builder clearCurrentStatus() {
        bitField0_ = (bitField0_ & ~0x00000020);
        currentStatus_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <code>optional uint64 timestamp = 5;</code>
       *
       * <pre>
       * Moment at which the vehicle's position was measured. In POSIX time
       * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint64 timestamp = 5;</code>
       *
       * <pre>
       * Moment at which the vehicle's position was measured. In POSIX time
       * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>optional uint64 timestamp = 5;</code>
       *
       * <pre>
       * Moment at which the vehicle's position was measured. In POSIX time
       * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public Builder setTimestamp(long value) {
        bitField0_ |= 0x00000040;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 timestamp = 5;</code>
       *
       * <pre>
       * Moment at which the vehicle's position was measured. In POSIX time
       * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
       * </pre>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000040);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel congestionLevel_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL;
      /**
       * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
       */
      public boolean hasCongestionLevel() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel getCongestionLevel() {
        return congestionLevel_;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
       */
      public Builder setCongestionLevel(com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        congestionLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
       */
      public Builder clearCongestionLevel() {
        bitField0_ = (bitField0_ & ~0x00000080);
        congestionLevel_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus occupancyStatus_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus.EMPTY;
      /**
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
       */
      public boolean hasOccupancyStatus() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus getOccupancyStatus() {
        return occupancyStatus_;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
       */
      public Builder setOccupancyStatus(com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        occupancyStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
       */
      public Builder clearOccupancyStatus() {
        bitField0_ = (bitField0_ & ~0x00000100);
        occupancyStatus_ = com.google.transit.realtime.GtfsRealtime.VehiclePosition.OccupancyStatus.EMPTY;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.VehiclePosition)
    }

    static {
      defaultInstance = new VehiclePosition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.VehiclePosition)
  }

  public interface AlertOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.Alert)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Alert> {

    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    java.util.List<com.google.transit.realtime.GtfsRealtime.TimeRange> 
        getActivePeriodList();
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TimeRange getActivePeriod(int index);
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    int getActivePeriodCount();
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder> 
        getActivePeriodOrBuilderList();
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder getActivePeriodOrBuilder(
        int index);

    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    java.util.List<com.google.transit.realtime.GtfsRealtime.EntitySelector> 
        getInformedEntityList();
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.EntitySelector getInformedEntity(int index);
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    int getInformedEntityCount();
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    java.util.List<? extends com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder> 
        getInformedEntityOrBuilderList();
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder getInformedEntityOrBuilder(
        int index);

    /**
     * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
     */
    boolean hasCause();
    /**
     * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
     */
    com.google.transit.realtime.GtfsRealtime.Alert.Cause getCause();

    /**
     * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
     */
    boolean hasEffect();
    /**
     * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
     */
    com.google.transit.realtime.GtfsRealtime.Alert.Effect getEffect();

    /**
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     *
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     */
    boolean hasUrl();
    /**
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     *
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getUrl();
    /**
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     *
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getUrlOrBuilder();

    /**
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     *
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     */
    boolean hasHeaderText();
    /**
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     *
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getHeaderText();
    /**
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     *
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getHeaderTextOrBuilder();

    /**
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     *
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     */
    boolean hasDescriptionText();
    /**
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     *
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getDescriptionText();
    /**
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     *
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getDescriptionTextOrBuilder();

    /**
     * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
     *
     * <pre>
     * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    boolean hasTtsHeaderText();
    /**
     * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
     *
     * <pre>
     * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getTtsHeaderText();
    /**
     * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
     *
     * <pre>
     * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTtsHeaderTextOrBuilder();

    /**
     * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
     *
     * <pre>
     * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    boolean hasTtsDescriptionText();
    /**
     * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
     *
     * <pre>
     * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getTtsDescriptionText();
    /**
     * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
     *
     * <pre>
     * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTtsDescriptionTextOrBuilder();

    /**
     * <code>optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];</code>
     */
    boolean hasSeverityLevel();
    /**
     * <code>optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];</code>
     */
    com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel getSeverityLevel();
  }
  /**
   * Protobuf type {@code transit_realtime.Alert}
   *
   * <pre>
   * An alert, indicating some sort of incident in the public transit network.
   * </pre>
   */
  public static final class Alert extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        Alert> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.Alert)
      AlertOrBuilder {
    // Use Alert.newBuilder() to construct.
    private Alert(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.Alert, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Alert(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Alert defaultInstance;
    public static Alert getDefaultInstance() {
      return defaultInstance;
    }

    public Alert getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Alert(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                activePeriod_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.TimeRange>();
                mutable_bitField0_ |= 0x00000001;
              }
              activePeriod_.add(input.readMessage(com.google.transit.realtime.GtfsRealtime.TimeRange.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                informedEntity_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.EntitySelector>();
                mutable_bitField0_ |= 0x00000002;
              }
              informedEntity_.add(input.readMessage(com.google.transit.realtime.GtfsRealtime.EntitySelector.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.Alert.Cause value = com.google.transit.realtime.GtfsRealtime.Alert.Cause.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                cause_ = value;
              }
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.Alert.Effect value = com.google.transit.realtime.GtfsRealtime.Alert.Effect.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                effect_ = value;
              }
              break;
            }
            case 66: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = url_.toBuilder();
              }
              url_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(url_);
                url_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 82: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = headerText_.toBuilder();
              }
              headerText_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(headerText_);
                headerText_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 90: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = descriptionText_.toBuilder();
              }
              descriptionText_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(descriptionText_);
                descriptionText_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 98: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = ttsHeaderText_.toBuilder();
              }
              ttsHeaderText_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ttsHeaderText_);
                ttsHeaderText_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 106: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = ttsDescriptionText_.toBuilder();
              }
              ttsDescriptionText_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ttsDescriptionText_);
                ttsDescriptionText_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 112: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel value = com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(14, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                severityLevel_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          activePeriod_ = java.util.Collections.unmodifiableList(activePeriod_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          informedEntity_ = java.util.Collections.unmodifiableList(informedEntity_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Alert_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Alert_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.Alert.class, com.google.transit.realtime.GtfsRealtime.Alert.Builder.class);
    }

    public static com.google.protobuf.Parser<Alert> PARSER =
        new com.google.protobuf.AbstractParser<Alert>() {
      public Alert parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Alert(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Alert> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.Alert.Cause}
     *
     * <pre>
     * Cause of this alert.
     * </pre>
     */
    public enum Cause
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_CAUSE = 1;</code>
       */
      UNKNOWN_CAUSE(0, 1),
      /**
       * <code>OTHER_CAUSE = 2;</code>
       *
       * <pre>
       * Not machine-representable.
       * </pre>
       */
      OTHER_CAUSE(1, 2),
      /**
       * <code>TECHNICAL_PROBLEM = 3;</code>
       */
      TECHNICAL_PROBLEM(2, 3),
      /**
       * <code>STRIKE = 4;</code>
       *
       * <pre>
       * Public transit agency employees stopped working.
       * </pre>
       */
      STRIKE(3, 4),
      /**
       * <code>DEMONSTRATION = 5;</code>
       *
       * <pre>
       * People are blocking the streets.
       * </pre>
       */
      DEMONSTRATION(4, 5),
      /**
       * <code>ACCIDENT = 6;</code>
       */
      ACCIDENT(5, 6),
      /**
       * <code>HOLIDAY = 7;</code>
       */
      HOLIDAY(6, 7),
      /**
       * <code>WEATHER = 8;</code>
       */
      WEATHER(7, 8),
      /**
       * <code>MAINTENANCE = 9;</code>
       */
      MAINTENANCE(8, 9),
      /**
       * <code>CONSTRUCTION = 10;</code>
       */
      CONSTRUCTION(9, 10),
      /**
       * <code>POLICE_ACTIVITY = 11;</code>
       */
      POLICE_ACTIVITY(10, 11),
      /**
       * <code>MEDICAL_EMERGENCY = 12;</code>
       */
      MEDICAL_EMERGENCY(11, 12),
      ;

      /**
       * <code>UNKNOWN_CAUSE = 1;</code>
       */
      public static final int UNKNOWN_CAUSE_VALUE = 1;
      /**
       * <code>OTHER_CAUSE = 2;</code>
       *
       * <pre>
       * Not machine-representable.
       * </pre>
       */
      public static final int OTHER_CAUSE_VALUE = 2;
      /**
       * <code>TECHNICAL_PROBLEM = 3;</code>
       */
      public static final int TECHNICAL_PROBLEM_VALUE = 3;
      /**
       * <code>STRIKE = 4;</code>
       *
       * <pre>
       * Public transit agency employees stopped working.
       * </pre>
       */
      public static final int STRIKE_VALUE = 4;
      /**
       * <code>DEMONSTRATION = 5;</code>
       *
       * <pre>
       * People are blocking the streets.
       * </pre>
       */
      public static final int DEMONSTRATION_VALUE = 5;
      /**
       * <code>ACCIDENT = 6;</code>
       */
      public static final int ACCIDENT_VALUE = 6;
      /**
       * <code>HOLIDAY = 7;</code>
       */
      public static final int HOLIDAY_VALUE = 7;
      /**
       * <code>WEATHER = 8;</code>
       */
      public static final int WEATHER_VALUE = 8;
      /**
       * <code>MAINTENANCE = 9;</code>
       */
      public static final int MAINTENANCE_VALUE = 9;
      /**
       * <code>CONSTRUCTION = 10;</code>
       */
      public static final int CONSTRUCTION_VALUE = 10;
      /**
       * <code>POLICE_ACTIVITY = 11;</code>
       */
      public static final int POLICE_ACTIVITY_VALUE = 11;
      /**
       * <code>MEDICAL_EMERGENCY = 12;</code>
       */
      public static final int MEDICAL_EMERGENCY_VALUE = 12;


      public final int getNumber() { return value; }

      public static Cause valueOf(int value) {
        switch (value) {
          case 1: return UNKNOWN_CAUSE;
          case 2: return OTHER_CAUSE;
          case 3: return TECHNICAL_PROBLEM;
          case 4: return STRIKE;
          case 5: return DEMONSTRATION;
          case 6: return ACCIDENT;
          case 7: return HOLIDAY;
          case 8: return WEATHER;
          case 9: return MAINTENANCE;
          case 10: return CONSTRUCTION;
          case 11: return POLICE_ACTIVITY;
          case 12: return MEDICAL_EMERGENCY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Cause>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Cause>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Cause>() {
              public Cause findValueByNumber(int number) {
                return Cause.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.Alert.getDescriptor().getEnumTypes().get(0);
      }

      private static final Cause[] VALUES = values();

      public static Cause valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Cause(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.Alert.Cause)
    }

    /**
     * Protobuf enum {@code transit_realtime.Alert.Effect}
     *
     * <pre>
     * What is the effect of this problem on the affected entity.
     * </pre>
     */
    public enum Effect
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NO_SERVICE = 1;</code>
       */
      NO_SERVICE(0, 1),
      /**
       * <code>REDUCED_SERVICE = 2;</code>
       */
      REDUCED_SERVICE(1, 2),
      /**
       * <code>SIGNIFICANT_DELAYS = 3;</code>
       *
       * <pre>
       * We don't care about INsignificant delays: they are hard to detect, have
       * little impact on the user, and would clutter the results as they are too
       * frequent.
       * </pre>
       */
      SIGNIFICANT_DELAYS(2, 3),
      /**
       * <code>DETOUR = 4;</code>
       */
      DETOUR(3, 4),
      /**
       * <code>ADDITIONAL_SERVICE = 5;</code>
       */
      ADDITIONAL_SERVICE(4, 5),
      /**
       * <code>MODIFIED_SERVICE = 6;</code>
       */
      MODIFIED_SERVICE(5, 6),
      /**
       * <code>OTHER_EFFECT = 7;</code>
       */
      OTHER_EFFECT(6, 7),
      /**
       * <code>UNKNOWN_EFFECT = 8;</code>
       */
      UNKNOWN_EFFECT(7, 8),
      /**
       * <code>STOP_MOVED = 9;</code>
       */
      STOP_MOVED(8, 9),
      /**
       * <code>NO_EFFECT = 10;</code>
       */
      NO_EFFECT(9, 10),
      /**
       * <code>ACCESSIBILITY_ISSUE = 11;</code>
       */
      ACCESSIBILITY_ISSUE(10, 11),
      ;

      /**
       * <code>NO_SERVICE = 1;</code>
       */
      public static final int NO_SERVICE_VALUE = 1;
      /**
       * <code>REDUCED_SERVICE = 2;</code>
       */
      public static final int REDUCED_SERVICE_VALUE = 2;
      /**
       * <code>SIGNIFICANT_DELAYS = 3;</code>
       *
       * <pre>
       * We don't care about INsignificant delays: they are hard to detect, have
       * little impact on the user, and would clutter the results as they are too
       * frequent.
       * </pre>
       */
      public static final int SIGNIFICANT_DELAYS_VALUE = 3;
      /**
       * <code>DETOUR = 4;</code>
       */
      public static final int DETOUR_VALUE = 4;
      /**
       * <code>ADDITIONAL_SERVICE = 5;</code>
       */
      public static final int ADDITIONAL_SERVICE_VALUE = 5;
      /**
       * <code>MODIFIED_SERVICE = 6;</code>
       */
      public static final int MODIFIED_SERVICE_VALUE = 6;
      /**
       * <code>OTHER_EFFECT = 7;</code>
       */
      public static final int OTHER_EFFECT_VALUE = 7;
      /**
       * <code>UNKNOWN_EFFECT = 8;</code>
       */
      public static final int UNKNOWN_EFFECT_VALUE = 8;
      /**
       * <code>STOP_MOVED = 9;</code>
       */
      public static final int STOP_MOVED_VALUE = 9;
      /**
       * <code>NO_EFFECT = 10;</code>
       */
      public static final int NO_EFFECT_VALUE = 10;
      /**
       * <code>ACCESSIBILITY_ISSUE = 11;</code>
       */
      public static final int ACCESSIBILITY_ISSUE_VALUE = 11;


      public final int getNumber() { return value; }

      public static Effect valueOf(int value) {
        switch (value) {
          case 1: return NO_SERVICE;
          case 2: return REDUCED_SERVICE;
          case 3: return SIGNIFICANT_DELAYS;
          case 4: return DETOUR;
          case 5: return ADDITIONAL_SERVICE;
          case 6: return MODIFIED_SERVICE;
          case 7: return OTHER_EFFECT;
          case 8: return UNKNOWN_EFFECT;
          case 9: return STOP_MOVED;
          case 10: return NO_EFFECT;
          case 11: return ACCESSIBILITY_ISSUE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Effect>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Effect>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Effect>() {
              public Effect findValueByNumber(int number) {
                return Effect.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.Alert.getDescriptor().getEnumTypes().get(1);
      }

      private static final Effect[] VALUES = values();

      public static Effect valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Effect(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.Alert.Effect)
    }

    /**
     * Protobuf enum {@code transit_realtime.Alert.SeverityLevel}
     *
     * <pre>
     * Severity of this alert.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public enum SeverityLevel
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_SEVERITY = 1;</code>
       */
      UNKNOWN_SEVERITY(0, 1),
      /**
       * <code>INFO = 2;</code>
       */
      INFO(1, 2),
      /**
       * <code>WARNING = 3;</code>
       */
      WARNING(2, 3),
      /**
       * <code>SEVERE = 4;</code>
       */
      SEVERE(3, 4),
      ;

      /**
       * <code>UNKNOWN_SEVERITY = 1;</code>
       */
      public static final int UNKNOWN_SEVERITY_VALUE = 1;
      /**
       * <code>INFO = 2;</code>
       */
      public static final int INFO_VALUE = 2;
      /**
       * <code>WARNING = 3;</code>
       */
      public static final int WARNING_VALUE = 3;
      /**
       * <code>SEVERE = 4;</code>
       */
      public static final int SEVERE_VALUE = 4;


      public final int getNumber() { return value; }

      public static SeverityLevel valueOf(int value) {
        switch (value) {
          case 1: return UNKNOWN_SEVERITY;
          case 2: return INFO;
          case 3: return WARNING;
          case 4: return SEVERE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SeverityLevel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SeverityLevel>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SeverityLevel>() {
              public SeverityLevel findValueByNumber(int number) {
                return SeverityLevel.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.Alert.getDescriptor().getEnumTypes().get(2);
      }

      private static final SeverityLevel[] VALUES = values();

      public static SeverityLevel valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SeverityLevel(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.Alert.SeverityLevel)
    }

    private int bitField0_;
    public static final int ACTIVE_PERIOD_FIELD_NUMBER = 1;
    private java.util.List<com.google.transit.realtime.GtfsRealtime.TimeRange> activePeriod_;
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    public java.util.List<com.google.transit.realtime.GtfsRealtime.TimeRange> getActivePeriodList() {
      return activePeriod_;
    }
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder> 
        getActivePeriodOrBuilderList() {
      return activePeriod_;
    }
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    public int getActivePeriodCount() {
      return activePeriod_.size();
    }
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TimeRange getActivePeriod(int index) {
      return activePeriod_.get(index);
    }
    /**
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     *
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder getActivePeriodOrBuilder(
        int index) {
      return activePeriod_.get(index);
    }

    public static final int INFORMED_ENTITY_FIELD_NUMBER = 5;
    private java.util.List<com.google.transit.realtime.GtfsRealtime.EntitySelector> informedEntity_;
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    public java.util.List<com.google.transit.realtime.GtfsRealtime.EntitySelector> getInformedEntityList() {
      return informedEntity_;
    }
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder> 
        getInformedEntityOrBuilderList() {
      return informedEntity_;
    }
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    public int getInformedEntityCount() {
      return informedEntity_.size();
    }
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.EntitySelector getInformedEntity(int index) {
      return informedEntity_.get(index);
    }
    /**
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     *
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder getInformedEntityOrBuilder(
        int index) {
      return informedEntity_.get(index);
    }

    public static final int CAUSE_FIELD_NUMBER = 6;
    private com.google.transit.realtime.GtfsRealtime.Alert.Cause cause_;
    /**
     * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
     */
    public boolean hasCause() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
     */
    public com.google.transit.realtime.GtfsRealtime.Alert.Cause getCause() {
      return cause_;
    }

    public static final int EFFECT_FIELD_NUMBER = 7;
    private com.google.transit.realtime.GtfsRealtime.Alert.Effect effect_;
    /**
     * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
     */
    public boolean hasEffect() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
     */
    public com.google.transit.realtime.GtfsRealtime.Alert.Effect getEffect() {
      return effect_;
    }

    public static final int URL_FIELD_NUMBER = 8;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString url_;
    /**
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     *
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     */
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     *
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getUrl() {
      return url_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     *
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getUrlOrBuilder() {
      return url_;
    }

    public static final int HEADER_TEXT_FIELD_NUMBER = 10;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString headerText_;
    /**
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     *
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     */
    public boolean hasHeaderText() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     *
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getHeaderText() {
      return headerText_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     *
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getHeaderTextOrBuilder() {
      return headerText_;
    }

    public static final int DESCRIPTION_TEXT_FIELD_NUMBER = 11;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString descriptionText_;
    /**
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     *
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     */
    public boolean hasDescriptionText() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     *
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getDescriptionText() {
      return descriptionText_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     *
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getDescriptionTextOrBuilder() {
      return descriptionText_;
    }

    public static final int TTS_HEADER_TEXT_FIELD_NUMBER = 12;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString ttsHeaderText_;
    /**
     * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
     *
     * <pre>
     * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public boolean hasTtsHeaderText() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
     *
     * <pre>
     * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getTtsHeaderText() {
      return ttsHeaderText_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
     *
     * <pre>
     * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTtsHeaderTextOrBuilder() {
      return ttsHeaderText_;
    }

    public static final int TTS_DESCRIPTION_TEXT_FIELD_NUMBER = 13;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString ttsDescriptionText_;
    /**
     * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
     *
     * <pre>
     * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public boolean hasTtsDescriptionText() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
     *
     * <pre>
     * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getTtsDescriptionText() {
      return ttsDescriptionText_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
     *
     * <pre>
     * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
     * This field is still experimental, and subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTtsDescriptionTextOrBuilder() {
      return ttsDescriptionText_;
    }

    public static final int SEVERITY_LEVEL_FIELD_NUMBER = 14;
    private com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel severityLevel_;
    /**
     * <code>optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];</code>
     */
    public boolean hasSeverityLevel() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];</code>
     */
    public com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel getSeverityLevel() {
      return severityLevel_;
    }

    private void initFields() {
      activePeriod_ = java.util.Collections.emptyList();
      informedEntity_ = java.util.Collections.emptyList();
      cause_ = com.google.transit.realtime.GtfsRealtime.Alert.Cause.UNKNOWN_CAUSE;
      effect_ = com.google.transit.realtime.GtfsRealtime.Alert.Effect.UNKNOWN_EFFECT;
      url_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      headerText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      descriptionText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      ttsHeaderText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      ttsDescriptionText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      severityLevel_ = com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel.UNKNOWN_SEVERITY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getActivePeriodCount(); i++) {
        if (!getActivePeriod(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getInformedEntityCount(); i++) {
        if (!getInformedEntity(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUrl()) {
        if (!getUrl().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasHeaderText()) {
        if (!getHeaderText().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDescriptionText()) {
        if (!getDescriptionText().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTtsHeaderText()) {
        if (!getTtsHeaderText().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTtsDescriptionText()) {
        if (!getTtsDescriptionText().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.Alert>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      for (int i = 0; i < activePeriod_.size(); i++) {
        output.writeMessage(1, activePeriod_.get(i));
      }
      for (int i = 0; i < informedEntity_.size(); i++) {
        output.writeMessage(5, informedEntity_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(6, cause_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(7, effect_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(8, url_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(10, headerText_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(11, descriptionText_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(12, ttsHeaderText_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(13, ttsDescriptionText_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(14, severityLevel_.getNumber());
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < activePeriod_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, activePeriod_.get(i));
      }
      for (int i = 0; i < informedEntity_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, informedEntity_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, cause_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, effect_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, url_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, headerText_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, descriptionText_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, ttsHeaderText_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, ttsDescriptionText_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, severityLevel_.getNumber());
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.Alert parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Alert parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.Alert prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.Alert}
     *
     * <pre>
     * An alert, indicating some sort of incident in the public transit network.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.Alert, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.Alert)
        com.google.transit.realtime.GtfsRealtime.AlertOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Alert_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Alert_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.Alert.class, com.google.transit.realtime.GtfsRealtime.Alert.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.Alert.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getActivePeriodFieldBuilder();
          getInformedEntityFieldBuilder();
          getUrlFieldBuilder();
          getHeaderTextFieldBuilder();
          getDescriptionTextFieldBuilder();
          getTtsHeaderTextFieldBuilder();
          getTtsDescriptionTextFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (activePeriodBuilder_ == null) {
          activePeriod_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          activePeriodBuilder_.clear();
        }
        if (informedEntityBuilder_ == null) {
          informedEntity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          informedEntityBuilder_.clear();
        }
        cause_ = com.google.transit.realtime.GtfsRealtime.Alert.Cause.UNKNOWN_CAUSE;
        bitField0_ = (bitField0_ & ~0x00000004);
        effect_ = com.google.transit.realtime.GtfsRealtime.Alert.Effect.UNKNOWN_EFFECT;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (urlBuilder_ == null) {
          url_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          urlBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (headerTextBuilder_ == null) {
          headerText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          headerTextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (descriptionTextBuilder_ == null) {
          descriptionText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          descriptionTextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (ttsHeaderTextBuilder_ == null) {
          ttsHeaderText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          ttsHeaderTextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (ttsDescriptionTextBuilder_ == null) {
          ttsDescriptionText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          ttsDescriptionTextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        severityLevel_ = com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel.UNKNOWN_SEVERITY;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Alert_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.Alert getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.Alert.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.Alert build() {
        com.google.transit.realtime.GtfsRealtime.Alert result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.Alert buildPartial() {
        com.google.transit.realtime.GtfsRealtime.Alert result = new com.google.transit.realtime.GtfsRealtime.Alert(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (activePeriodBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            activePeriod_ = java.util.Collections.unmodifiableList(activePeriod_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.activePeriod_ = activePeriod_;
        } else {
          result.activePeriod_ = activePeriodBuilder_.build();
        }
        if (informedEntityBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            informedEntity_ = java.util.Collections.unmodifiableList(informedEntity_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.informedEntity_ = informedEntity_;
        } else {
          result.informedEntity_ = informedEntityBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cause_ = cause_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.effect_ = effect_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        if (urlBuilder_ == null) {
          result.url_ = url_;
        } else {
          result.url_ = urlBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        if (headerTextBuilder_ == null) {
          result.headerText_ = headerText_;
        } else {
          result.headerText_ = headerTextBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        if (descriptionTextBuilder_ == null) {
          result.descriptionText_ = descriptionText_;
        } else {
          result.descriptionText_ = descriptionTextBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        if (ttsHeaderTextBuilder_ == null) {
          result.ttsHeaderText_ = ttsHeaderText_;
        } else {
          result.ttsHeaderText_ = ttsHeaderTextBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        if (ttsDescriptionTextBuilder_ == null) {
          result.ttsDescriptionText_ = ttsDescriptionText_;
        } else {
          result.ttsDescriptionText_ = ttsDescriptionTextBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.severityLevel_ = severityLevel_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.Alert) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.Alert)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.Alert other) {
        if (other == com.google.transit.realtime.GtfsRealtime.Alert.getDefaultInstance()) return this;
        if (activePeriodBuilder_ == null) {
          if (!other.activePeriod_.isEmpty()) {
            if (activePeriod_.isEmpty()) {
              activePeriod_ = other.activePeriod_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureActivePeriodIsMutable();
              activePeriod_.addAll(other.activePeriod_);
            }
            onChanged();
          }
        } else {
          if (!other.activePeriod_.isEmpty()) {
            if (activePeriodBuilder_.isEmpty()) {
              activePeriodBuilder_.dispose();
              activePeriodBuilder_ = null;
              activePeriod_ = other.activePeriod_;
              bitField0_ = (bitField0_ & ~0x00000001);
              activePeriodBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getActivePeriodFieldBuilder() : null;
            } else {
              activePeriodBuilder_.addAllMessages(other.activePeriod_);
            }
          }
        }
        if (informedEntityBuilder_ == null) {
          if (!other.informedEntity_.isEmpty()) {
            if (informedEntity_.isEmpty()) {
              informedEntity_ = other.informedEntity_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureInformedEntityIsMutable();
              informedEntity_.addAll(other.informedEntity_);
            }
            onChanged();
          }
        } else {
          if (!other.informedEntity_.isEmpty()) {
            if (informedEntityBuilder_.isEmpty()) {
              informedEntityBuilder_.dispose();
              informedEntityBuilder_ = null;
              informedEntity_ = other.informedEntity_;
              bitField0_ = (bitField0_ & ~0x00000002);
              informedEntityBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInformedEntityFieldBuilder() : null;
            } else {
              informedEntityBuilder_.addAllMessages(other.informedEntity_);
            }
          }
        }
        if (other.hasCause()) {
          setCause(other.getCause());
        }
        if (other.hasEffect()) {
          setEffect(other.getEffect());
        }
        if (other.hasUrl()) {
          mergeUrl(other.getUrl());
        }
        if (other.hasHeaderText()) {
          mergeHeaderText(other.getHeaderText());
        }
        if (other.hasDescriptionText()) {
          mergeDescriptionText(other.getDescriptionText());
        }
        if (other.hasTtsHeaderText()) {
          mergeTtsHeaderText(other.getTtsHeaderText());
        }
        if (other.hasTtsDescriptionText()) {
          mergeTtsDescriptionText(other.getTtsDescriptionText());
        }
        if (other.hasSeverityLevel()) {
          setSeverityLevel(other.getSeverityLevel());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getActivePeriodCount(); i++) {
          if (!getActivePeriod(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getInformedEntityCount(); i++) {
          if (!getInformedEntity(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasUrl()) {
          if (!getUrl().isInitialized()) {
            
            return false;
          }
        }
        if (hasHeaderText()) {
          if (!getHeaderText().isInitialized()) {
            
            return false;
          }
        }
        if (hasDescriptionText()) {
          if (!getDescriptionText().isInitialized()) {
            
            return false;
          }
        }
        if (hasTtsHeaderText()) {
          if (!getTtsHeaderText().isInitialized()) {
            
            return false;
          }
        }
        if (hasTtsDescriptionText()) {
          if (!getTtsDescriptionText().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.Alert parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.Alert) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.transit.realtime.GtfsRealtime.TimeRange> activePeriod_ =
        java.util.Collections.emptyList();
      private void ensureActivePeriodIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          activePeriod_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.TimeRange>(activePeriod_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TimeRange, com.google.transit.realtime.GtfsRealtime.TimeRange.Builder, com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder> activePeriodBuilder_;

      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.TimeRange> getActivePeriodList() {
        if (activePeriodBuilder_ == null) {
          return java.util.Collections.unmodifiableList(activePeriod_);
        } else {
          return activePeriodBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public int getActivePeriodCount() {
        if (activePeriodBuilder_ == null) {
          return activePeriod_.size();
        } else {
          return activePeriodBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TimeRange getActivePeriod(int index) {
        if (activePeriodBuilder_ == null) {
          return activePeriod_.get(index);
        } else {
          return activePeriodBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder setActivePeriod(
          int index, com.google.transit.realtime.GtfsRealtime.TimeRange value) {
        if (activePeriodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActivePeriodIsMutable();
          activePeriod_.set(index, value);
          onChanged();
        } else {
          activePeriodBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder setActivePeriod(
          int index, com.google.transit.realtime.GtfsRealtime.TimeRange.Builder builderForValue) {
        if (activePeriodBuilder_ == null) {
          ensureActivePeriodIsMutable();
          activePeriod_.set(index, builderForValue.build());
          onChanged();
        } else {
          activePeriodBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder addActivePeriod(com.google.transit.realtime.GtfsRealtime.TimeRange value) {
        if (activePeriodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActivePeriodIsMutable();
          activePeriod_.add(value);
          onChanged();
        } else {
          activePeriodBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder addActivePeriod(
          int index, com.google.transit.realtime.GtfsRealtime.TimeRange value) {
        if (activePeriodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActivePeriodIsMutable();
          activePeriod_.add(index, value);
          onChanged();
        } else {
          activePeriodBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder addActivePeriod(
          com.google.transit.realtime.GtfsRealtime.TimeRange.Builder builderForValue) {
        if (activePeriodBuilder_ == null) {
          ensureActivePeriodIsMutable();
          activePeriod_.add(builderForValue.build());
          onChanged();
        } else {
          activePeriodBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder addActivePeriod(
          int index, com.google.transit.realtime.GtfsRealtime.TimeRange.Builder builderForValue) {
        if (activePeriodBuilder_ == null) {
          ensureActivePeriodIsMutable();
          activePeriod_.add(index, builderForValue.build());
          onChanged();
        } else {
          activePeriodBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder addAllActivePeriod(
          java.lang.Iterable<? extends com.google.transit.realtime.GtfsRealtime.TimeRange> values) {
        if (activePeriodBuilder_ == null) {
          ensureActivePeriodIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, activePeriod_);
          onChanged();
        } else {
          activePeriodBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder clearActivePeriod() {
        if (activePeriodBuilder_ == null) {
          activePeriod_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          activePeriodBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public Builder removeActivePeriod(int index) {
        if (activePeriodBuilder_ == null) {
          ensureActivePeriodIsMutable();
          activePeriod_.remove(index);
          onChanged();
        } else {
          activePeriodBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TimeRange.Builder getActivePeriodBuilder(
          int index) {
        return getActivePeriodFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder getActivePeriodOrBuilder(
          int index) {
        if (activePeriodBuilder_ == null) {
          return activePeriod_.get(index);  } else {
          return activePeriodBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder> 
           getActivePeriodOrBuilderList() {
        if (activePeriodBuilder_ != null) {
          return activePeriodBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(activePeriod_);
        }
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TimeRange.Builder addActivePeriodBuilder() {
        return getActivePeriodFieldBuilder().addBuilder(
            com.google.transit.realtime.GtfsRealtime.TimeRange.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TimeRange.Builder addActivePeriodBuilder(
          int index) {
        return getActivePeriodFieldBuilder().addBuilder(
            index, com.google.transit.realtime.GtfsRealtime.TimeRange.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
       *
       * <pre>
       * Time when the alert should be shown to the user. If missing, the
       * alert will be shown as long as it appears in the feed.
       * If multiple ranges are given, the alert will be shown during all of them.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.TimeRange.Builder> 
           getActivePeriodBuilderList() {
        return getActivePeriodFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TimeRange, com.google.transit.realtime.GtfsRealtime.TimeRange.Builder, com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder> 
          getActivePeriodFieldBuilder() {
        if (activePeriodBuilder_ == null) {
          activePeriodBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TimeRange, com.google.transit.realtime.GtfsRealtime.TimeRange.Builder, com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder>(
                  activePeriod_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          activePeriod_ = null;
        }
        return activePeriodBuilder_;
      }

      private java.util.List<com.google.transit.realtime.GtfsRealtime.EntitySelector> informedEntity_ =
        java.util.Collections.emptyList();
      private void ensureInformedEntityIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          informedEntity_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.EntitySelector>(informedEntity_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.EntitySelector, com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder, com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder> informedEntityBuilder_;

      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.EntitySelector> getInformedEntityList() {
        if (informedEntityBuilder_ == null) {
          return java.util.Collections.unmodifiableList(informedEntity_);
        } else {
          return informedEntityBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public int getInformedEntityCount() {
        if (informedEntityBuilder_ == null) {
          return informedEntity_.size();
        } else {
          return informedEntityBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.EntitySelector getInformedEntity(int index) {
        if (informedEntityBuilder_ == null) {
          return informedEntity_.get(index);
        } else {
          return informedEntityBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder setInformedEntity(
          int index, com.google.transit.realtime.GtfsRealtime.EntitySelector value) {
        if (informedEntityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInformedEntityIsMutable();
          informedEntity_.set(index, value);
          onChanged();
        } else {
          informedEntityBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder setInformedEntity(
          int index, com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder builderForValue) {
        if (informedEntityBuilder_ == null) {
          ensureInformedEntityIsMutable();
          informedEntity_.set(index, builderForValue.build());
          onChanged();
        } else {
          informedEntityBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder addInformedEntity(com.google.transit.realtime.GtfsRealtime.EntitySelector value) {
        if (informedEntityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInformedEntityIsMutable();
          informedEntity_.add(value);
          onChanged();
        } else {
          informedEntityBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder addInformedEntity(
          int index, com.google.transit.realtime.GtfsRealtime.EntitySelector value) {
        if (informedEntityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInformedEntityIsMutable();
          informedEntity_.add(index, value);
          onChanged();
        } else {
          informedEntityBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder addInformedEntity(
          com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder builderForValue) {
        if (informedEntityBuilder_ == null) {
          ensureInformedEntityIsMutable();
          informedEntity_.add(builderForValue.build());
          onChanged();
        } else {
          informedEntityBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder addInformedEntity(
          int index, com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder builderForValue) {
        if (informedEntityBuilder_ == null) {
          ensureInformedEntityIsMutable();
          informedEntity_.add(index, builderForValue.build());
          onChanged();
        } else {
          informedEntityBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder addAllInformedEntity(
          java.lang.Iterable<? extends com.google.transit.realtime.GtfsRealtime.EntitySelector> values) {
        if (informedEntityBuilder_ == null) {
          ensureInformedEntityIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, informedEntity_);
          onChanged();
        } else {
          informedEntityBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder clearInformedEntity() {
        if (informedEntityBuilder_ == null) {
          informedEntity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          informedEntityBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public Builder removeInformedEntity(int index) {
        if (informedEntityBuilder_ == null) {
          ensureInformedEntityIsMutable();
          informedEntity_.remove(index);
          onChanged();
        } else {
          informedEntityBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder getInformedEntityBuilder(
          int index) {
        return getInformedEntityFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder getInformedEntityOrBuilder(
          int index) {
        if (informedEntityBuilder_ == null) {
          return informedEntity_.get(index);  } else {
          return informedEntityBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder> 
           getInformedEntityOrBuilderList() {
        if (informedEntityBuilder_ != null) {
          return informedEntityBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(informedEntity_);
        }
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder addInformedEntityBuilder() {
        return getInformedEntityFieldBuilder().addBuilder(
            com.google.transit.realtime.GtfsRealtime.EntitySelector.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder addInformedEntityBuilder(
          int index) {
        return getInformedEntityFieldBuilder().addBuilder(
            index, com.google.transit.realtime.GtfsRealtime.EntitySelector.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
       *
       * <pre>
       * Entities whose users we should notify of this alert.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder> 
           getInformedEntityBuilderList() {
        return getInformedEntityFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.EntitySelector, com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder, com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder> 
          getInformedEntityFieldBuilder() {
        if (informedEntityBuilder_ == null) {
          informedEntityBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.EntitySelector, com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder, com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder>(
                  informedEntity_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          informedEntity_ = null;
        }
        return informedEntityBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Alert.Cause cause_ = com.google.transit.realtime.GtfsRealtime.Alert.Cause.UNKNOWN_CAUSE;
      /**
       * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
       */
      public boolean hasCause() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Alert.Cause getCause() {
        return cause_;
      }
      /**
       * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
       */
      public Builder setCause(com.google.transit.realtime.GtfsRealtime.Alert.Cause value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        cause_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
       */
      public Builder clearCause() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cause_ = com.google.transit.realtime.GtfsRealtime.Alert.Cause.UNKNOWN_CAUSE;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.Alert.Effect effect_ = com.google.transit.realtime.GtfsRealtime.Alert.Effect.UNKNOWN_EFFECT;
      /**
       * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
       */
      public boolean hasEffect() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Alert.Effect getEffect() {
        return effect_;
      }
      /**
       * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
       */
      public Builder setEffect(com.google.transit.realtime.GtfsRealtime.Alert.Effect value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        effect_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
       */
      public Builder clearEffect() {
        bitField0_ = (bitField0_ & ~0x00000008);
        effect_ = com.google.transit.realtime.GtfsRealtime.Alert.Effect.UNKNOWN_EFFECT;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString url_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> urlBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getUrl() {
        if (urlBuilder_ == null) {
          return url_;
        } else {
          return urlBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      public Builder setUrl(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (urlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          url_ = value;
          onChanged();
        } else {
          urlBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      public Builder setUrl(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (urlBuilder_ == null) {
          url_ = builderForValue.build();
          onChanged();
        } else {
          urlBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      public Builder mergeUrl(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (urlBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              url_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            url_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(url_).mergeFrom(value).buildPartial();
          } else {
            url_ = value;
          }
          onChanged();
        } else {
          urlBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      public Builder clearUrl() {
        if (urlBuilder_ == null) {
          url_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          urlBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getUrlBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getUrlFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getUrlOrBuilder() {
        if (urlBuilder_ != null) {
          return urlBuilder_.getMessageOrBuilder();
        } else {
          return url_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString url = 8;</code>
       *
       * <pre>
       * The URL which provides additional information about the alert.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getUrlFieldBuilder() {
        if (urlBuilder_ == null) {
          urlBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getUrl(),
                  getParentForChildren(),
                  isClean());
          url_ = null;
        }
        return urlBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString headerText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> headerTextBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      public boolean hasHeaderText() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getHeaderText() {
        if (headerTextBuilder_ == null) {
          return headerText_;
        } else {
          return headerTextBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      public Builder setHeaderText(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (headerTextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          headerText_ = value;
          onChanged();
        } else {
          headerTextBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      public Builder setHeaderText(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (headerTextBuilder_ == null) {
          headerText_ = builderForValue.build();
          onChanged();
        } else {
          headerTextBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      public Builder mergeHeaderText(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (headerTextBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              headerText_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            headerText_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(headerText_).mergeFrom(value).buildPartial();
          } else {
            headerText_ = value;
          }
          onChanged();
        } else {
          headerTextBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      public Builder clearHeaderText() {
        if (headerTextBuilder_ == null) {
          headerText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          headerTextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getHeaderTextBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getHeaderTextFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getHeaderTextOrBuilder() {
        if (headerTextBuilder_ != null) {
          return headerTextBuilder_.getMessageOrBuilder();
        } else {
          return headerText_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
       *
       * <pre>
       * Alert header. Contains a short summary of the alert text as plain-text.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getHeaderTextFieldBuilder() {
        if (headerTextBuilder_ == null) {
          headerTextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getHeaderText(),
                  getParentForChildren(),
                  isClean());
          headerText_ = null;
        }
        return headerTextBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString descriptionText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> descriptionTextBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      public boolean hasDescriptionText() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getDescriptionText() {
        if (descriptionTextBuilder_ == null) {
          return descriptionText_;
        } else {
          return descriptionTextBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      public Builder setDescriptionText(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (descriptionTextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          descriptionText_ = value;
          onChanged();
        } else {
          descriptionTextBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      public Builder setDescriptionText(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (descriptionTextBuilder_ == null) {
          descriptionText_ = builderForValue.build();
          onChanged();
        } else {
          descriptionTextBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      public Builder mergeDescriptionText(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (descriptionTextBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              descriptionText_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            descriptionText_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(descriptionText_).mergeFrom(value).buildPartial();
          } else {
            descriptionText_ = value;
          }
          onChanged();
        } else {
          descriptionTextBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      public Builder clearDescriptionText() {
        if (descriptionTextBuilder_ == null) {
          descriptionText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          descriptionTextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getDescriptionTextBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getDescriptionTextFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getDescriptionTextOrBuilder() {
        if (descriptionTextBuilder_ != null) {
          return descriptionTextBuilder_.getMessageOrBuilder();
        } else {
          return descriptionText_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
       *
       * <pre>
       * Full description for the alert as plain-text. The information in the
       * description should add to the information of the header.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getDescriptionTextFieldBuilder() {
        if (descriptionTextBuilder_ == null) {
          descriptionTextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getDescriptionText(),
                  getParentForChildren(),
                  isClean());
          descriptionText_ = null;
        }
        return descriptionTextBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString ttsHeaderText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> ttsHeaderTextBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public boolean hasTtsHeaderText() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getTtsHeaderText() {
        if (ttsHeaderTextBuilder_ == null) {
          return ttsHeaderText_;
        } else {
          return ttsHeaderTextBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder setTtsHeaderText(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (ttsHeaderTextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ttsHeaderText_ = value;
          onChanged();
        } else {
          ttsHeaderTextBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder setTtsHeaderText(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (ttsHeaderTextBuilder_ == null) {
          ttsHeaderText_ = builderForValue.build();
          onChanged();
        } else {
          ttsHeaderTextBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder mergeTtsHeaderText(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (ttsHeaderTextBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              ttsHeaderText_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            ttsHeaderText_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(ttsHeaderText_).mergeFrom(value).buildPartial();
          } else {
            ttsHeaderText_ = value;
          }
          onChanged();
        } else {
          ttsHeaderTextBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder clearTtsHeaderText() {
        if (ttsHeaderTextBuilder_ == null) {
          ttsHeaderText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          ttsHeaderTextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getTtsHeaderTextBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getTtsHeaderTextFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTtsHeaderTextOrBuilder() {
        if (ttsHeaderTextBuilder_ != null) {
          return ttsHeaderTextBuilder_.getMessageOrBuilder();
        } else {
          return ttsHeaderText_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_header_text = 12;</code>
       *
       * <pre>
       * Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getTtsHeaderTextFieldBuilder() {
        if (ttsHeaderTextBuilder_ == null) {
          ttsHeaderTextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getTtsHeaderText(),
                  getParentForChildren(),
                  isClean());
          ttsHeaderText_ = null;
        }
        return ttsHeaderTextBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString ttsDescriptionText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> ttsDescriptionTextBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public boolean hasTtsDescriptionText() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getTtsDescriptionText() {
        if (ttsDescriptionTextBuilder_ == null) {
          return ttsDescriptionText_;
        } else {
          return ttsDescriptionTextBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder setTtsDescriptionText(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (ttsDescriptionTextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ttsDescriptionText_ = value;
          onChanged();
        } else {
          ttsDescriptionTextBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder setTtsDescriptionText(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (ttsDescriptionTextBuilder_ == null) {
          ttsDescriptionText_ = builderForValue.build();
          onChanged();
        } else {
          ttsDescriptionTextBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder mergeTtsDescriptionText(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (ttsDescriptionTextBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              ttsDescriptionText_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            ttsDescriptionText_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(ttsDescriptionText_).mergeFrom(value).buildPartial();
          } else {
            ttsDescriptionText_ = value;
          }
          onChanged();
        } else {
          ttsDescriptionTextBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder clearTtsDescriptionText() {
        if (ttsDescriptionTextBuilder_ == null) {
          ttsDescriptionText_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          ttsDescriptionTextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getTtsDescriptionTextBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getTtsDescriptionTextFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTtsDescriptionTextOrBuilder() {
        if (ttsDescriptionTextBuilder_ != null) {
          return ttsDescriptionTextBuilder_.getMessageOrBuilder();
        } else {
          return ttsDescriptionText_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString tts_description_text = 13;</code>
       *
       * <pre>
       * Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.
       * This field is still experimental, and subject to change. It may be formally adopted in the future.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getTtsDescriptionTextFieldBuilder() {
        if (ttsDescriptionTextBuilder_ == null) {
          ttsDescriptionTextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getTtsDescriptionText(),
                  getParentForChildren(),
                  isClean());
          ttsDescriptionText_ = null;
        }
        return ttsDescriptionTextBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel severityLevel_ = com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel.UNKNOWN_SEVERITY;
      /**
       * <code>optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];</code>
       */
      public boolean hasSeverityLevel() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];</code>
       */
      public com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel getSeverityLevel() {
        return severityLevel_;
      }
      /**
       * <code>optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];</code>
       */
      public Builder setSeverityLevel(com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        severityLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];</code>
       */
      public Builder clearSeverityLevel() {
        bitField0_ = (bitField0_ & ~0x00000200);
        severityLevel_ = com.google.transit.realtime.GtfsRealtime.Alert.SeverityLevel.UNKNOWN_SEVERITY;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.Alert)
    }

    static {
      defaultInstance = new Alert(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.Alert)
  }

  public interface TimeRangeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TimeRange)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<TimeRange> {

    /**
     * <code>optional uint64 start = 1;</code>
     *
     * <pre>
     * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval starts at minus infinity.
     * </pre>
     */
    boolean hasStart();
    /**
     * <code>optional uint64 start = 1;</code>
     *
     * <pre>
     * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval starts at minus infinity.
     * </pre>
     */
    long getStart();

    /**
     * <code>optional uint64 end = 2;</code>
     *
     * <pre>
     * End time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval ends at plus infinity.
     * </pre>
     */
    boolean hasEnd();
    /**
     * <code>optional uint64 end = 2;</code>
     *
     * <pre>
     * End time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval ends at plus infinity.
     * </pre>
     */
    long getEnd();
  }
  /**
   * Protobuf type {@code transit_realtime.TimeRange}
   *
   * <pre>
   * A time interval. The interval is considered active at time 't' if 't' is
   * greater than or equal to the start time and less than the end time.
   * </pre>
   */
  public static final class TimeRange extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        TimeRange> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TimeRange)
      TimeRangeOrBuilder {
    // Use TimeRange.newBuilder() to construct.
    private TimeRange(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.TimeRange, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TimeRange(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TimeRange defaultInstance;
    public static TimeRange getDefaultInstance() {
      return defaultInstance;
    }

    public TimeRange getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TimeRange(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              start_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              end_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TimeRange_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TimeRange_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.TimeRange.class, com.google.transit.realtime.GtfsRealtime.TimeRange.Builder.class);
    }

    public static com.google.protobuf.Parser<TimeRange> PARSER =
        new com.google.protobuf.AbstractParser<TimeRange>() {
      public TimeRange parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TimeRange(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TimeRange> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int START_FIELD_NUMBER = 1;
    private long start_;
    /**
     * <code>optional uint64 start = 1;</code>
     *
     * <pre>
     * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval starts at minus infinity.
     * </pre>
     */
    public boolean hasStart() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 start = 1;</code>
     *
     * <pre>
     * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval starts at minus infinity.
     * </pre>
     */
    public long getStart() {
      return start_;
    }

    public static final int END_FIELD_NUMBER = 2;
    private long end_;
    /**
     * <code>optional uint64 end = 2;</code>
     *
     * <pre>
     * End time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval ends at plus infinity.
     * </pre>
     */
    public boolean hasEnd() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 end = 2;</code>
     *
     * <pre>
     * End time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval ends at plus infinity.
     * </pre>
     */
    public long getEnd() {
      return end_;
    }

    private void initFields() {
      start_ = 0L;
      end_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.TimeRange>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, start_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, end_);
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, start_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, end_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TimeRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.TimeRange prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.TimeRange}
     *
     * <pre>
     * A time interval. The interval is considered active at time 't' if 't' is
     * greater than or equal to the start time and less than the end time.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.TimeRange, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TimeRange)
        com.google.transit.realtime.GtfsRealtime.TimeRangeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TimeRange_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TimeRange_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.TimeRange.class, com.google.transit.realtime.GtfsRealtime.TimeRange.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.TimeRange.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        start_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        end_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TimeRange_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.TimeRange getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.TimeRange.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.TimeRange build() {
        com.google.transit.realtime.GtfsRealtime.TimeRange result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.TimeRange buildPartial() {
        com.google.transit.realtime.GtfsRealtime.TimeRange result = new com.google.transit.realtime.GtfsRealtime.TimeRange(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.start_ = start_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.end_ = end_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.TimeRange) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.TimeRange)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.TimeRange other) {
        if (other == com.google.transit.realtime.GtfsRealtime.TimeRange.getDefaultInstance()) return this;
        if (other.hasStart()) {
          setStart(other.getStart());
        }
        if (other.hasEnd()) {
          setEnd(other.getEnd());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.TimeRange parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.TimeRange) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long start_ ;
      /**
       * <code>optional uint64 start = 1;</code>
       *
       * <pre>
       * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
       * 00:00:00 UTC).
       * If missing, the interval starts at minus infinity.
       * </pre>
       */
      public boolean hasStart() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 start = 1;</code>
       *
       * <pre>
       * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
       * 00:00:00 UTC).
       * If missing, the interval starts at minus infinity.
       * </pre>
       */
      public long getStart() {
        return start_;
      }
      /**
       * <code>optional uint64 start = 1;</code>
       *
       * <pre>
       * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
       * 00:00:00 UTC).
       * If missing, the interval starts at minus infinity.
       * </pre>
       */
      public Builder setStart(long value) {
        bitField0_ |= 0x00000001;
        start_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 start = 1;</code>
       *
       * <pre>
       * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
       * 00:00:00 UTC).
       * If missing, the interval starts at minus infinity.
       * </pre>
       */
      public Builder clearStart() {
        bitField0_ = (bitField0_ & ~0x00000001);
        start_ = 0L;
        onChanged();
        return this;
      }

      private long end_ ;
      /**
       * <code>optional uint64 end = 2;</code>
       *
       * <pre>
       * End time, in POSIX time (i.e., number of seconds since January 1st 1970
       * 00:00:00 UTC).
       * If missing, the interval ends at plus infinity.
       * </pre>
       */
      public boolean hasEnd() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 end = 2;</code>
       *
       * <pre>
       * End time, in POSIX time (i.e., number of seconds since January 1st 1970
       * 00:00:00 UTC).
       * If missing, the interval ends at plus infinity.
       * </pre>
       */
      public long getEnd() {
        return end_;
      }
      /**
       * <code>optional uint64 end = 2;</code>
       *
       * <pre>
       * End time, in POSIX time (i.e., number of seconds since January 1st 1970
       * 00:00:00 UTC).
       * If missing, the interval ends at plus infinity.
       * </pre>
       */
      public Builder setEnd(long value) {
        bitField0_ |= 0x00000002;
        end_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 end = 2;</code>
       *
       * <pre>
       * End time, in POSIX time (i.e., number of seconds since January 1st 1970
       * 00:00:00 UTC).
       * If missing, the interval ends at plus infinity.
       * </pre>
       */
      public Builder clearEnd() {
        bitField0_ = (bitField0_ & ~0x00000002);
        end_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.TimeRange)
    }

    static {
      defaultInstance = new TimeRange(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TimeRange)
  }

  public interface PositionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.Position)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Position> {

    /**
     * <code>required float latitude = 1;</code>
     *
     * <pre>
     * Degrees North, in the WGS-84 coordinate system.
     * </pre>
     */
    boolean hasLatitude();
    /**
     * <code>required float latitude = 1;</code>
     *
     * <pre>
     * Degrees North, in the WGS-84 coordinate system.
     * </pre>
     */
    float getLatitude();

    /**
     * <code>required float longitude = 2;</code>
     *
     * <pre>
     * Degrees East, in the WGS-84 coordinate system.
     * </pre>
     */
    boolean hasLongitude();
    /**
     * <code>required float longitude = 2;</code>
     *
     * <pre>
     * Degrees East, in the WGS-84 coordinate system.
     * </pre>
     */
    float getLongitude();

    /**
     * <code>optional float bearing = 3;</code>
     *
     * <pre>
     * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
     * This can be the compass bearing, or the direction towards the next stop
     * or intermediate location.
     * This should not be direction deduced from the sequence of previous
     * positions, which can be computed from previous data.
     * </pre>
     */
    boolean hasBearing();
    /**
     * <code>optional float bearing = 3;</code>
     *
     * <pre>
     * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
     * This can be the compass bearing, or the direction towards the next stop
     * or intermediate location.
     * This should not be direction deduced from the sequence of previous
     * positions, which can be computed from previous data.
     * </pre>
     */
    float getBearing();

    /**
     * <code>optional double odometer = 4;</code>
     *
     * <pre>
     * Odometer value, in meters.
     * </pre>
     */
    boolean hasOdometer();
    /**
     * <code>optional double odometer = 4;</code>
     *
     * <pre>
     * Odometer value, in meters.
     * </pre>
     */
    double getOdometer();

    /**
     * <code>optional float speed = 5;</code>
     *
     * <pre>
     * Momentary speed measured by the vehicle, in meters per second.
     * </pre>
     */
    boolean hasSpeed();
    /**
     * <code>optional float speed = 5;</code>
     *
     * <pre>
     * Momentary speed measured by the vehicle, in meters per second.
     * </pre>
     */
    float getSpeed();
  }
  /**
   * Protobuf type {@code transit_realtime.Position}
   *
   * <pre>
   * A position.
   * </pre>
   */
  public static final class Position extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        Position> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.Position)
      PositionOrBuilder {
    // Use Position.newBuilder() to construct.
    private Position(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.Position, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Position(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Position defaultInstance;
    public static Position getDefaultInstance() {
      return defaultInstance;
    }

    public Position getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Position(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              latitude_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              longitude_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              bearing_ = input.readFloat();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              odometer_ = input.readDouble();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              speed_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Position_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Position_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.Position.class, com.google.transit.realtime.GtfsRealtime.Position.Builder.class);
    }

    public static com.google.protobuf.Parser<Position> PARSER =
        new com.google.protobuf.AbstractParser<Position>() {
      public Position parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Position(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Position> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LATITUDE_FIELD_NUMBER = 1;
    private float latitude_;
    /**
     * <code>required float latitude = 1;</code>
     *
     * <pre>
     * Degrees North, in the WGS-84 coordinate system.
     * </pre>
     */
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float latitude = 1;</code>
     *
     * <pre>
     * Degrees North, in the WGS-84 coordinate system.
     * </pre>
     */
    public float getLatitude() {
      return latitude_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 2;
    private float longitude_;
    /**
     * <code>required float longitude = 2;</code>
     *
     * <pre>
     * Degrees East, in the WGS-84 coordinate system.
     * </pre>
     */
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float longitude = 2;</code>
     *
     * <pre>
     * Degrees East, in the WGS-84 coordinate system.
     * </pre>
     */
    public float getLongitude() {
      return longitude_;
    }

    public static final int BEARING_FIELD_NUMBER = 3;
    private float bearing_;
    /**
     * <code>optional float bearing = 3;</code>
     *
     * <pre>
     * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
     * This can be the compass bearing, or the direction towards the next stop
     * or intermediate location.
     * This should not be direction deduced from the sequence of previous
     * positions, which can be computed from previous data.
     * </pre>
     */
    public boolean hasBearing() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float bearing = 3;</code>
     *
     * <pre>
     * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
     * This can be the compass bearing, or the direction towards the next stop
     * or intermediate location.
     * This should not be direction deduced from the sequence of previous
     * positions, which can be computed from previous data.
     * </pre>
     */
    public float getBearing() {
      return bearing_;
    }

    public static final int ODOMETER_FIELD_NUMBER = 4;
    private double odometer_;
    /**
     * <code>optional double odometer = 4;</code>
     *
     * <pre>
     * Odometer value, in meters.
     * </pre>
     */
    public boolean hasOdometer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double odometer = 4;</code>
     *
     * <pre>
     * Odometer value, in meters.
     * </pre>
     */
    public double getOdometer() {
      return odometer_;
    }

    public static final int SPEED_FIELD_NUMBER = 5;
    private float speed_;
    /**
     * <code>optional float speed = 5;</code>
     *
     * <pre>
     * Momentary speed measured by the vehicle, in meters per second.
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float speed = 5;</code>
     *
     * <pre>
     * Momentary speed measured by the vehicle, in meters per second.
     * </pre>
     */
    public float getSpeed() {
      return speed_;
    }

    private void initFields() {
      latitude_ = 0F;
      longitude_ = 0F;
      bearing_ = 0F;
      odometer_ = 0D;
      speed_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLatitude()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLongitude()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.Position>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, bearing_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, odometer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, speed_);
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, bearing_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, odometer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, speed_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.Position parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Position parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.Position prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.Position}
     *
     * <pre>
     * A position.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.Position, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.Position)
        com.google.transit.realtime.GtfsRealtime.PositionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Position_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Position_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.Position.class, com.google.transit.realtime.GtfsRealtime.Position.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.Position.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        latitude_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        longitude_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        bearing_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        odometer_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        speed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Position_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.Position getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.Position.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.Position build() {
        com.google.transit.realtime.GtfsRealtime.Position result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.Position buildPartial() {
        com.google.transit.realtime.GtfsRealtime.Position result = new com.google.transit.realtime.GtfsRealtime.Position(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.longitude_ = longitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bearing_ = bearing_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.odometer_ = odometer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.speed_ = speed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.Position) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.Position)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.Position other) {
        if (other == com.google.transit.realtime.GtfsRealtime.Position.getDefaultInstance()) return this;
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasBearing()) {
          setBearing(other.getBearing());
        }
        if (other.hasOdometer()) {
          setOdometer(other.getOdometer());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLatitude()) {
          
          return false;
        }
        if (!hasLongitude()) {
          
          return false;
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.Position parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.Position) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float latitude_ ;
      /**
       * <code>required float latitude = 1;</code>
       *
       * <pre>
       * Degrees North, in the WGS-84 coordinate system.
       * </pre>
       */
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float latitude = 1;</code>
       *
       * <pre>
       * Degrees North, in the WGS-84 coordinate system.
       * </pre>
       */
      public float getLatitude() {
        return latitude_;
      }
      /**
       * <code>required float latitude = 1;</code>
       *
       * <pre>
       * Degrees North, in the WGS-84 coordinate system.
       * </pre>
       */
      public Builder setLatitude(float value) {
        bitField0_ |= 0x00000001;
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float latitude = 1;</code>
       *
       * <pre>
       * Degrees North, in the WGS-84 coordinate system.
       * </pre>
       */
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 0F;
        onChanged();
        return this;
      }

      private float longitude_ ;
      /**
       * <code>required float longitude = 2;</code>
       *
       * <pre>
       * Degrees East, in the WGS-84 coordinate system.
       * </pre>
       */
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float longitude = 2;</code>
       *
       * <pre>
       * Degrees East, in the WGS-84 coordinate system.
       * </pre>
       */
      public float getLongitude() {
        return longitude_;
      }
      /**
       * <code>required float longitude = 2;</code>
       *
       * <pre>
       * Degrees East, in the WGS-84 coordinate system.
       * </pre>
       */
      public Builder setLongitude(float value) {
        bitField0_ |= 0x00000002;
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float longitude = 2;</code>
       *
       * <pre>
       * Degrees East, in the WGS-84 coordinate system.
       * </pre>
       */
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 0F;
        onChanged();
        return this;
      }

      private float bearing_ ;
      /**
       * <code>optional float bearing = 3;</code>
       *
       * <pre>
       * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
       * This can be the compass bearing, or the direction towards the next stop
       * or intermediate location.
       * This should not be direction deduced from the sequence of previous
       * positions, which can be computed from previous data.
       * </pre>
       */
      public boolean hasBearing() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float bearing = 3;</code>
       *
       * <pre>
       * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
       * This can be the compass bearing, or the direction towards the next stop
       * or intermediate location.
       * This should not be direction deduced from the sequence of previous
       * positions, which can be computed from previous data.
       * </pre>
       */
      public float getBearing() {
        return bearing_;
      }
      /**
       * <code>optional float bearing = 3;</code>
       *
       * <pre>
       * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
       * This can be the compass bearing, or the direction towards the next stop
       * or intermediate location.
       * This should not be direction deduced from the sequence of previous
       * positions, which can be computed from previous data.
       * </pre>
       */
      public Builder setBearing(float value) {
        bitField0_ |= 0x00000004;
        bearing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bearing = 3;</code>
       *
       * <pre>
       * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
       * This can be the compass bearing, or the direction towards the next stop
       * or intermediate location.
       * This should not be direction deduced from the sequence of previous
       * positions, which can be computed from previous data.
       * </pre>
       */
      public Builder clearBearing() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bearing_ = 0F;
        onChanged();
        return this;
      }

      private double odometer_ ;
      /**
       * <code>optional double odometer = 4;</code>
       *
       * <pre>
       * Odometer value, in meters.
       * </pre>
       */
      public boolean hasOdometer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double odometer = 4;</code>
       *
       * <pre>
       * Odometer value, in meters.
       * </pre>
       */
      public double getOdometer() {
        return odometer_;
      }
      /**
       * <code>optional double odometer = 4;</code>
       *
       * <pre>
       * Odometer value, in meters.
       * </pre>
       */
      public Builder setOdometer(double value) {
        bitField0_ |= 0x00000008;
        odometer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double odometer = 4;</code>
       *
       * <pre>
       * Odometer value, in meters.
       * </pre>
       */
      public Builder clearOdometer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        odometer_ = 0D;
        onChanged();
        return this;
      }

      private float speed_ ;
      /**
       * <code>optional float speed = 5;</code>
       *
       * <pre>
       * Momentary speed measured by the vehicle, in meters per second.
       * </pre>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float speed = 5;</code>
       *
       * <pre>
       * Momentary speed measured by the vehicle, in meters per second.
       * </pre>
       */
      public float getSpeed() {
        return speed_;
      }
      /**
       * <code>optional float speed = 5;</code>
       *
       * <pre>
       * Momentary speed measured by the vehicle, in meters per second.
       * </pre>
       */
      public Builder setSpeed(float value) {
        bitField0_ |= 0x00000010;
        speed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speed = 5;</code>
       *
       * <pre>
       * Momentary speed measured by the vehicle, in meters per second.
       * </pre>
       */
      public Builder clearSpeed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        speed_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.Position)
    }

    static {
      defaultInstance = new Position(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.Position)
  }

  public interface TripDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TripDescriptor)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<TripDescriptor> {

    /**
     * <code>optional string trip_id = 1;</code>
     *
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary.
     * </pre>
     */
    boolean hasTripId();
    /**
     * <code>optional string trip_id = 1;</code>
     *
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary.
     * </pre>
     */
    java.lang.String getTripId();
    /**
     * <code>optional string trip_id = 1;</code>
     *
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTripIdBytes();

    /**
     * <code>optional string route_id = 5;</code>
     *
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     */
    boolean hasRouteId();
    /**
     * <code>optional string route_id = 5;</code>
     *
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     */
    java.lang.String getRouteId();
    /**
     * <code>optional string route_id = 5;</code>
     *
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     */
    com.google.protobuf.ByteString
        getRouteIdBytes();

    /**
     * <code>optional uint32 direction_id = 6;</code>
     *
     * <pre>
     * The direction_id from the GTFS feed trips.txt file, indicating the
     * direction of travel for trips this selector refers to. This field is
     * still experimental, and subject to change. It may be formally adopted in
     * the future.
     * </pre>
     */
    boolean hasDirectionId();
    /**
     * <code>optional uint32 direction_id = 6;</code>
     *
     * <pre>
     * The direction_id from the GTFS feed trips.txt file, indicating the
     * direction of travel for trips this selector refers to. This field is
     * still experimental, and subject to change. It may be formally adopted in
     * the future.
     * </pre>
     */
    int getDirectionId();

    /**
     * <code>optional string start_time = 2;</code>
     *
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     */
    boolean hasStartTime();
    /**
     * <code>optional string start_time = 2;</code>
     *
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     */
    java.lang.String getStartTime();
    /**
     * <code>optional string start_time = 2;</code>
     *
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStartTimeBytes();

    /**
     * <code>optional string start_date = 3;</code>
     *
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     */
    boolean hasStartDate();
    /**
     * <code>optional string start_date = 3;</code>
     *
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     */
    java.lang.String getStartDate();
    /**
     * <code>optional string start_date = 3;</code>
     *
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStartDateBytes();

    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
     */
    boolean hasScheduleRelationship();
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
     */
    com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship getScheduleRelationship();
  }
  /**
   * Protobuf type {@code transit_realtime.TripDescriptor}
   *
   * <pre>
   * A descriptor that identifies an instance of a GTFS trip, or all instances of
   * a trip along a route.
   * - To specify a single trip instance, the trip_id (and if necessary,
   *   start_time) is set. If route_id is also set, then it should be same as one
   *   that the given trip corresponds to.
   * - To specify all the trips along a given route, only the route_id should be
   *   set. Note that if the trip_id is not known, then stop sequence ids in
   *   TripUpdate are not sufficient, and stop_ids must be provided as well. In
   *   addition, absolute arrival/departure times must be provided.
   * </pre>
   */
  public static final class TripDescriptor extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        TripDescriptor> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TripDescriptor)
      TripDescriptorOrBuilder {
    // Use TripDescriptor.newBuilder() to construct.
    private TripDescriptor(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.TripDescriptor, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TripDescriptor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TripDescriptor defaultInstance;
    public static TripDescriptor getDefaultInstance() {
      return defaultInstance;
    }

    public TripDescriptor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TripDescriptor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              tripId_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              startTime_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              startDate_ = bs;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship value = com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                scheduleRelationship_ = value;
              }
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              routeId_ = bs;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              directionId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.TripDescriptor.class, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder.class);
    }

    public static com.google.protobuf.Parser<TripDescriptor> PARSER =
        new com.google.protobuf.AbstractParser<TripDescriptor>() {
      public TripDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TripDescriptor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TripDescriptor> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.TripDescriptor.ScheduleRelationship}
     *
     * <pre>
     * The relation between this trip and the static schedule. If a trip is done
     * in accordance with temporary schedule, not reflected in GTFS, then it
     * shouldn't be marked as SCHEDULED, but likely as ADDED.
     * </pre>
     */
    public enum ScheduleRelationship
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SCHEDULED = 0;</code>
       *
       * <pre>
       * Trip that is running in accordance with its GTFS schedule, or is close
       * enough to the scheduled trip to be associated with it.
       * </pre>
       */
      SCHEDULED(0, 0),
      /**
       * <code>ADDED = 1 [deprecated = true];</code>
       *
       * <pre>
       * An extra trip that was added in addition to a running schedule, for
       * example, to replace a broken vehicle or to respond to sudden passenger
       * load.
       * </pre>
       */
      @java.lang.Deprecated
      ADDED(1, 1),
      /**
       * <code>UNSCHEDULED = 2;</code>
       *
       * <pre>
       * A trip that is running with no schedule associated to it (GTFS frequencies.txt exact_times=0).
       * Trips with ScheduleRelationship=UNSCHEDULED must also set all StopTimeUpdates.ScheduleRelationship=UNSCHEDULED.
       * </pre>
       */
      UNSCHEDULED(2, 2),
      /**
       * <code>CANCELED = 3;</code>
       *
       * <pre>
       * A trip that existed in the schedule but was removed.
       * </pre>
       */
      CANCELED(3, 3),
      /**
       * <code>REPLACEMENT = 5 [deprecated = true];</code>
       *
       * <pre>
       * Should not be used - for backwards-compatibility only.
       * </pre>
       */
      @java.lang.Deprecated
      REPLACEMENT(4, 5),
      /**
       * <code>DUPLICATED = 6;</code>
       */
      DUPLICATED(5, 6),
      ;

      /**
       * <code>SCHEDULED = 0;</code>
       *
       * <pre>
       * Trip that is running in accordance with its GTFS schedule, or is close
       * enough to the scheduled trip to be associated with it.
       * </pre>
       */
      public static final int SCHEDULED_VALUE = 0;
      /**
       * <code>ADDED = 1 [deprecated = true];</code>
       *
       * <pre>
       * An extra trip that was added in addition to a running schedule, for
       * example, to replace a broken vehicle or to respond to sudden passenger
       * load.
       * </pre>
       */
      public static final int ADDED_VALUE = 1;
      /**
       * <code>UNSCHEDULED = 2;</code>
       *
       * <pre>
       * A trip that is running with no schedule associated to it (GTFS frequencies.txt exact_times=0).
       * Trips with ScheduleRelationship=UNSCHEDULED must also set all StopTimeUpdates.ScheduleRelationship=UNSCHEDULED.
       * </pre>
       */
      public static final int UNSCHEDULED_VALUE = 2;
      /**
       * <code>CANCELED = 3;</code>
       *
       * <pre>
       * A trip that existed in the schedule but was removed.
       * </pre>
       */
      public static final int CANCELED_VALUE = 3;
      /**
       * <code>REPLACEMENT = 5 [deprecated = true];</code>
       *
       * <pre>
       * Should not be used - for backwards-compatibility only.
       * </pre>
       */
      public static final int REPLACEMENT_VALUE = 5;
      /**
       * <code>DUPLICATED = 6;</code>
       */
      public static final int DUPLICATED_VALUE = 6;


      public final int getNumber() { return value; }

      public static ScheduleRelationship valueOf(int value) {
        switch (value) {
          case 0: return SCHEDULED;
          case 1: return ADDED;
          case 2: return UNSCHEDULED;
          case 3: return CANCELED;
          case 5: return REPLACEMENT;
          case 6: return DUPLICATED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>() {
              public ScheduleRelationship findValueByNumber(int number) {
                return ScheduleRelationship.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDescriptor().getEnumTypes().get(0);
      }

      private static final ScheduleRelationship[] VALUES = values();

      public static ScheduleRelationship valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ScheduleRelationship(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.TripDescriptor.ScheduleRelationship)
    }

    private int bitField0_;
    public static final int TRIP_ID_FIELD_NUMBER = 1;
    private java.lang.Object tripId_;
    /**
     * <code>optional string trip_id = 1;</code>
     *
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary.
     * </pre>
     */
    public boolean hasTripId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string trip_id = 1;</code>
     *
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary.
     * </pre>
     */
    public java.lang.String getTripId() {
      java.lang.Object ref = tripId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tripId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string trip_id = 1;</code>
     *
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency-based trips, this field is enough to uniquely identify
     * the trip. For frequency-based trip, start_time and start_date might also be
     * necessary.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTripIdBytes() {
      java.lang.Object ref = tripId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tripId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUTE_ID_FIELD_NUMBER = 5;
    private java.lang.Object routeId_;
    /**
     * <code>optional string route_id = 5;</code>
     *
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     */
    public boolean hasRouteId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string route_id = 5;</code>
     *
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     */
    public java.lang.String getRouteId() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          routeId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string route_id = 5;</code>
     *
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRouteIdBytes() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        routeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DIRECTION_ID_FIELD_NUMBER = 6;
    private int directionId_;
    /**
     * <code>optional uint32 direction_id = 6;</code>
     *
     * <pre>
     * The direction_id from the GTFS feed trips.txt file, indicating the
     * direction of travel for trips this selector refers to. This field is
     * still experimental, and subject to change. It may be formally adopted in
     * the future.
     * </pre>
     */
    public boolean hasDirectionId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 direction_id = 6;</code>
     *
     * <pre>
     * The direction_id from the GTFS feed trips.txt file, indicating the
     * direction of travel for trips this selector refers to. This field is
     * still experimental, and subject to change. It may be formally adopted in
     * the future.
     * </pre>
     */
    public int getDirectionId() {
      return directionId_;
    }

    public static final int START_TIME_FIELD_NUMBER = 2;
    private java.lang.Object startTime_;
    /**
     * <code>optional string start_time = 2;</code>
     *
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string start_time = 2;</code>
     *
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     */
    public java.lang.String getStartTime() {
      java.lang.Object ref = startTime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startTime_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string start_time = 2;</code>
     *
     * <pre>
     * The initially scheduled start time of this trip instance.
     * When the trip_id corresponds to a non-frequency-based trip, this field
     * should either be omitted or be equal to the value in the GTFS feed. When
     * the trip_id correponds to a frequency-based trip, the start_time must be
     * specified for trip updates and vehicle positions. If the trip corresponds
     * to exact_times=1 GTFS record, then start_time must be some multiple
     * (including zero) of headway_secs later than frequencies.txt start_time for
     * the corresponding time period. If the trip corresponds to exact_times=0,
     * then its start_time may be arbitrary, and is initially expected to be the
     * first departure of the trip. Once established, the start_time of this
     * frequency-based trip should be considered immutable, even if the first
     * departure time changes -- that time change may instead be reflected in a
     * StopTimeUpdate.
     * Format and semantics of the field is same as that of
     * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStartTimeBytes() {
      java.lang.Object ref = startTime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_DATE_FIELD_NUMBER = 3;
    private java.lang.Object startDate_;
    /**
     * <code>optional string start_date = 3;</code>
     *
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     */
    public boolean hasStartDate() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string start_date = 3;</code>
     *
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     */
    public java.lang.String getStartDate() {
      java.lang.Object ref = startDate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startDate_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string start_date = 3;</code>
     *
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStartDateBytes() {
      java.lang.Object ref = startDate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startDate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCHEDULE_RELATIONSHIP_FIELD_NUMBER = 4;
    private com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship scheduleRelationship_;
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
     */
    public boolean hasScheduleRelationship() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship getScheduleRelationship() {
      return scheduleRelationship_;
    }

    private void initFields() {
      tripId_ = "";
      routeId_ = "";
      directionId_ = 0;
      startTime_ = "";
      startDate_ = "";
      scheduleRelationship_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.TripDescriptor>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTripIdBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(2, getStartTimeBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(3, getStartDateBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(4, scheduleRelationship_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(5, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(6, directionId_);
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTripIdBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getStartTimeBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getStartDateBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, scheduleRelationship_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, directionId_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.TripDescriptor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.TripDescriptor}
     *
     * <pre>
     * A descriptor that identifies an instance of a GTFS trip, or all instances of
     * a trip along a route.
     * - To specify a single trip instance, the trip_id (and if necessary,
     *   start_time) is set. If route_id is also set, then it should be same as one
     *   that the given trip corresponds to.
     * - To specify all the trips along a given route, only the route_id should be
     *   set. Note that if the trip_id is not known, then stop sequence ids in
     *   TripUpdate are not sufficient, and stop_ids must be provided as well. In
     *   addition, absolute arrival/departure times must be provided.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.TripDescriptor, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TripDescriptor)
        com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.TripDescriptor.class, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.TripDescriptor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tripId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        routeId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        directionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        startTime_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        startDate_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        scheduleRelationship_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.TripDescriptor getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.TripDescriptor build() {
        com.google.transit.realtime.GtfsRealtime.TripDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.TripDescriptor buildPartial() {
        com.google.transit.realtime.GtfsRealtime.TripDescriptor result = new com.google.transit.realtime.GtfsRealtime.TripDescriptor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tripId_ = tripId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.routeId_ = routeId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.directionId_ = directionId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.startTime_ = startTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.startDate_ = startDate_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.scheduleRelationship_ = scheduleRelationship_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.TripDescriptor) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.TripDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.TripDescriptor other) {
        if (other == com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance()) return this;
        if (other.hasTripId()) {
          bitField0_ |= 0x00000001;
          tripId_ = other.tripId_;
          onChanged();
        }
        if (other.hasRouteId()) {
          bitField0_ |= 0x00000002;
          routeId_ = other.routeId_;
          onChanged();
        }
        if (other.hasDirectionId()) {
          setDirectionId(other.getDirectionId());
        }
        if (other.hasStartTime()) {
          bitField0_ |= 0x00000008;
          startTime_ = other.startTime_;
          onChanged();
        }
        if (other.hasStartDate()) {
          bitField0_ |= 0x00000010;
          startDate_ = other.startDate_;
          onChanged();
        }
        if (other.hasScheduleRelationship()) {
          setScheduleRelationship(other.getScheduleRelationship());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.TripDescriptor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.TripDescriptor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object tripId_ = "";
      /**
       * <code>optional string trip_id = 1;</code>
       *
       * <pre>
       * The trip_id from the GTFS feed that this selector refers to.
       * For non frequency-based trips, this field is enough to uniquely identify
       * the trip. For frequency-based trip, start_time and start_date might also be
       * necessary.
       * </pre>
       */
      public boolean hasTripId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string trip_id = 1;</code>
       *
       * <pre>
       * The trip_id from the GTFS feed that this selector refers to.
       * For non frequency-based trips, this field is enough to uniquely identify
       * the trip. For frequency-based trip, start_time and start_date might also be
       * necessary.
       * </pre>
       */
      public java.lang.String getTripId() {
        java.lang.Object ref = tripId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            tripId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string trip_id = 1;</code>
       *
       * <pre>
       * The trip_id from the GTFS feed that this selector refers to.
       * For non frequency-based trips, this field is enough to uniquely identify
       * the trip. For frequency-based trip, start_time and start_date might also be
       * necessary.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTripIdBytes() {
        java.lang.Object ref = tripId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tripId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string trip_id = 1;</code>
       *
       * <pre>
       * The trip_id from the GTFS feed that this selector refers to.
       * For non frequency-based trips, this field is enough to uniquely identify
       * the trip. For frequency-based trip, start_time and start_date might also be
       * necessary.
       * </pre>
       */
      public Builder setTripId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        tripId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string trip_id = 1;</code>
       *
       * <pre>
       * The trip_id from the GTFS feed that this selector refers to.
       * For non frequency-based trips, this field is enough to uniquely identify
       * the trip. For frequency-based trip, start_time and start_date might also be
       * necessary.
       * </pre>
       */
      public Builder clearTripId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tripId_ = getDefaultInstance().getTripId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string trip_id = 1;</code>
       *
       * <pre>
       * The trip_id from the GTFS feed that this selector refers to.
       * For non frequency-based trips, this field is enough to uniquely identify
       * the trip. For frequency-based trip, start_time and start_date might also be
       * necessary.
       * </pre>
       */
      public Builder setTripIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        tripId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object routeId_ = "";
      /**
       * <code>optional string route_id = 5;</code>
       *
       * <pre>
       * The route_id from the GTFS that this selector refers to.
       * </pre>
       */
      public boolean hasRouteId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string route_id = 5;</code>
       *
       * <pre>
       * The route_id from the GTFS that this selector refers to.
       * </pre>
       */
      public java.lang.String getRouteId() {
        java.lang.Object ref = routeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            routeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string route_id = 5;</code>
       *
       * <pre>
       * The route_id from the GTFS that this selector refers to.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRouteIdBytes() {
        java.lang.Object ref = routeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          routeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string route_id = 5;</code>
       *
       * <pre>
       * The route_id from the GTFS that this selector refers to.
       * </pre>
       */
      public Builder setRouteId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        routeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_id = 5;</code>
       *
       * <pre>
       * The route_id from the GTFS that this selector refers to.
       * </pre>
       */
      public Builder clearRouteId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        routeId_ = getDefaultInstance().getRouteId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_id = 5;</code>
       *
       * <pre>
       * The route_id from the GTFS that this selector refers to.
       * </pre>
       */
      public Builder setRouteIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        routeId_ = value;
        onChanged();
        return this;
      }

      private int directionId_ ;
      /**
       * <code>optional uint32 direction_id = 6;</code>
       *
       * <pre>
       * The direction_id from the GTFS feed trips.txt file, indicating the
       * direction of travel for trips this selector refers to. This field is
       * still experimental, and subject to change. It may be formally adopted in
       * the future.
       * </pre>
       */
      public boolean hasDirectionId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 direction_id = 6;</code>
       *
       * <pre>
       * The direction_id from the GTFS feed trips.txt file, indicating the
       * direction of travel for trips this selector refers to. This field is
       * still experimental, and subject to change. It may be formally adopted in
       * the future.
       * </pre>
       */
      public int getDirectionId() {
        return directionId_;
      }
      /**
       * <code>optional uint32 direction_id = 6;</code>
       *
       * <pre>
       * The direction_id from the GTFS feed trips.txt file, indicating the
       * direction of travel for trips this selector refers to. This field is
       * still experimental, and subject to change. It may be formally adopted in
       * the future.
       * </pre>
       */
      public Builder setDirectionId(int value) {
        bitField0_ |= 0x00000004;
        directionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 direction_id = 6;</code>
       *
       * <pre>
       * The direction_id from the GTFS feed trips.txt file, indicating the
       * direction of travel for trips this selector refers to. This field is
       * still experimental, and subject to change. It may be formally adopted in
       * the future.
       * </pre>
       */
      public Builder clearDirectionId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        directionId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object startTime_ = "";
      /**
       * <code>optional string start_time = 2;</code>
       *
       * <pre>
       * The initially scheduled start time of this trip instance.
       * When the trip_id corresponds to a non-frequency-based trip, this field
       * should either be omitted or be equal to the value in the GTFS feed. When
       * the trip_id correponds to a frequency-based trip, the start_time must be
       * specified for trip updates and vehicle positions. If the trip corresponds
       * to exact_times=1 GTFS record, then start_time must be some multiple
       * (including zero) of headway_secs later than frequencies.txt start_time for
       * the corresponding time period. If the trip corresponds to exact_times=0,
       * then its start_time may be arbitrary, and is initially expected to be the
       * first departure of the trip. Once established, the start_time of this
       * frequency-based trip should be considered immutable, even if the first
       * departure time changes -- that time change may instead be reflected in a
       * StopTimeUpdate.
       * Format and semantics of the field is same as that of
       * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
       * </pre>
       */
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string start_time = 2;</code>
       *
       * <pre>
       * The initially scheduled start time of this trip instance.
       * When the trip_id corresponds to a non-frequency-based trip, this field
       * should either be omitted or be equal to the value in the GTFS feed. When
       * the trip_id correponds to a frequency-based trip, the start_time must be
       * specified for trip updates and vehicle positions. If the trip corresponds
       * to exact_times=1 GTFS record, then start_time must be some multiple
       * (including zero) of headway_secs later than frequencies.txt start_time for
       * the corresponding time period. If the trip corresponds to exact_times=0,
       * then its start_time may be arbitrary, and is initially expected to be the
       * first departure of the trip. Once established, the start_time of this
       * frequency-based trip should be considered immutable, even if the first
       * departure time changes -- that time change may instead be reflected in a
       * StopTimeUpdate.
       * Format and semantics of the field is same as that of
       * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
       * </pre>
       */
      public java.lang.String getStartTime() {
        java.lang.Object ref = startTime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            startTime_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string start_time = 2;</code>
       *
       * <pre>
       * The initially scheduled start time of this trip instance.
       * When the trip_id corresponds to a non-frequency-based trip, this field
       * should either be omitted or be equal to the value in the GTFS feed. When
       * the trip_id correponds to a frequency-based trip, the start_time must be
       * specified for trip updates and vehicle positions. If the trip corresponds
       * to exact_times=1 GTFS record, then start_time must be some multiple
       * (including zero) of headway_secs later than frequencies.txt start_time for
       * the corresponding time period. If the trip corresponds to exact_times=0,
       * then its start_time may be arbitrary, and is initially expected to be the
       * first departure of the trip. Once established, the start_time of this
       * frequency-based trip should be considered immutable, even if the first
       * departure time changes -- that time change may instead be reflected in a
       * StopTimeUpdate.
       * Format and semantics of the field is same as that of
       * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStartTimeBytes() {
        java.lang.Object ref = startTime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startTime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string start_time = 2;</code>
       *
       * <pre>
       * The initially scheduled start time of this trip instance.
       * When the trip_id corresponds to a non-frequency-based trip, this field
       * should either be omitted or be equal to the value in the GTFS feed. When
       * the trip_id correponds to a frequency-based trip, the start_time must be
       * specified for trip updates and vehicle positions. If the trip corresponds
       * to exact_times=1 GTFS record, then start_time must be some multiple
       * (including zero) of headway_secs later than frequencies.txt start_time for
       * the corresponding time period. If the trip corresponds to exact_times=0,
       * then its start_time may be arbitrary, and is initially expected to be the
       * first departure of the trip. Once established, the start_time of this
       * frequency-based trip should be considered immutable, even if the first
       * departure time changes -- that time change may instead be reflected in a
       * StopTimeUpdate.
       * Format and semantics of the field is same as that of
       * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
       * </pre>
       */
      public Builder setStartTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        startTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string start_time = 2;</code>
       *
       * <pre>
       * The initially scheduled start time of this trip instance.
       * When the trip_id corresponds to a non-frequency-based trip, this field
       * should either be omitted or be equal to the value in the GTFS feed. When
       * the trip_id correponds to a frequency-based trip, the start_time must be
       * specified for trip updates and vehicle positions. If the trip corresponds
       * to exact_times=1 GTFS record, then start_time must be some multiple
       * (including zero) of headway_secs later than frequencies.txt start_time for
       * the corresponding time period. If the trip corresponds to exact_times=0,
       * then its start_time may be arbitrary, and is initially expected to be the
       * first departure of the trip. Once established, the start_time of this
       * frequency-based trip should be considered immutable, even if the first
       * departure time changes -- that time change may instead be reflected in a
       * StopTimeUpdate.
       * Format and semantics of the field is same as that of
       * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
       * </pre>
       */
      public Builder clearStartTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        startTime_ = getDefaultInstance().getStartTime();
        onChanged();
        return this;
      }
      /**
       * <code>optional string start_time = 2;</code>
       *
       * <pre>
       * The initially scheduled start time of this trip instance.
       * When the trip_id corresponds to a non-frequency-based trip, this field
       * should either be omitted or be equal to the value in the GTFS feed. When
       * the trip_id correponds to a frequency-based trip, the start_time must be
       * specified for trip updates and vehicle positions. If the trip corresponds
       * to exact_times=1 GTFS record, then start_time must be some multiple
       * (including zero) of headway_secs later than frequencies.txt start_time for
       * the corresponding time period. If the trip corresponds to exact_times=0,
       * then its start_time may be arbitrary, and is initially expected to be the
       * first departure of the trip. Once established, the start_time of this
       * frequency-based trip should be considered immutable, even if the first
       * departure time changes -- that time change may instead be reflected in a
       * StopTimeUpdate.
       * Format and semantics of the field is same as that of
       * GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
       * </pre>
       */
      public Builder setStartTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        startTime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object startDate_ = "";
      /**
       * <code>optional string start_date = 3;</code>
       *
       * <pre>
       * The scheduled start date of this trip instance.
       * Must be provided to disambiguate trips that are so late as to collide with
       * a scheduled trip on a next day. For example, for a train that departs 8:00
       * and 20:00 every day, and is 12 hours late, there would be two distinct
       * trips on the same time.
       * This field can be provided but is not mandatory for schedules in which such
       * collisions are impossible - for example, a service running on hourly
       * schedule where a vehicle that is one hour late is not considered to be
       * related to schedule anymore.
       * In YYYYMMDD format.
       * </pre>
       */
      public boolean hasStartDate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string start_date = 3;</code>
       *
       * <pre>
       * The scheduled start date of this trip instance.
       * Must be provided to disambiguate trips that are so late as to collide with
       * a scheduled trip on a next day. For example, for a train that departs 8:00
       * and 20:00 every day, and is 12 hours late, there would be two distinct
       * trips on the same time.
       * This field can be provided but is not mandatory for schedules in which such
       * collisions are impossible - for example, a service running on hourly
       * schedule where a vehicle that is one hour late is not considered to be
       * related to schedule anymore.
       * In YYYYMMDD format.
       * </pre>
       */
      public java.lang.String getStartDate() {
        java.lang.Object ref = startDate_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            startDate_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string start_date = 3;</code>
       *
       * <pre>
       * The scheduled start date of this trip instance.
       * Must be provided to disambiguate trips that are so late as to collide with
       * a scheduled trip on a next day. For example, for a train that departs 8:00
       * and 20:00 every day, and is 12 hours late, there would be two distinct
       * trips on the same time.
       * This field can be provided but is not mandatory for schedules in which such
       * collisions are impossible - for example, a service running on hourly
       * schedule where a vehicle that is one hour late is not considered to be
       * related to schedule anymore.
       * In YYYYMMDD format.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStartDateBytes() {
        java.lang.Object ref = startDate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startDate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string start_date = 3;</code>
       *
       * <pre>
       * The scheduled start date of this trip instance.
       * Must be provided to disambiguate trips that are so late as to collide with
       * a scheduled trip on a next day. For example, for a train that departs 8:00
       * and 20:00 every day, and is 12 hours late, there would be two distinct
       * trips on the same time.
       * This field can be provided but is not mandatory for schedules in which such
       * collisions are impossible - for example, a service running on hourly
       * schedule where a vehicle that is one hour late is not considered to be
       * related to schedule anymore.
       * In YYYYMMDD format.
       * </pre>
       */
      public Builder setStartDate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        startDate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string start_date = 3;</code>
       *
       * <pre>
       * The scheduled start date of this trip instance.
       * Must be provided to disambiguate trips that are so late as to collide with
       * a scheduled trip on a next day. For example, for a train that departs 8:00
       * and 20:00 every day, and is 12 hours late, there would be two distinct
       * trips on the same time.
       * This field can be provided but is not mandatory for schedules in which such
       * collisions are impossible - for example, a service running on hourly
       * schedule where a vehicle that is one hour late is not considered to be
       * related to schedule anymore.
       * In YYYYMMDD format.
       * </pre>
       */
      public Builder clearStartDate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        startDate_ = getDefaultInstance().getStartDate();
        onChanged();
        return this;
      }
      /**
       * <code>optional string start_date = 3;</code>
       *
       * <pre>
       * The scheduled start date of this trip instance.
       * Must be provided to disambiguate trips that are so late as to collide with
       * a scheduled trip on a next day. For example, for a train that departs 8:00
       * and 20:00 every day, and is 12 hours late, there would be two distinct
       * trips on the same time.
       * This field can be provided but is not mandatory for schedules in which such
       * collisions are impossible - for example, a service running on hourly
       * schedule where a vehicle that is one hour late is not considered to be
       * related to schedule anymore.
       * In YYYYMMDD format.
       * </pre>
       */
      public Builder setStartDateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        startDate_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship scheduleRelationship_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED;
      /**
       * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
       */
      public boolean hasScheduleRelationship() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship getScheduleRelationship() {
        return scheduleRelationship_;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
       */
      public Builder setScheduleRelationship(com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        scheduleRelationship_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;</code>
       */
      public Builder clearScheduleRelationship() {
        bitField0_ = (bitField0_ & ~0x00000020);
        scheduleRelationship_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.TripDescriptor)
    }

    static {
      defaultInstance = new TripDescriptor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TripDescriptor)
  }

  public interface VehicleDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.VehicleDescriptor)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<VehicleDescriptor> {

    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     */
    boolean hasLabel();
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     */
    java.lang.String getLabel();
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLabelBytes();

    /**
     * <code>optional string license_plate = 3;</code>
     *
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     */
    boolean hasLicensePlate();
    /**
     * <code>optional string license_plate = 3;</code>
     *
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     */
    java.lang.String getLicensePlate();
    /**
     * <code>optional string license_plate = 3;</code>
     *
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLicensePlateBytes();
  }
  /**
   * Protobuf type {@code transit_realtime.VehicleDescriptor}
   *
   * <pre>
   * Identification information for the vehicle performing the trip.
   * </pre>
   */
  public static final class VehicleDescriptor extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        VehicleDescriptor> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.VehicleDescriptor)
      VehicleDescriptorOrBuilder {
    // Use VehicleDescriptor.newBuilder() to construct.
    private VehicleDescriptor(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.VehicleDescriptor, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VehicleDescriptor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VehicleDescriptor defaultInstance;
    public static VehicleDescriptor getDefaultInstance() {
      return defaultInstance;
    }

    public VehicleDescriptor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VehicleDescriptor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              id_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              label_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              licensePlate_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.class, com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder.class);
    }

    public static com.google.protobuf.Parser<VehicleDescriptor> PARSER =
        new com.google.protobuf.AbstractParser<VehicleDescriptor>() {
      public VehicleDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VehicleDescriptor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VehicleDescriptor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private java.lang.Object id_;
    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LABEL_FIELD_NUMBER = 2;
    private java.lang.Object label_;
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     */
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          label_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LICENSE_PLATE_FIELD_NUMBER = 3;
    private java.lang.Object licensePlate_;
    /**
     * <code>optional string license_plate = 3;</code>
     *
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     */
    public boolean hasLicensePlate() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string license_plate = 3;</code>
     *
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     */
    public java.lang.String getLicensePlate() {
      java.lang.Object ref = licensePlate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          licensePlate_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string license_plate = 3;</code>
     *
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLicensePlateBytes() {
      java.lang.Object ref = licensePlate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        licensePlate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      id_ = "";
      label_ = "";
      licensePlate_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.VehicleDescriptor>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getLabelBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getLicensePlateBytes());
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getLabelBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getLicensePlateBytes());
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.VehicleDescriptor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.VehicleDescriptor}
     *
     * <pre>
     * Identification information for the vehicle performing the trip.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.VehicleDescriptor, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.VehicleDescriptor)
        com.google.transit.realtime.GtfsRealtime.VehicleDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.class, com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        label_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        licensePlate_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor build() {
        com.google.transit.realtime.GtfsRealtime.VehicleDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.VehicleDescriptor buildPartial() {
        com.google.transit.realtime.GtfsRealtime.VehicleDescriptor result = new com.google.transit.realtime.GtfsRealtime.VehicleDescriptor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.label_ = label_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.licensePlate_ = licensePlate_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.VehicleDescriptor) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.VehicleDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.VehicleDescriptor other) {
        if (other == com.google.transit.realtime.GtfsRealtime.VehicleDescriptor.getDefaultInstance()) return this;
        if (other.hasId()) {
          bitField0_ |= 0x00000001;
          id_ = other.id_;
          onChanged();
        }
        if (other.hasLabel()) {
          bitField0_ |= 0x00000002;
          label_ = other.label_;
          onChanged();
        }
        if (other.hasLicensePlate()) {
          bitField0_ |= 0x00000004;
          licensePlate_ = other.licensePlate_;
          onChanged();
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.VehicleDescriptor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.VehicleDescriptor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * Internal system identification of the vehicle. Should be unique per
       * vehicle, and can be used for tracking the vehicle as it proceeds through
       * the system.
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * Internal system identification of the vehicle. Should be unique per
       * vehicle, and can be used for tracking the vehicle as it proceeds through
       * the system.
       * </pre>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * Internal system identification of the vehicle. Should be unique per
       * vehicle, and can be used for tracking the vehicle as it proceeds through
       * the system.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * Internal system identification of the vehicle. Should be unique per
       * vehicle, and can be used for tracking the vehicle as it proceeds through
       * the system.
       * </pre>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * Internal system identification of the vehicle. Should be unique per
       * vehicle, and can be used for tracking the vehicle as it proceeds through
       * the system.
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * Internal system identification of the vehicle. Should be unique per
       * vehicle, and can be used for tracking the vehicle as it proceeds through
       * the system.
       * </pre>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object label_ = "";
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       * User visible label, i.e., something that must be shown to the passenger to
       * help identify the correct vehicle.
       * </pre>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       * User visible label, i.e., something that must be shown to the passenger to
       * help identify the correct vehicle.
       * </pre>
       */
      public java.lang.String getLabel() {
        java.lang.Object ref = label_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            label_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       * User visible label, i.e., something that must be shown to the passenger to
       * help identify the correct vehicle.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLabelBytes() {
        java.lang.Object ref = label_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          label_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       * User visible label, i.e., something that must be shown to the passenger to
       * help identify the correct vehicle.
       * </pre>
       */
      public Builder setLabel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       * User visible label, i.e., something that must be shown to the passenger to
       * help identify the correct vehicle.
       * </pre>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        label_ = getDefaultInstance().getLabel();
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       * User visible label, i.e., something that must be shown to the passenger to
       * help identify the correct vehicle.
       * </pre>
       */
      public Builder setLabelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        label_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object licensePlate_ = "";
      /**
       * <code>optional string license_plate = 3;</code>
       *
       * <pre>
       * The license plate of the vehicle.
       * </pre>
       */
      public boolean hasLicensePlate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string license_plate = 3;</code>
       *
       * <pre>
       * The license plate of the vehicle.
       * </pre>
       */
      public java.lang.String getLicensePlate() {
        java.lang.Object ref = licensePlate_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            licensePlate_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string license_plate = 3;</code>
       *
       * <pre>
       * The license plate of the vehicle.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLicensePlateBytes() {
        java.lang.Object ref = licensePlate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          licensePlate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string license_plate = 3;</code>
       *
       * <pre>
       * The license plate of the vehicle.
       * </pre>
       */
      public Builder setLicensePlate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        licensePlate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string license_plate = 3;</code>
       *
       * <pre>
       * The license plate of the vehicle.
       * </pre>
       */
      public Builder clearLicensePlate() {
        bitField0_ = (bitField0_ & ~0x00000004);
        licensePlate_ = getDefaultInstance().getLicensePlate();
        onChanged();
        return this;
      }
      /**
       * <code>optional string license_plate = 3;</code>
       *
       * <pre>
       * The license plate of the vehicle.
       * </pre>
       */
      public Builder setLicensePlateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        licensePlate_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.VehicleDescriptor)
    }

    static {
      defaultInstance = new VehicleDescriptor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.VehicleDescriptor)
  }

  public interface EntitySelectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.EntitySelector)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<EntitySelector> {

    /**
     * <code>optional string agency_id = 1;</code>
     *
     * <pre>
     * The values of the fields should correspond to the appropriate fields in the
     * GTFS feed.
     * At least one specifier must be given. If several are given, then the
     * matching has to apply to all the given specifiers.
     * </pre>
     */
    boolean hasAgencyId();
    /**
     * <code>optional string agency_id = 1;</code>
     *
     * <pre>
     * The values of the fields should correspond to the appropriate fields in the
     * GTFS feed.
     * At least one specifier must be given. If several are given, then the
     * matching has to apply to all the given specifiers.
     * </pre>
     */
    java.lang.String getAgencyId();
    /**
     * <code>optional string agency_id = 1;</code>
     *
     * <pre>
     * The values of the fields should correspond to the appropriate fields in the
     * GTFS feed.
     * At least one specifier must be given. If several are given, then the
     * matching has to apply to all the given specifiers.
     * </pre>
     */
    com.google.protobuf.ByteString
        getAgencyIdBytes();

    /**
     * <code>optional string route_id = 2;</code>
     */
    boolean hasRouteId();
    /**
     * <code>optional string route_id = 2;</code>
     */
    java.lang.String getRouteId();
    /**
     * <code>optional string route_id = 2;</code>
     */
    com.google.protobuf.ByteString
        getRouteIdBytes();

    /**
     * <code>optional int32 route_type = 3;</code>
     *
     * <pre>
     * corresponds to route_type in GTFS.
     * </pre>
     */
    boolean hasRouteType();
    /**
     * <code>optional int32 route_type = 3;</code>
     *
     * <pre>
     * corresponds to route_type in GTFS.
     * </pre>
     */
    int getRouteType();

    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
     */
    boolean hasTrip();
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
     */
    com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip();
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
     */
    com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder();

    /**
     * <code>optional string stop_id = 5;</code>
     */
    boolean hasStopId();
    /**
     * <code>optional string stop_id = 5;</code>
     */
    java.lang.String getStopId();
    /**
     * <code>optional string stop_id = 5;</code>
     */
    com.google.protobuf.ByteString
        getStopIdBytes();

    /**
     * <code>optional uint32 direction_id = 6;</code>
     *
     * <pre>
     * Corresponds to trip direction_id in GTFS trips.txt. If provided the
     * route_id must also be provided. This field is still experimental, and
     * subject to change. It may be formally adopted in the future.
     * </pre>
     */
    boolean hasDirectionId();
    /**
     * <code>optional uint32 direction_id = 6;</code>
     *
     * <pre>
     * Corresponds to trip direction_id in GTFS trips.txt. If provided the
     * route_id must also be provided. This field is still experimental, and
     * subject to change. It may be formally adopted in the future.
     * </pre>
     */
    int getDirectionId();
  }
  /**
   * Protobuf type {@code transit_realtime.EntitySelector}
   *
   * <pre>
   * A selector for an entity in a GTFS feed.
   * </pre>
   */
  public static final class EntitySelector extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        EntitySelector> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.EntitySelector)
      EntitySelectorOrBuilder {
    // Use EntitySelector.newBuilder() to construct.
    private EntitySelector(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.EntitySelector, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EntitySelector(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EntitySelector defaultInstance;
    public static EntitySelector getDefaultInstance() {
      return defaultInstance;
    }

    public EntitySelector getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EntitySelector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              agencyId_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              routeId_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              routeType_ = input.readInt32();
              break;
            }
            case 34: {
              com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = trip_.toBuilder();
              }
              trip_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TripDescriptor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(trip_);
                trip_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              stopId_ = bs;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              directionId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_EntitySelector_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_EntitySelector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.EntitySelector.class, com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder.class);
    }

    public static com.google.protobuf.Parser<EntitySelector> PARSER =
        new com.google.protobuf.AbstractParser<EntitySelector>() {
      public EntitySelector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EntitySelector(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EntitySelector> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int AGENCY_ID_FIELD_NUMBER = 1;
    private java.lang.Object agencyId_;
    /**
     * <code>optional string agency_id = 1;</code>
     *
     * <pre>
     * The values of the fields should correspond to the appropriate fields in the
     * GTFS feed.
     * At least one specifier must be given. If several are given, then the
     * matching has to apply to all the given specifiers.
     * </pre>
     */
    public boolean hasAgencyId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string agency_id = 1;</code>
     *
     * <pre>
     * The values of the fields should correspond to the appropriate fields in the
     * GTFS feed.
     * At least one specifier must be given. If several are given, then the
     * matching has to apply to all the given specifiers.
     * </pre>
     */
    public java.lang.String getAgencyId() {
      java.lang.Object ref = agencyId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          agencyId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string agency_id = 1;</code>
     *
     * <pre>
     * The values of the fields should correspond to the appropriate fields in the
     * GTFS feed.
     * At least one specifier must be given. If several are given, then the
     * matching has to apply to all the given specifiers.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAgencyIdBytes() {
      java.lang.Object ref = agencyId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        agencyId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUTE_ID_FIELD_NUMBER = 2;
    private java.lang.Object routeId_;
    /**
     * <code>optional string route_id = 2;</code>
     */
    public boolean hasRouteId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string route_id = 2;</code>
     */
    public java.lang.String getRouteId() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          routeId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string route_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRouteIdBytes() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        routeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUTE_TYPE_FIELD_NUMBER = 3;
    private int routeType_;
    /**
     * <code>optional int32 route_type = 3;</code>
     *
     * <pre>
     * corresponds to route_type in GTFS.
     * </pre>
     */
    public boolean hasRouteType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 route_type = 3;</code>
     *
     * <pre>
     * corresponds to route_type in GTFS.
     * </pre>
     */
    public int getRouteType() {
      return routeType_;
    }

    public static final int TRIP_FIELD_NUMBER = 4;
    private com.google.transit.realtime.GtfsRealtime.TripDescriptor trip_;
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
     */
    public boolean hasTrip() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip() {
      return trip_;
    }
    /**
     * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
     */
    public com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder() {
      return trip_;
    }

    public static final int STOP_ID_FIELD_NUMBER = 5;
    private java.lang.Object stopId_;
    /**
     * <code>optional string stop_id = 5;</code>
     */
    public boolean hasStopId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string stop_id = 5;</code>
     */
    public java.lang.String getStopId() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string stop_id = 5;</code>
     */
    public com.google.protobuf.ByteString
        getStopIdBytes() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DIRECTION_ID_FIELD_NUMBER = 6;
    private int directionId_;
    /**
     * <code>optional uint32 direction_id = 6;</code>
     *
     * <pre>
     * Corresponds to trip direction_id in GTFS trips.txt. If provided the
     * route_id must also be provided. This field is still experimental, and
     * subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public boolean hasDirectionId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 direction_id = 6;</code>
     *
     * <pre>
     * Corresponds to trip direction_id in GTFS trips.txt. If provided the
     * route_id must also be provided. This field is still experimental, and
     * subject to change. It may be formally adopted in the future.
     * </pre>
     */
    public int getDirectionId() {
      return directionId_;
    }

    private void initFields() {
      agencyId_ = "";
      routeId_ = "";
      routeType_ = 0;
      trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
      stopId_ = "";
      directionId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasTrip()) {
        if (!getTrip().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.EntitySelector>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getAgencyIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, routeType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, trip_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getStopIdBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, directionId_);
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getAgencyIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, routeType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, trip_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getStopIdBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, directionId_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.EntitySelector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.EntitySelector prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.EntitySelector}
     *
     * <pre>
     * A selector for an entity in a GTFS feed.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.EntitySelector, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.EntitySelector)
        com.google.transit.realtime.GtfsRealtime.EntitySelectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_EntitySelector_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_EntitySelector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.EntitySelector.class, com.google.transit.realtime.GtfsRealtime.EntitySelector.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.EntitySelector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTripFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        agencyId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        routeId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        routeType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (tripBuilder_ == null) {
          trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
        } else {
          tripBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        stopId_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        directionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_EntitySelector_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.EntitySelector getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.EntitySelector.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.EntitySelector build() {
        com.google.transit.realtime.GtfsRealtime.EntitySelector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.EntitySelector buildPartial() {
        com.google.transit.realtime.GtfsRealtime.EntitySelector result = new com.google.transit.realtime.GtfsRealtime.EntitySelector(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.agencyId_ = agencyId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.routeId_ = routeId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.routeType_ = routeType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (tripBuilder_ == null) {
          result.trip_ = trip_;
        } else {
          result.trip_ = tripBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.stopId_ = stopId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.directionId_ = directionId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.EntitySelector) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.EntitySelector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.EntitySelector other) {
        if (other == com.google.transit.realtime.GtfsRealtime.EntitySelector.getDefaultInstance()) return this;
        if (other.hasAgencyId()) {
          bitField0_ |= 0x00000001;
          agencyId_ = other.agencyId_;
          onChanged();
        }
        if (other.hasRouteId()) {
          bitField0_ |= 0x00000002;
          routeId_ = other.routeId_;
          onChanged();
        }
        if (other.hasRouteType()) {
          setRouteType(other.getRouteType());
        }
        if (other.hasTrip()) {
          mergeTrip(other.getTrip());
        }
        if (other.hasStopId()) {
          bitField0_ |= 0x00000010;
          stopId_ = other.stopId_;
          onChanged();
        }
        if (other.hasDirectionId()) {
          setDirectionId(other.getDirectionId());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasTrip()) {
          if (!getTrip().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.EntitySelector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.EntitySelector) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object agencyId_ = "";
      /**
       * <code>optional string agency_id = 1;</code>
       *
       * <pre>
       * The values of the fields should correspond to the appropriate fields in the
       * GTFS feed.
       * At least one specifier must be given. If several are given, then the
       * matching has to apply to all the given specifiers.
       * </pre>
       */
      public boolean hasAgencyId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string agency_id = 1;</code>
       *
       * <pre>
       * The values of the fields should correspond to the appropriate fields in the
       * GTFS feed.
       * At least one specifier must be given. If several are given, then the
       * matching has to apply to all the given specifiers.
       * </pre>
       */
      public java.lang.String getAgencyId() {
        java.lang.Object ref = agencyId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            agencyId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string agency_id = 1;</code>
       *
       * <pre>
       * The values of the fields should correspond to the appropriate fields in the
       * GTFS feed.
       * At least one specifier must be given. If several are given, then the
       * matching has to apply to all the given specifiers.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAgencyIdBytes() {
        java.lang.Object ref = agencyId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          agencyId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string agency_id = 1;</code>
       *
       * <pre>
       * The values of the fields should correspond to the appropriate fields in the
       * GTFS feed.
       * At least one specifier must be given. If several are given, then the
       * matching has to apply to all the given specifiers.
       * </pre>
       */
      public Builder setAgencyId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        agencyId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string agency_id = 1;</code>
       *
       * <pre>
       * The values of the fields should correspond to the appropriate fields in the
       * GTFS feed.
       * At least one specifier must be given. If several are given, then the
       * matching has to apply to all the given specifiers.
       * </pre>
       */
      public Builder clearAgencyId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        agencyId_ = getDefaultInstance().getAgencyId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string agency_id = 1;</code>
       *
       * <pre>
       * The values of the fields should correspond to the appropriate fields in the
       * GTFS feed.
       * At least one specifier must be given. If several are given, then the
       * matching has to apply to all the given specifiers.
       * </pre>
       */
      public Builder setAgencyIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        agencyId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object routeId_ = "";
      /**
       * <code>optional string route_id = 2;</code>
       */
      public boolean hasRouteId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string route_id = 2;</code>
       */
      public java.lang.String getRouteId() {
        java.lang.Object ref = routeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            routeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string route_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getRouteIdBytes() {
        java.lang.Object ref = routeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          routeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string route_id = 2;</code>
       */
      public Builder setRouteId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        routeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_id = 2;</code>
       */
      public Builder clearRouteId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        routeId_ = getDefaultInstance().getRouteId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_id = 2;</code>
       */
      public Builder setRouteIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        routeId_ = value;
        onChanged();
        return this;
      }

      private int routeType_ ;
      /**
       * <code>optional int32 route_type = 3;</code>
       *
       * <pre>
       * corresponds to route_type in GTFS.
       * </pre>
       */
      public boolean hasRouteType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 route_type = 3;</code>
       *
       * <pre>
       * corresponds to route_type in GTFS.
       * </pre>
       */
      public int getRouteType() {
        return routeType_;
      }
      /**
       * <code>optional int32 route_type = 3;</code>
       *
       * <pre>
       * corresponds to route_type in GTFS.
       * </pre>
       */
      public Builder setRouteType(int value) {
        bitField0_ |= 0x00000004;
        routeType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 route_type = 3;</code>
       *
       * <pre>
       * corresponds to route_type in GTFS.
       * </pre>
       */
      public Builder clearRouteType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        routeType_ = 0;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TripDescriptor trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder> tripBuilder_;
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      public boolean hasTrip() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptor getTrip() {
        if (tripBuilder_ == null) {
          return trip_;
        } else {
          return tripBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      public Builder setTrip(com.google.transit.realtime.GtfsRealtime.TripDescriptor value) {
        if (tripBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trip_ = value;
          onChanged();
        } else {
          tripBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      public Builder setTrip(
          com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder builderForValue) {
        if (tripBuilder_ == null) {
          trip_ = builderForValue.build();
          onChanged();
        } else {
          tripBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      public Builder mergeTrip(com.google.transit.realtime.GtfsRealtime.TripDescriptor value) {
        if (tripBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              trip_ != com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance()) {
            trip_ =
              com.google.transit.realtime.GtfsRealtime.TripDescriptor.newBuilder(trip_).mergeFrom(value).buildPartial();
          } else {
            trip_ = value;
          }
          onChanged();
        } else {
          tripBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      public Builder clearTrip() {
        if (tripBuilder_ == null) {
          trip_ = com.google.transit.realtime.GtfsRealtime.TripDescriptor.getDefaultInstance();
          onChanged();
        } else {
          tripBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder getTripBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTripFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      public com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder getTripOrBuilder() {
        if (tripBuilder_ != null) {
          return tripBuilder_.getMessageOrBuilder();
        } else {
          return trip_;
        }
      }
      /**
       * <code>optional .transit_realtime.TripDescriptor trip = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder> 
          getTripFieldBuilder() {
        if (tripBuilder_ == null) {
          tripBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TripDescriptor, com.google.transit.realtime.GtfsRealtime.TripDescriptor.Builder, com.google.transit.realtime.GtfsRealtime.TripDescriptorOrBuilder>(
                  getTrip(),
                  getParentForChildren(),
                  isClean());
          trip_ = null;
        }
        return tripBuilder_;
      }

      private java.lang.Object stopId_ = "";
      /**
       * <code>optional string stop_id = 5;</code>
       */
      public boolean hasStopId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string stop_id = 5;</code>
       */
      public java.lang.String getStopId() {
        java.lang.Object ref = stopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string stop_id = 5;</code>
       */
      public com.google.protobuf.ByteString
          getStopIdBytes() {
        java.lang.Object ref = stopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string stop_id = 5;</code>
       */
      public Builder setStopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        stopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string stop_id = 5;</code>
       */
      public Builder clearStopId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        stopId_ = getDefaultInstance().getStopId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string stop_id = 5;</code>
       */
      public Builder setStopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        stopId_ = value;
        onChanged();
        return this;
      }

      private int directionId_ ;
      /**
       * <code>optional uint32 direction_id = 6;</code>
       *
       * <pre>
       * Corresponds to trip direction_id in GTFS trips.txt. If provided the
       * route_id must also be provided. This field is still experimental, and
       * subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public boolean hasDirectionId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 direction_id = 6;</code>
       *
       * <pre>
       * Corresponds to trip direction_id in GTFS trips.txt. If provided the
       * route_id must also be provided. This field is still experimental, and
       * subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public int getDirectionId() {
        return directionId_;
      }
      /**
       * <code>optional uint32 direction_id = 6;</code>
       *
       * <pre>
       * Corresponds to trip direction_id in GTFS trips.txt. If provided the
       * route_id must also be provided. This field is still experimental, and
       * subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder setDirectionId(int value) {
        bitField0_ |= 0x00000020;
        directionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 direction_id = 6;</code>
       *
       * <pre>
       * Corresponds to trip direction_id in GTFS trips.txt. If provided the
       * route_id must also be provided. This field is still experimental, and
       * subject to change. It may be formally adopted in the future.
       * </pre>
       */
      public Builder clearDirectionId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        directionId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.EntitySelector)
    }

    static {
      defaultInstance = new EntitySelector(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.EntitySelector)
  }

  public interface TranslatedStringOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TranslatedString)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<TranslatedString> {

    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    java.util.List<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation> 
        getTranslationList();
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation getTranslation(int index);
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    int getTranslationCount();
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder> 
        getTranslationOrBuilderList();
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder getTranslationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code transit_realtime.TranslatedString}
   *
   * <pre>
   * An internationalized message containing per-language versions of a snippet of
   * text or a URL.
   * One of the strings from a message will be picked up. The resolution proceeds
   * as follows:
   * 1. If the UI language matches the language code of a translation,
   *    the first matching translation is picked.
   * 2. If a default UI language (e.g., English) matches the language code of a
   *    translation, the first matching translation is picked.
   * 3. If some translation has an unspecified language code, that translation is
   *    picked.
   * </pre>
   */
  public static final class TranslatedString extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        TranslatedString> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TranslatedString)
      TranslatedStringOrBuilder {
    // Use TranslatedString.newBuilder() to construct.
    private TranslatedString(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.TranslatedString, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TranslatedString(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TranslatedString defaultInstance;
    public static TranslatedString getDefaultInstance() {
      return defaultInstance;
    }

    public TranslatedString getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TranslatedString(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                translation_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation>();
                mutable_bitField0_ |= 0x00000001;
              }
              translation_.add(input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          translation_ = java.util.Collections.unmodifiableList(translation_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.TranslatedString.class, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder.class);
    }

    public static com.google.protobuf.Parser<TranslatedString> PARSER =
        new com.google.protobuf.AbstractParser<TranslatedString>() {
      public TranslatedString parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TranslatedString(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TranslatedString> getParserForType() {
      return PARSER;
    }

    public interface TranslationOrBuilder extends
        // @@protoc_insertion_point(interface_extends:transit_realtime.TranslatedString.Translation)
        com.google.protobuf.GeneratedMessage.
            ExtendableMessageOrBuilder<Translation> {

      /**
       * <code>required string text = 1;</code>
       *
       * <pre>
       * A UTF-8 string containing the message.
       * </pre>
       */
      boolean hasText();
      /**
       * <code>required string text = 1;</code>
       *
       * <pre>
       * A UTF-8 string containing the message.
       * </pre>
       */
      java.lang.String getText();
      /**
       * <code>required string text = 1;</code>
       *
       * <pre>
       * A UTF-8 string containing the message.
       * </pre>
       */
      com.google.protobuf.ByteString
          getTextBytes();

      /**
       * <code>optional string language = 2;</code>
       *
       * <pre>
       * BCP-47 language code. Can be omitted if the language is unknown or if
       * no i18n is done at all for the feed. At most one translation is
       * allowed to have an unspecified language tag.
       * </pre>
       */
      boolean hasLanguage();
      /**
       * <code>optional string language = 2;</code>
       *
       * <pre>
       * BCP-47 language code. Can be omitted if the language is unknown or if
       * no i18n is done at all for the feed. At most one translation is
       * allowed to have an unspecified language tag.
       * </pre>
       */
      java.lang.String getLanguage();
      /**
       * <code>optional string language = 2;</code>
       *
       * <pre>
       * BCP-47 language code. Can be omitted if the language is unknown or if
       * no i18n is done at all for the feed. At most one translation is
       * allowed to have an unspecified language tag.
       * </pre>
       */
      com.google.protobuf.ByteString
          getLanguageBytes();
    }
    /**
     * Protobuf type {@code transit_realtime.TranslatedString.Translation}
     */
    public static final class Translation extends
        com.google.protobuf.GeneratedMessage.ExtendableMessage<
          Translation> implements
        // @@protoc_insertion_point(message_implements:transit_realtime.TranslatedString.Translation)
        TranslationOrBuilder {
      // Use Translation.newBuilder() to construct.
      private Translation(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation, ?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Translation(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Translation defaultInstance;
      public static Translation getDefaultInstance() {
        return defaultInstance;
      }

      public Translation getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Translation(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                text_ = bs;
                break;
              }
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                language_ = bs;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_Translation_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_Translation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.class, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder.class);
      }

      public static com.google.protobuf.Parser<Translation> PARSER =
          new com.google.protobuf.AbstractParser<Translation>() {
        public Translation parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Translation(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Translation> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int TEXT_FIELD_NUMBER = 1;
      private java.lang.Object text_;
      /**
       * <code>required string text = 1;</code>
       *
       * <pre>
       * A UTF-8 string containing the message.
       * </pre>
       */
      public boolean hasText() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string text = 1;</code>
       *
       * <pre>
       * A UTF-8 string containing the message.
       * </pre>
       */
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            text_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string text = 1;</code>
       *
       * <pre>
       * A UTF-8 string containing the message.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int LANGUAGE_FIELD_NUMBER = 2;
      private java.lang.Object language_;
      /**
       * <code>optional string language = 2;</code>
       *
       * <pre>
       * BCP-47 language code. Can be omitted if the language is unknown or if
       * no i18n is done at all for the feed. At most one translation is
       * allowed to have an unspecified language tag.
       * </pre>
       */
      public boolean hasLanguage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string language = 2;</code>
       *
       * <pre>
       * BCP-47 language code. Can be omitted if the language is unknown or if
       * no i18n is done at all for the feed. At most one translation is
       * allowed to have an unspecified language tag.
       * </pre>
       */
      public java.lang.String getLanguage() {
        java.lang.Object ref = language_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            language_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string language = 2;</code>
       *
       * <pre>
       * BCP-47 language code. Can be omitted if the language is unknown or if
       * no i18n is done at all for the feed. At most one translation is
       * allowed to have an unspecified language tag.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLanguageBytes() {
        java.lang.Object ref = language_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          language_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        text_ = "";
        language_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasText()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!extensionsAreInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        com.google.protobuf.GeneratedMessage
          .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation>.ExtensionWriter extensionWriter =
            newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getTextBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getLanguageBytes());
        }
        extensionWriter.writeUntil(2000, output);
        extensionWriter.writeUntil(10000, output);
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getTextBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getLanguageBytes());
        }
        size += extensionsSerializedSize();
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code transit_realtime.TranslatedString.Translation}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.ExtendableBuilder<
            com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation, Builder> implements
          // @@protoc_insertion_point(builder_implements:transit_realtime.TranslatedString.Translation)
          com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_Translation_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_Translation_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.class, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder.class);
        }

        // Construct using com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          text_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          language_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_Translation_descriptor;
        }

        public com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation getDefaultInstanceForType() {
          return com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.getDefaultInstance();
        }

        public com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation build() {
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation buildPartial() {
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation result = new com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.text_ = text_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.language_ = language_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation) {
            return mergeFrom((com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation other) {
          if (other == com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.getDefaultInstance()) return this;
          if (other.hasText()) {
            bitField0_ |= 0x00000001;
            text_ = other.text_;
            onChanged();
          }
          if (other.hasLanguage()) {
            bitField0_ |= 0x00000002;
            language_ = other.language_;
            onChanged();
          }
          this.mergeExtensionFields(other);
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasText()) {
            
            return false;
          }
          if (!extensionsAreInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object text_ = "";
        /**
         * <code>required string text = 1;</code>
         *
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         */
        public boolean hasText() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string text = 1;</code>
         *
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         */
        public java.lang.String getText() {
          java.lang.Object ref = text_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              text_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string text = 1;</code>
         *
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getTextBytes() {
          java.lang.Object ref = text_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            text_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string text = 1;</code>
         *
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         */
        public Builder setText(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          text_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string text = 1;</code>
         *
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         */
        public Builder clearText() {
          bitField0_ = (bitField0_ & ~0x00000001);
          text_ = getDefaultInstance().getText();
          onChanged();
          return this;
        }
        /**
         * <code>required string text = 1;</code>
         *
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         */
        public Builder setTextBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          text_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object language_ = "";
        /**
         * <code>optional string language = 2;</code>
         *
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         */
        public boolean hasLanguage() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string language = 2;</code>
         *
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         */
        public java.lang.String getLanguage() {
          java.lang.Object ref = language_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              language_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string language = 2;</code>
         *
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getLanguageBytes() {
          java.lang.Object ref = language_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            language_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string language = 2;</code>
         *
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         */
        public Builder setLanguage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          language_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string language = 2;</code>
         *
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         */
        public Builder clearLanguage() {
          bitField0_ = (bitField0_ & ~0x00000002);
          language_ = getDefaultInstance().getLanguage();
          onChanged();
          return this;
        }
        /**
         * <code>optional string language = 2;</code>
         *
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         */
        public Builder setLanguageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          language_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:transit_realtime.TranslatedString.Translation)
      }

      static {
        defaultInstance = new Translation(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedString.Translation)
    }

    public static final int TRANSLATION_FIELD_NUMBER = 1;
    private java.util.List<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation> translation_;
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    public java.util.List<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation> getTranslationList() {
      return translation_;
    }
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder> 
        getTranslationOrBuilderList() {
      return translation_;
    }
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    public int getTranslationCount() {
      return translation_.size();
    }
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation getTranslation(int index) {
      return translation_.get(index);
    }
    /**
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     *
     * <pre>
     * At least one translation must be provided.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder getTranslationOrBuilder(
        int index) {
      return translation_.get(index);
    }

    private void initFields() {
      translation_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getTranslationCount(); i++) {
        if (!getTranslation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.google.transit.realtime.GtfsRealtime.TranslatedString>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      for (int i = 0; i < translation_.size(); i++) {
        output.writeMessage(1, translation_.get(i));
      }
      extensionWriter.writeUntil(2000, output);
      extensionWriter.writeUntil(10000, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < translation_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, translation_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TranslatedString parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.TranslatedString prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.TranslatedString}
     *
     * <pre>
     * An internationalized message containing per-language versions of a snippet of
     * text or a URL.
     * One of the strings from a message will be picked up. The resolution proceeds
     * as follows:
     * 1. If the UI language matches the language code of a translation,
     *    the first matching translation is picked.
     * 2. If a default UI language (e.g., English) matches the language code of a
     *    translation, the first matching translation is picked.
     * 3. If some translation has an unspecified language code, that translation is
     *    picked.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TranslatedString)
        com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.TranslatedString.class, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTranslationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (translationBuilder_ == null) {
          translation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          translationBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TranslatedString_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.TranslatedString getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.TranslatedString build() {
        com.google.transit.realtime.GtfsRealtime.TranslatedString result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.TranslatedString buildPartial() {
        com.google.transit.realtime.GtfsRealtime.TranslatedString result = new com.google.transit.realtime.GtfsRealtime.TranslatedString(this);
        int from_bitField0_ = bitField0_;
        if (translationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            translation_ = java.util.Collections.unmodifiableList(translation_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.translation_ = translation_;
        } else {
          result.translation_ = translationBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.TranslatedString) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.TranslatedString)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.TranslatedString other) {
        if (other == com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) return this;
        if (translationBuilder_ == null) {
          if (!other.translation_.isEmpty()) {
            if (translation_.isEmpty()) {
              translation_ = other.translation_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTranslationIsMutable();
              translation_.addAll(other.translation_);
            }
            onChanged();
          }
        } else {
          if (!other.translation_.isEmpty()) {
            if (translationBuilder_.isEmpty()) {
              translationBuilder_.dispose();
              translationBuilder_ = null;
              translation_ = other.translation_;
              bitField0_ = (bitField0_ & ~0x00000001);
              translationBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTranslationFieldBuilder() : null;
            } else {
              translationBuilder_.addAllMessages(other.translation_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getTranslationCount(); i++) {
          if (!getTranslation(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.TranslatedString parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.TranslatedString) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation> translation_ =
        java.util.Collections.emptyList();
      private void ensureTranslationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          translation_ = new java.util.ArrayList<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation>(translation_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder> translationBuilder_;

      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation> getTranslationList() {
        if (translationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(translation_);
        } else {
          return translationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public int getTranslationCount() {
        if (translationBuilder_ == null) {
          return translation_.size();
        } else {
          return translationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation getTranslation(int index) {
        if (translationBuilder_ == null) {
          return translation_.get(index);
        } else {
          return translationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder setTranslation(
          int index, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation value) {
        if (translationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTranslationIsMutable();
          translation_.set(index, value);
          onChanged();
        } else {
          translationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder setTranslation(
          int index, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder builderForValue) {
        if (translationBuilder_ == null) {
          ensureTranslationIsMutable();
          translation_.set(index, builderForValue.build());
          onChanged();
        } else {
          translationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder addTranslation(com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation value) {
        if (translationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTranslationIsMutable();
          translation_.add(value);
          onChanged();
        } else {
          translationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder addTranslation(
          int index, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation value) {
        if (translationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTranslationIsMutable();
          translation_.add(index, value);
          onChanged();
        } else {
          translationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder addTranslation(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder builderForValue) {
        if (translationBuilder_ == null) {
          ensureTranslationIsMutable();
          translation_.add(builderForValue.build());
          onChanged();
        } else {
          translationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder addTranslation(
          int index, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder builderForValue) {
        if (translationBuilder_ == null) {
          ensureTranslationIsMutable();
          translation_.add(index, builderForValue.build());
          onChanged();
        } else {
          translationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder addAllTranslation(
          java.lang.Iterable<? extends com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation> values) {
        if (translationBuilder_ == null) {
          ensureTranslationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, translation_);
          onChanged();
        } else {
          translationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder clearTranslation() {
        if (translationBuilder_ == null) {
          translation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          translationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public Builder removeTranslation(int index) {
        if (translationBuilder_ == null) {
          ensureTranslationIsMutable();
          translation_.remove(index);
          onChanged();
        } else {
          translationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder getTranslationBuilder(
          int index) {
        return getTranslationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder getTranslationOrBuilder(
          int index) {
        if (translationBuilder_ == null) {
          return translation_.get(index);  } else {
          return translationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public java.util.List<? extends com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder> 
           getTranslationOrBuilderList() {
        if (translationBuilder_ != null) {
          return translationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(translation_);
        }
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder addTranslationBuilder() {
        return getTranslationFieldBuilder().addBuilder(
            com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder addTranslationBuilder(
          int index) {
        return getTranslationFieldBuilder().addBuilder(
            index, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.getDefaultInstance());
      }
      /**
       * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
       *
       * <pre>
       * At least one translation must be provided.
       * </pre>
       */
      public java.util.List<com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder> 
           getTranslationBuilderList() {
        return getTranslationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder> 
          getTranslationFieldBuilder() {
        if (translationBuilder_ == null) {
          translationBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation, com.google.transit.realtime.GtfsRealtime.TranslatedString.Translation.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedString.TranslationOrBuilder>(
                  translation_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          translation_ = null;
        }
        return translationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.TranslatedString)
    }

    static {
      defaultInstance = new TranslatedString(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedString)
  }

  public interface TripPropertiesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TripProperties)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifies a trip.
     * </pre>
     */
    boolean hasTripId();
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifies a trip.
     * </pre>
     */
    java.lang.String getTripId();
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifies a trip.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTripIdBytes();

    /**
     * <code>required string start_date = 2;</code>
     *
     * <pre>
     * Dates on which the trip will be run in YYYYMMDD format.
     * </pre>
     */
    boolean hasStartDate();
    /**
     * <code>required string start_date = 2;</code>
     *
     * <pre>
     * Dates on which the trip will be run in YYYYMMDD format.
     * </pre>
     */
    java.lang.String getStartDate();
    /**
     * <code>required string start_date = 2;</code>
     *
     * <pre>
     * Dates on which the trip will be run in YYYYMMDD format.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStartDateBytes();

    /**
     * <code>required string start_time = 3;</code>
     *
     * <pre>
     * Departure start time of the trip when it’s duplicated.
     * </pre>
     */
    boolean hasStartTime();
    /**
     * <code>required string start_time = 3;</code>
     *
     * <pre>
     * Departure start time of the trip when it’s duplicated.
     * </pre>
     */
    java.lang.String getStartTime();
    /**
     * <code>required string start_time = 3;</code>
     *
     * <pre>
     * Departure start time of the trip when it’s duplicated.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStartTimeBytes();

    /**
     * <code>optional string route_id = 4;</code>
     *
     * <pre>
     * Refers to a route defined in the GTFS.
     * </pre>
     */
    boolean hasRouteId();
    /**
     * <code>optional string route_id = 4;</code>
     *
     * <pre>
     * Refers to a route defined in the GTFS.
     * </pre>
     */
    java.lang.String getRouteId();
    /**
     * <code>optional string route_id = 4;</code>
     *
     * <pre>
     * Refers to a route defined in the GTFS.
     * </pre>
     */
    com.google.protobuf.ByteString
        getRouteIdBytes();

    /**
     * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    boolean hasTripHeadsign();
    /**
     * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getTripHeadsign();
    /**
     * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripHeadsignOrBuilder();

    /**
     * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders.
     * </pre>
     */
    boolean hasTripShortName();
    /**
     * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getTripShortName();
    /**
     * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripShortNameOrBuilder();

    /**
     * <code>optional string block_id = 7;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    boolean hasBlockId();
    /**
     * <code>optional string block_id = 7;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    java.lang.String getBlockId();
    /**
     * <code>optional string block_id = 7;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    com.google.protobuf.ByteString
        getBlockIdBytes();

    /**
     * <code>optional string shape_id = 8;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    boolean hasShapeId();
    /**
     * <code>optional string shape_id = 8;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    java.lang.String getShapeId();
    /**
     * <code>optional string shape_id = 8;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    com.google.protobuf.ByteString
        getShapeIdBytes();
  }
  /**
   * Protobuf type {@code transit_realtime.TripProperties}
   *
   * <pre>
   * Provides the updated properties for the trip.
   * </pre>
   */
  public static final class TripProperties extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TripProperties)
      TripPropertiesOrBuilder {
    // Use TripProperties.newBuilder() to construct.
    private TripProperties(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TripProperties(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TripProperties defaultInstance;
    public static TripProperties getDefaultInstance() {
      return defaultInstance;
    }

    public TripProperties getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TripProperties(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              tripId_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              startDate_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              startTime_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              routeId_ = bs;
              break;
            }
            case 42: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = tripHeadsign_.toBuilder();
              }
              tripHeadsign_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tripHeadsign_);
                tripHeadsign_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = tripShortName_.toBuilder();
              }
              tripShortName_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tripShortName_);
                tripShortName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              blockId_ = bs;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              shapeId_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripProperties_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripProperties_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.TripProperties.class, com.google.transit.realtime.GtfsRealtime.TripProperties.Builder.class);
    }

    public static com.google.protobuf.Parser<TripProperties> PARSER =
        new com.google.protobuf.AbstractParser<TripProperties>() {
      public TripProperties parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TripProperties(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TripProperties> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TRIP_ID_FIELD_NUMBER = 1;
    private java.lang.Object tripId_;
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifies a trip.
     * </pre>
     */
    public boolean hasTripId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifies a trip.
     * </pre>
     */
    public java.lang.String getTripId() {
      java.lang.Object ref = tripId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tripId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifies a trip.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTripIdBytes() {
      java.lang.Object ref = tripId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tripId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_DATE_FIELD_NUMBER = 2;
    private java.lang.Object startDate_;
    /**
     * <code>required string start_date = 2;</code>
     *
     * <pre>
     * Dates on which the trip will be run in YYYYMMDD format.
     * </pre>
     */
    public boolean hasStartDate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string start_date = 2;</code>
     *
     * <pre>
     * Dates on which the trip will be run in YYYYMMDD format.
     * </pre>
     */
    public java.lang.String getStartDate() {
      java.lang.Object ref = startDate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startDate_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string start_date = 2;</code>
     *
     * <pre>
     * Dates on which the trip will be run in YYYYMMDD format.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStartDateBytes() {
      java.lang.Object ref = startDate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startDate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_TIME_FIELD_NUMBER = 3;
    private java.lang.Object startTime_;
    /**
     * <code>required string start_time = 3;</code>
     *
     * <pre>
     * Departure start time of the trip when it’s duplicated.
     * </pre>
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string start_time = 3;</code>
     *
     * <pre>
     * Departure start time of the trip when it’s duplicated.
     * </pre>
     */
    public java.lang.String getStartTime() {
      java.lang.Object ref = startTime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startTime_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string start_time = 3;</code>
     *
     * <pre>
     * Departure start time of the trip when it’s duplicated.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStartTimeBytes() {
      java.lang.Object ref = startTime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUTE_ID_FIELD_NUMBER = 4;
    private java.lang.Object routeId_;
    /**
     * <code>optional string route_id = 4;</code>
     *
     * <pre>
     * Refers to a route defined in the GTFS.
     * </pre>
     */
    public boolean hasRouteId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string route_id = 4;</code>
     *
     * <pre>
     * Refers to a route defined in the GTFS.
     * </pre>
     */
    public java.lang.String getRouteId() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          routeId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string route_id = 4;</code>
     *
     * <pre>
     * Refers to a route defined in the GTFS.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRouteIdBytes() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        routeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRIP_HEADSIGN_FIELD_NUMBER = 5;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString tripHeadsign_;
    /**
     * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public boolean hasTripHeadsign() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getTripHeadsign() {
      return tripHeadsign_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripHeadsignOrBuilder() {
      return tripHeadsign_;
    }

    public static final int TRIP_SHORT_NAME_FIELD_NUMBER = 6;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString tripShortName_;
    /**
     * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders.
     * </pre>
     */
    public boolean hasTripShortName() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getTripShortName() {
      return tripShortName_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripShortNameOrBuilder() {
      return tripShortName_;
    }

    public static final int BLOCK_ID_FIELD_NUMBER = 7;
    private java.lang.Object blockId_;
    /**
     * <code>optional string block_id = 7;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    public boolean hasBlockId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string block_id = 7;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    public java.lang.String getBlockId() {
      java.lang.Object ref = blockId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          blockId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string block_id = 7;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getBlockIdBytes() {
      java.lang.Object ref = blockId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        blockId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHAPE_ID_FIELD_NUMBER = 8;
    private java.lang.Object shapeId_;
    /**
     * <code>optional string shape_id = 8;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    public boolean hasShapeId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string shape_id = 8;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    public java.lang.String getShapeId() {
      java.lang.Object ref = shapeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          shapeId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string shape_id = 8;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getShapeIdBytes() {
      java.lang.Object ref = shapeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shapeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      tripId_ = "";
      startDate_ = "";
      startTime_ = "";
      routeId_ = "";
      tripHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      tripShortName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      blockId_ = "";
      shapeId_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTripId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStartDate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStartTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasTripHeadsign()) {
        if (!getTripHeadsign().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTripShortName()) {
        if (!getTripShortName().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTripIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getStartDateBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getStartTimeBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, tripHeadsign_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, tripShortName_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, getBlockIdBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getShapeIdBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTripIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getStartDateBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getStartTimeBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, tripHeadsign_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, tripShortName_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getBlockIdBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getShapeIdBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.TripProperties parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.TripProperties prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.TripProperties}
     *
     * <pre>
     * Provides the updated properties for the trip.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TripProperties)
        com.google.transit.realtime.GtfsRealtime.TripPropertiesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripProperties_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripProperties_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.TripProperties.class, com.google.transit.realtime.GtfsRealtime.TripProperties.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.TripProperties.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTripHeadsignFieldBuilder();
          getTripShortNameFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tripId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        startDate_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        startTime_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        routeId_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (tripHeadsignBuilder_ == null) {
          tripHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          tripHeadsignBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (tripShortNameBuilder_ == null) {
          tripShortName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          tripShortNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        blockId_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        shapeId_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_TripProperties_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.TripProperties getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.TripProperties.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.TripProperties build() {
        com.google.transit.realtime.GtfsRealtime.TripProperties result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.TripProperties buildPartial() {
        com.google.transit.realtime.GtfsRealtime.TripProperties result = new com.google.transit.realtime.GtfsRealtime.TripProperties(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tripId_ = tripId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.startDate_ = startDate_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.startTime_ = startTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.routeId_ = routeId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (tripHeadsignBuilder_ == null) {
          result.tripHeadsign_ = tripHeadsign_;
        } else {
          result.tripHeadsign_ = tripHeadsignBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (tripShortNameBuilder_ == null) {
          result.tripShortName_ = tripShortName_;
        } else {
          result.tripShortName_ = tripShortNameBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.blockId_ = blockId_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.shapeId_ = shapeId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.TripProperties) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.TripProperties)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.TripProperties other) {
        if (other == com.google.transit.realtime.GtfsRealtime.TripProperties.getDefaultInstance()) return this;
        if (other.hasTripId()) {
          bitField0_ |= 0x00000001;
          tripId_ = other.tripId_;
          onChanged();
        }
        if (other.hasStartDate()) {
          bitField0_ |= 0x00000002;
          startDate_ = other.startDate_;
          onChanged();
        }
        if (other.hasStartTime()) {
          bitField0_ |= 0x00000004;
          startTime_ = other.startTime_;
          onChanged();
        }
        if (other.hasRouteId()) {
          bitField0_ |= 0x00000008;
          routeId_ = other.routeId_;
          onChanged();
        }
        if (other.hasTripHeadsign()) {
          mergeTripHeadsign(other.getTripHeadsign());
        }
        if (other.hasTripShortName()) {
          mergeTripShortName(other.getTripShortName());
        }
        if (other.hasBlockId()) {
          bitField0_ |= 0x00000040;
          blockId_ = other.blockId_;
          onChanged();
        }
        if (other.hasShapeId()) {
          bitField0_ |= 0x00000080;
          shapeId_ = other.shapeId_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTripId()) {
          
          return false;
        }
        if (!hasStartDate()) {
          
          return false;
        }
        if (!hasStartTime()) {
          
          return false;
        }
        if (hasTripHeadsign()) {
          if (!getTripHeadsign().isInitialized()) {
            
            return false;
          }
        }
        if (hasTripShortName()) {
          if (!getTripShortName().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.TripProperties parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.TripProperties) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object tripId_ = "";
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifies a trip.
       * </pre>
       */
      public boolean hasTripId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifies a trip.
       * </pre>
       */
      public java.lang.String getTripId() {
        java.lang.Object ref = tripId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            tripId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifies a trip.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTripIdBytes() {
        java.lang.Object ref = tripId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tripId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifies a trip.
       * </pre>
       */
      public Builder setTripId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        tripId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifies a trip.
       * </pre>
       */
      public Builder clearTripId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tripId_ = getDefaultInstance().getTripId();
        onChanged();
        return this;
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifies a trip.
       * </pre>
       */
      public Builder setTripIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        tripId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object startDate_ = "";
      /**
       * <code>required string start_date = 2;</code>
       *
       * <pre>
       * Dates on which the trip will be run in YYYYMMDD format.
       * </pre>
       */
      public boolean hasStartDate() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string start_date = 2;</code>
       *
       * <pre>
       * Dates on which the trip will be run in YYYYMMDD format.
       * </pre>
       */
      public java.lang.String getStartDate() {
        java.lang.Object ref = startDate_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            startDate_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string start_date = 2;</code>
       *
       * <pre>
       * Dates on which the trip will be run in YYYYMMDD format.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStartDateBytes() {
        java.lang.Object ref = startDate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startDate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string start_date = 2;</code>
       *
       * <pre>
       * Dates on which the trip will be run in YYYYMMDD format.
       * </pre>
       */
      public Builder setStartDate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        startDate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string start_date = 2;</code>
       *
       * <pre>
       * Dates on which the trip will be run in YYYYMMDD format.
       * </pre>
       */
      public Builder clearStartDate() {
        bitField0_ = (bitField0_ & ~0x00000002);
        startDate_ = getDefaultInstance().getStartDate();
        onChanged();
        return this;
      }
      /**
       * <code>required string start_date = 2;</code>
       *
       * <pre>
       * Dates on which the trip will be run in YYYYMMDD format.
       * </pre>
       */
      public Builder setStartDateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        startDate_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object startTime_ = "";
      /**
       * <code>required string start_time = 3;</code>
       *
       * <pre>
       * Departure start time of the trip when it’s duplicated.
       * </pre>
       */
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string start_time = 3;</code>
       *
       * <pre>
       * Departure start time of the trip when it’s duplicated.
       * </pre>
       */
      public java.lang.String getStartTime() {
        java.lang.Object ref = startTime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            startTime_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string start_time = 3;</code>
       *
       * <pre>
       * Departure start time of the trip when it’s duplicated.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStartTimeBytes() {
        java.lang.Object ref = startTime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startTime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string start_time = 3;</code>
       *
       * <pre>
       * Departure start time of the trip when it’s duplicated.
       * </pre>
       */
      public Builder setStartTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        startTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string start_time = 3;</code>
       *
       * <pre>
       * Departure start time of the trip when it’s duplicated.
       * </pre>
       */
      public Builder clearStartTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        startTime_ = getDefaultInstance().getStartTime();
        onChanged();
        return this;
      }
      /**
       * <code>required string start_time = 3;</code>
       *
       * <pre>
       * Departure start time of the trip when it’s duplicated.
       * </pre>
       */
      public Builder setStartTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        startTime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object routeId_ = "";
      /**
       * <code>optional string route_id = 4;</code>
       *
       * <pre>
       * Refers to a route defined in the GTFS.
       * </pre>
       */
      public boolean hasRouteId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string route_id = 4;</code>
       *
       * <pre>
       * Refers to a route defined in the GTFS.
       * </pre>
       */
      public java.lang.String getRouteId() {
        java.lang.Object ref = routeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            routeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string route_id = 4;</code>
       *
       * <pre>
       * Refers to a route defined in the GTFS.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRouteIdBytes() {
        java.lang.Object ref = routeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          routeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string route_id = 4;</code>
       *
       * <pre>
       * Refers to a route defined in the GTFS.
       * </pre>
       */
      public Builder setRouteId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        routeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_id = 4;</code>
       *
       * <pre>
       * Refers to a route defined in the GTFS.
       * </pre>
       */
      public Builder clearRouteId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        routeId_ = getDefaultInstance().getRouteId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_id = 4;</code>
       *
       * <pre>
       * Refers to a route defined in the GTFS.
       * </pre>
       */
      public Builder setRouteIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        routeId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString tripHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> tripHeadsignBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public boolean hasTripHeadsign() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getTripHeadsign() {
        if (tripHeadsignBuilder_ == null) {
          return tripHeadsign_;
        } else {
          return tripHeadsignBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder setTripHeadsign(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (tripHeadsignBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tripHeadsign_ = value;
          onChanged();
        } else {
          tripHeadsignBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder setTripHeadsign(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (tripHeadsignBuilder_ == null) {
          tripHeadsign_ = builderForValue.build();
          onChanged();
        } else {
          tripHeadsignBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder mergeTripHeadsign(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (tripHeadsignBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              tripHeadsign_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            tripHeadsign_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(tripHeadsign_).mergeFrom(value).buildPartial();
          } else {
            tripHeadsign_ = value;
          }
          onChanged();
        } else {
          tripHeadsignBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder clearTripHeadsign() {
        if (tripHeadsignBuilder_ == null) {
          tripHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          tripHeadsignBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getTripHeadsignBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getTripHeadsignFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripHeadsignOrBuilder() {
        if (tripHeadsignBuilder_ != null) {
          return tripHeadsignBuilder_.getMessageOrBuilder();
        } else {
          return tripHeadsign_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getTripHeadsignFieldBuilder() {
        if (tripHeadsignBuilder_ == null) {
          tripHeadsignBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getTripHeadsign(),
                  getParentForChildren(),
                  isClean());
          tripHeadsign_ = null;
        }
        return tripHeadsignBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString tripShortName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> tripShortNameBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      public boolean hasTripShortName() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getTripShortName() {
        if (tripShortNameBuilder_ == null) {
          return tripShortName_;
        } else {
          return tripShortNameBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      public Builder setTripShortName(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (tripShortNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tripShortName_ = value;
          onChanged();
        } else {
          tripShortNameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      public Builder setTripShortName(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (tripShortNameBuilder_ == null) {
          tripShortName_ = builderForValue.build();
          onChanged();
        } else {
          tripShortNameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      public Builder mergeTripShortName(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (tripShortNameBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              tripShortName_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            tripShortName_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(tripShortName_).mergeFrom(value).buildPartial();
          } else {
            tripShortName_ = value;
          }
          onChanged();
        } else {
          tripShortNameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      public Builder clearTripShortName() {
        if (tripShortNameBuilder_ == null) {
          tripShortName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          tripShortNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getTripShortNameBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getTripShortNameFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripShortNameOrBuilder() {
        if (tripShortNameBuilder_ != null) {
          return tripShortNameBuilder_.getMessageOrBuilder();
        } else {
          return tripShortName_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString trip_short_name = 6;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getTripShortNameFieldBuilder() {
        if (tripShortNameBuilder_ == null) {
          tripShortNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getTripShortName(),
                  getParentForChildren(),
                  isClean());
          tripShortName_ = null;
        }
        return tripShortNameBuilder_;
      }

      private java.lang.Object blockId_ = "";
      /**
       * <code>optional string block_id = 7;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public boolean hasBlockId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string block_id = 7;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public java.lang.String getBlockId() {
        java.lang.Object ref = blockId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            blockId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string block_id = 7;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getBlockIdBytes() {
        java.lang.Object ref = blockId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          blockId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string block_id = 7;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public Builder setBlockId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        blockId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string block_id = 7;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public Builder clearBlockId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        blockId_ = getDefaultInstance().getBlockId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string block_id = 7;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public Builder setBlockIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        blockId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object shapeId_ = "";
      /**
       * <code>optional string shape_id = 8;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public boolean hasShapeId() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string shape_id = 8;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public java.lang.String getShapeId() {
        java.lang.Object ref = shapeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            shapeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string shape_id = 8;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getShapeIdBytes() {
        java.lang.Object ref = shapeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shapeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string shape_id = 8;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public Builder setShapeId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        shapeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string shape_id = 8;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public Builder clearShapeId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        shapeId_ = getDefaultInstance().getShapeId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string shape_id = 8;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public Builder setShapeIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        shapeId_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.TripProperties)
    }

    static {
      defaultInstance = new TripProperties(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TripProperties)
  }

  public interface VehiclePropertiesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.VehicleProperties)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .transit_realtime.VehicleProperties.WheelchairAccessibleStatus wheelchair_accessible = 1 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
     *
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     */
    boolean hasWheelchairAccessible();
    /**
     * <code>optional .transit_realtime.VehicleProperties.WheelchairAccessibleStatus wheelchair_accessible = 1 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
     *
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus getWheelchairAccessible();

    /**
     * <code>optional .transit_realtime.VehicleProperties.BikesAllowedStatus biked_allowed = 2 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
     *
     * <pre>
     * Indicates whether bikes are allowed or not.
     * </pre>
     */
    boolean hasBikedAllowed();
    /**
     * <code>optional .transit_realtime.VehicleProperties.BikesAllowedStatus biked_allowed = 2 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
     *
     * <pre>
     * Indicates whether bikes are allowed or not.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus getBikedAllowed();
  }
  /**
   * Protobuf type {@code transit_realtime.VehicleProperties}
   *
   * <pre>
   *  Provides the updated properties for the vehicle.
   * </pre>
   */
  public static final class VehicleProperties extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.VehicleProperties)
      VehiclePropertiesOrBuilder {
    // Use VehicleProperties.newBuilder() to construct.
    private VehicleProperties(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VehicleProperties(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VehicleProperties defaultInstance;
    public static VehicleProperties getDefaultInstance() {
      return defaultInstance;
    }

    public VehicleProperties getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VehicleProperties(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus value = com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                wheelchairAccessible_ = value;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus value = com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                bikedAllowed_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleProperties_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleProperties_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.VehicleProperties.class, com.google.transit.realtime.GtfsRealtime.VehicleProperties.Builder.class);
    }

    public static com.google.protobuf.Parser<VehicleProperties> PARSER =
        new com.google.protobuf.AbstractParser<VehicleProperties>() {
      public VehicleProperties parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VehicleProperties(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VehicleProperties> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.VehicleProperties.WheelchairAccessibleStatus}
     *
     * <pre>
     * Options for wheelchair_accessible:
     * 0 or empty - No accessibility information for the trip.
     * 1 - Vehicle being used on this particular trip can accommodate at least one rider in a wheelchair.
     * 2 - No riders in wheelchairs can be accommodated on this trip.
     * </pre>
     */
    public enum WheelchairAccessibleStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_WHEELCHAIR_ACCESSIBILITY = 0;</code>
       */
      UNKNOWN_WHEELCHAIR_ACCESSIBILITY(0, 0),
      /**
       * <code>WHEELCHAIR_ACCESSIBLE = 1;</code>
       */
      WHEELCHAIR_ACCESSIBLE(1, 1),
      /**
       * <code>NOT_WHEELCHAIR_ACCESSIBLE = 2;</code>
       */
      NOT_WHEELCHAIR_ACCESSIBLE(2, 2),
      ;

      /**
       * <code>UNKNOWN_WHEELCHAIR_ACCESSIBILITY = 0;</code>
       */
      public static final int UNKNOWN_WHEELCHAIR_ACCESSIBILITY_VALUE = 0;
      /**
       * <code>WHEELCHAIR_ACCESSIBLE = 1;</code>
       */
      public static final int WHEELCHAIR_ACCESSIBLE_VALUE = 1;
      /**
       * <code>NOT_WHEELCHAIR_ACCESSIBLE = 2;</code>
       */
      public static final int NOT_WHEELCHAIR_ACCESSIBLE_VALUE = 2;


      public final int getNumber() { return value; }

      public static WheelchairAccessibleStatus valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
          case 1: return WHEELCHAIR_ACCESSIBLE;
          case 2: return NOT_WHEELCHAIR_ACCESSIBLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WheelchairAccessibleStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<WheelchairAccessibleStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WheelchairAccessibleStatus>() {
              public WheelchairAccessibleStatus findValueByNumber(int number) {
                return WheelchairAccessibleStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDescriptor().getEnumTypes().get(0);
      }

      private static final WheelchairAccessibleStatus[] VALUES = values();

      public static WheelchairAccessibleStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private WheelchairAccessibleStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.VehicleProperties.WheelchairAccessibleStatus)
    }

    /**
     * Protobuf enum {@code transit_realtime.VehicleProperties.BikesAllowedStatus}
     *
     * <pre>
     * Options for biked_allowed:
     *0 or empty - No bike information for the trip.
     *1 - Vehicle being used on this particular trip can accommodate at least one bicycle.
     *2 - No bicycles are allowed on this trip.
     * </pre>
     */
    public enum BikesAllowedStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_BIKES_ALLOWANCE = 0;</code>
       */
      UNKNOWN_BIKES_ALLOWANCE(0, 0),
      /**
       * <code>BIKES_ALLOWED = 1;</code>
       */
      BIKES_ALLOWED(1, 1),
      /**
       * <code>BIKES_NOT_ALLOWED = 2;</code>
       */
      BIKES_NOT_ALLOWED(2, 2),
      ;

      /**
       * <code>UNKNOWN_BIKES_ALLOWANCE = 0;</code>
       */
      public static final int UNKNOWN_BIKES_ALLOWANCE_VALUE = 0;
      /**
       * <code>BIKES_ALLOWED = 1;</code>
       */
      public static final int BIKES_ALLOWED_VALUE = 1;
      /**
       * <code>BIKES_NOT_ALLOWED = 2;</code>
       */
      public static final int BIKES_NOT_ALLOWED_VALUE = 2;


      public final int getNumber() { return value; }

      public static BikesAllowedStatus valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_BIKES_ALLOWANCE;
          case 1: return BIKES_ALLOWED;
          case 2: return BIKES_NOT_ALLOWED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BikesAllowedStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<BikesAllowedStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BikesAllowedStatus>() {
              public BikesAllowedStatus findValueByNumber(int number) {
                return BikesAllowedStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDescriptor().getEnumTypes().get(1);
      }

      private static final BikesAllowedStatus[] VALUES = values();

      public static BikesAllowedStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private BikesAllowedStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.VehicleProperties.BikesAllowedStatus)
    }

    private int bitField0_;
    public static final int WHEELCHAIR_ACCESSIBLE_FIELD_NUMBER = 1;
    private com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus wheelchairAccessible_;
    /**
     * <code>optional .transit_realtime.VehicleProperties.WheelchairAccessibleStatus wheelchair_accessible = 1 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
     *
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     */
    public boolean hasWheelchairAccessible() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .transit_realtime.VehicleProperties.WheelchairAccessibleStatus wheelchair_accessible = 1 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
     *
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus getWheelchairAccessible() {
      return wheelchairAccessible_;
    }

    public static final int BIKED_ALLOWED_FIELD_NUMBER = 2;
    private com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus bikedAllowed_;
    /**
     * <code>optional .transit_realtime.VehicleProperties.BikesAllowedStatus biked_allowed = 2 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
     *
     * <pre>
     * Indicates whether bikes are allowed or not.
     * </pre>
     */
    public boolean hasBikedAllowed() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .transit_realtime.VehicleProperties.BikesAllowedStatus biked_allowed = 2 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
     *
     * <pre>
     * Indicates whether bikes are allowed or not.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus getBikedAllowed() {
      return bikedAllowed_;
    }

    private void initFields() {
      wheelchairAccessible_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus.UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
      bikedAllowed_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus.UNKNOWN_BIKES_ALLOWANCE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, wheelchairAccessible_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, bikedAllowed_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, wheelchairAccessible_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, bikedAllowed_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.VehicleProperties parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.VehicleProperties prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.VehicleProperties}
     *
     * <pre>
     *  Provides the updated properties for the vehicle.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.VehicleProperties)
        com.google.transit.realtime.GtfsRealtime.VehiclePropertiesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleProperties_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleProperties_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.VehicleProperties.class, com.google.transit.realtime.GtfsRealtime.VehicleProperties.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.VehicleProperties.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        wheelchairAccessible_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus.UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
        bitField0_ = (bitField0_ & ~0x00000001);
        bikedAllowed_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus.UNKNOWN_BIKES_ALLOWANCE;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_VehicleProperties_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.VehicleProperties getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.VehicleProperties build() {
        com.google.transit.realtime.GtfsRealtime.VehicleProperties result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.VehicleProperties buildPartial() {
        com.google.transit.realtime.GtfsRealtime.VehicleProperties result = new com.google.transit.realtime.GtfsRealtime.VehicleProperties(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.wheelchairAccessible_ = wheelchairAccessible_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bikedAllowed_ = bikedAllowed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.VehicleProperties) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.VehicleProperties)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.VehicleProperties other) {
        if (other == com.google.transit.realtime.GtfsRealtime.VehicleProperties.getDefaultInstance()) return this;
        if (other.hasWheelchairAccessible()) {
          setWheelchairAccessible(other.getWheelchairAccessible());
        }
        if (other.hasBikedAllowed()) {
          setBikedAllowed(other.getBikedAllowed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.VehicleProperties parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.VehicleProperties) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus wheelchairAccessible_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus.UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
      /**
       * <code>optional .transit_realtime.VehicleProperties.WheelchairAccessibleStatus wheelchair_accessible = 1 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
       *
       * <pre>
       * Indicates wheelchair accessibility.
       * </pre>
       */
      public boolean hasWheelchairAccessible() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties.WheelchairAccessibleStatus wheelchair_accessible = 1 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
       *
       * <pre>
       * Indicates wheelchair accessibility.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus getWheelchairAccessible() {
        return wheelchairAccessible_;
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties.WheelchairAccessibleStatus wheelchair_accessible = 1 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
       *
       * <pre>
       * Indicates wheelchair accessibility.
       * </pre>
       */
      public Builder setWheelchairAccessible(com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        wheelchairAccessible_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties.WheelchairAccessibleStatus wheelchair_accessible = 1 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
       *
       * <pre>
       * Indicates wheelchair accessibility.
       * </pre>
       */
      public Builder clearWheelchairAccessible() {
        bitField0_ = (bitField0_ & ~0x00000001);
        wheelchairAccessible_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.WheelchairAccessibleStatus.UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus bikedAllowed_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus.UNKNOWN_BIKES_ALLOWANCE;
      /**
       * <code>optional .transit_realtime.VehicleProperties.BikesAllowedStatus biked_allowed = 2 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
       *
       * <pre>
       * Indicates whether bikes are allowed or not.
       * </pre>
       */
      public boolean hasBikedAllowed() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties.BikesAllowedStatus biked_allowed = 2 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
       *
       * <pre>
       * Indicates whether bikes are allowed or not.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus getBikedAllowed() {
        return bikedAllowed_;
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties.BikesAllowedStatus biked_allowed = 2 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
       *
       * <pre>
       * Indicates whether bikes are allowed or not.
       * </pre>
       */
      public Builder setBikedAllowed(com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        bikedAllowed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.VehicleProperties.BikesAllowedStatus biked_allowed = 2 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
       *
       * <pre>
       * Indicates whether bikes are allowed or not.
       * </pre>
       */
      public Builder clearBikedAllowed() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bikedAllowed_ = com.google.transit.realtime.GtfsRealtime.VehicleProperties.BikesAllowedStatus.UNKNOWN_BIKES_ALLOWANCE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.VehicleProperties)
    }

    static {
      defaultInstance = new VehicleProperties(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.VehicleProperties)
  }

  public interface StopTimePropertiesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.StopTimeProperties)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string platform_id = 1;</code>
     *
     * <pre>
     * Refers to a stop_id defined in the GTFS.
     * </pre>
     */
    boolean hasPlatformId();
    /**
     * <code>optional string platform_id = 1;</code>
     *
     * <pre>
     * Refers to a stop_id defined in the GTFS.
     * </pre>
     */
    java.lang.String getPlatformId();
    /**
     * <code>optional string platform_id = 1;</code>
     *
     * <pre>
     * Refers to a stop_id defined in the GTFS.
     * </pre>
     */
    com.google.protobuf.ByteString
        getPlatformIdBytes();

    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    boolean hasStopHeadsign();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getStopHeadsign();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopHeadsignOrBuilder();

    /**
     * <code>optional .transit_realtime.StopTimeProperties.PickupType pickup_type = 3 [default = REGULAR_PICKUP];</code>
     *
     * <pre>
     * Indicates pickup method.
     * </pre>
     */
    boolean hasPickupType();
    /**
     * <code>optional .transit_realtime.StopTimeProperties.PickupType pickup_type = 3 [default = REGULAR_PICKUP];</code>
     *
     * <pre>
     * Indicates pickup method.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType getPickupType();

    /**
     * <code>optional .transit_realtime.StopTimeProperties.DropOffType drop_off_type = 4 [default = REGULAR_DROP_OFF];</code>
     *
     * <pre>
     * Indicates drop off method.
     * </pre>
     */
    boolean hasDropOffType();
    /**
     * <code>optional .transit_realtime.StopTimeProperties.DropOffType drop_off_type = 4 [default = REGULAR_DROP_OFF];</code>
     *
     * <pre>
     * Indicates drop off method.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType getDropOffType();

    /**
     * <code>optional float shape_dist_traveled = 5;</code>
     *
     * <pre>
     * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
     * </pre>
     */
    boolean hasShapeDistTraveled();
    /**
     * <code>optional float shape_dist_traveled = 5;</code>
     *
     * <pre>
     * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
     * </pre>
     */
    float getShapeDistTraveled();

    /**
     * <code>optional string stop_id = 6;</code>
     *
     * <pre>
     * Identifies the new serviced stop (defined in the RT-GTFS).
     * </pre>
     */
    boolean hasStopId();
    /**
     * <code>optional string stop_id = 6;</code>
     *
     * <pre>
     * Identifies the new serviced stop (defined in the RT-GTFS).
     * </pre>
     */
    java.lang.String getStopId();
    /**
     * <code>optional string stop_id = 6;</code>
     *
     * <pre>
     * Identifies the new serviced stop (defined in the RT-GTFS).
     * </pre>
     */
    com.google.protobuf.ByteString
        getStopIdBytes();
  }
  /**
   * Protobuf type {@code transit_realtime.StopTimeProperties}
   *
   * <pre>
   * Provides the updated values for the stop time.
   * </pre>
   */
  public static final class StopTimeProperties extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.StopTimeProperties)
      StopTimePropertiesOrBuilder {
    // Use StopTimeProperties.newBuilder() to construct.
    private StopTimeProperties(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StopTimeProperties(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StopTimeProperties defaultInstance;
    public static StopTimeProperties getDefaultInstance() {
      return defaultInstance;
    }

    public StopTimeProperties getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StopTimeProperties(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              platformId_ = bs;
              break;
            }
            case 18: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = stopHeadsign_.toBuilder();
              }
              stopHeadsign_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stopHeadsign_);
                stopHeadsign_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType value = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                pickupType_ = value;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType value = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                dropOffType_ = value;
              }
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              shapeDistTraveled_ = input.readFloat();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              stopId_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTimeProperties_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTimeProperties_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.StopTimeProperties.class, com.google.transit.realtime.GtfsRealtime.StopTimeProperties.Builder.class);
    }

    public static com.google.protobuf.Parser<StopTimeProperties> PARSER =
        new com.google.protobuf.AbstractParser<StopTimeProperties>() {
      public StopTimeProperties parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StopTimeProperties(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StopTimeProperties> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.StopTimeProperties.PickupType}
     *
     * <pre>
     * Valid options for pickup_type:
     * </pre>
     */
    public enum PickupType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REGULAR_PICKUP = 0;</code>
       */
      REGULAR_PICKUP(0, 0),
      /**
       * <code>NO_PICKUP = 1;</code>
       */
      NO_PICKUP(1, 1),
      /**
       * <code>MUST_PHONE_AGENCY_PICKUP = 2;</code>
       */
      MUST_PHONE_AGENCY_PICKUP(2, 2),
      /**
       * <code>MUST_ASK_DRIVER_PICKUP = 3;</code>
       */
      MUST_ASK_DRIVER_PICKUP(3, 3),
      ;

      /**
       * <code>REGULAR_PICKUP = 0;</code>
       */
      public static final int REGULAR_PICKUP_VALUE = 0;
      /**
       * <code>NO_PICKUP = 1;</code>
       */
      public static final int NO_PICKUP_VALUE = 1;
      /**
       * <code>MUST_PHONE_AGENCY_PICKUP = 2;</code>
       */
      public static final int MUST_PHONE_AGENCY_PICKUP_VALUE = 2;
      /**
       * <code>MUST_ASK_DRIVER_PICKUP = 3;</code>
       */
      public static final int MUST_ASK_DRIVER_PICKUP_VALUE = 3;


      public final int getNumber() { return value; }

      public static PickupType valueOf(int value) {
        switch (value) {
          case 0: return REGULAR_PICKUP;
          case 1: return NO_PICKUP;
          case 2: return MUST_PHONE_AGENCY_PICKUP;
          case 3: return MUST_ASK_DRIVER_PICKUP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PickupType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PickupType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PickupType>() {
              public PickupType findValueByNumber(int number) {
                return PickupType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDescriptor().getEnumTypes().get(0);
      }

      private static final PickupType[] VALUES = values();

      public static PickupType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PickupType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.StopTimeProperties.PickupType)
    }

    /**
     * Protobuf enum {@code transit_realtime.StopTimeProperties.DropOffType}
     *
     * <pre>
     * Valid options for drop_off_type:
     * </pre>
     */
    public enum DropOffType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REGULAR_DROP_OFF = 0;</code>
       */
      REGULAR_DROP_OFF(0, 0),
      /**
       * <code>NO_DROP_OFF = 1;</code>
       */
      NO_DROP_OFF(1, 1),
      /**
       * <code>MUST_PHONE_AGENCY_DROP_OFF = 2;</code>
       */
      MUST_PHONE_AGENCY_DROP_OFF(2, 2),
      /**
       * <code>MUST_ASK_DRIVER_DROP_OFF = 3;</code>
       */
      MUST_ASK_DRIVER_DROP_OFF(3, 3),
      ;

      /**
       * <code>REGULAR_DROP_OFF = 0;</code>
       */
      public static final int REGULAR_DROP_OFF_VALUE = 0;
      /**
       * <code>NO_DROP_OFF = 1;</code>
       */
      public static final int NO_DROP_OFF_VALUE = 1;
      /**
       * <code>MUST_PHONE_AGENCY_DROP_OFF = 2;</code>
       */
      public static final int MUST_PHONE_AGENCY_DROP_OFF_VALUE = 2;
      /**
       * <code>MUST_ASK_DRIVER_DROP_OFF = 3;</code>
       */
      public static final int MUST_ASK_DRIVER_DROP_OFF_VALUE = 3;


      public final int getNumber() { return value; }

      public static DropOffType valueOf(int value) {
        switch (value) {
          case 0: return REGULAR_DROP_OFF;
          case 1: return NO_DROP_OFF;
          case 2: return MUST_PHONE_AGENCY_DROP_OFF;
          case 3: return MUST_ASK_DRIVER_DROP_OFF;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DropOffType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DropOffType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DropOffType>() {
              public DropOffType findValueByNumber(int number) {
                return DropOffType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDescriptor().getEnumTypes().get(1);
      }

      private static final DropOffType[] VALUES = values();

      public static DropOffType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DropOffType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.StopTimeProperties.DropOffType)
    }

    private int bitField0_;
    public static final int PLATFORM_ID_FIELD_NUMBER = 1;
    private java.lang.Object platformId_;
    /**
     * <code>optional string platform_id = 1;</code>
     *
     * <pre>
     * Refers to a stop_id defined in the GTFS.
     * </pre>
     */
    public boolean hasPlatformId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string platform_id = 1;</code>
     *
     * <pre>
     * Refers to a stop_id defined in the GTFS.
     * </pre>
     */
    public java.lang.String getPlatformId() {
      java.lang.Object ref = platformId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          platformId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string platform_id = 1;</code>
     *
     * <pre>
     * Refers to a stop_id defined in the GTFS.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPlatformIdBytes() {
      java.lang.Object ref = platformId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        platformId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STOP_HEADSIGN_FIELD_NUMBER = 2;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString stopHeadsign_;
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public boolean hasStopHeadsign() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopHeadsign() {
      return stopHeadsign_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopHeadsignOrBuilder() {
      return stopHeadsign_;
    }

    public static final int PICKUP_TYPE_FIELD_NUMBER = 3;
    private com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType pickupType_;
    /**
     * <code>optional .transit_realtime.StopTimeProperties.PickupType pickup_type = 3 [default = REGULAR_PICKUP];</code>
     *
     * <pre>
     * Indicates pickup method.
     * </pre>
     */
    public boolean hasPickupType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .transit_realtime.StopTimeProperties.PickupType pickup_type = 3 [default = REGULAR_PICKUP];</code>
     *
     * <pre>
     * Indicates pickup method.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType getPickupType() {
      return pickupType_;
    }

    public static final int DROP_OFF_TYPE_FIELD_NUMBER = 4;
    private com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType dropOffType_;
    /**
     * <code>optional .transit_realtime.StopTimeProperties.DropOffType drop_off_type = 4 [default = REGULAR_DROP_OFF];</code>
     *
     * <pre>
     * Indicates drop off method.
     * </pre>
     */
    public boolean hasDropOffType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .transit_realtime.StopTimeProperties.DropOffType drop_off_type = 4 [default = REGULAR_DROP_OFF];</code>
     *
     * <pre>
     * Indicates drop off method.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType getDropOffType() {
      return dropOffType_;
    }

    public static final int SHAPE_DIST_TRAVELED_FIELD_NUMBER = 5;
    private float shapeDistTraveled_;
    /**
     * <code>optional float shape_dist_traveled = 5;</code>
     *
     * <pre>
     * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
     * </pre>
     */
    public boolean hasShapeDistTraveled() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float shape_dist_traveled = 5;</code>
     *
     * <pre>
     * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
     * </pre>
     */
    public float getShapeDistTraveled() {
      return shapeDistTraveled_;
    }

    public static final int STOP_ID_FIELD_NUMBER = 6;
    private java.lang.Object stopId_;
    /**
     * <code>optional string stop_id = 6;</code>
     *
     * <pre>
     * Identifies the new serviced stop (defined in the RT-GTFS).
     * </pre>
     */
    public boolean hasStopId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string stop_id = 6;</code>
     *
     * <pre>
     * Identifies the new serviced stop (defined in the RT-GTFS).
     * </pre>
     */
    public java.lang.String getStopId() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string stop_id = 6;</code>
     *
     * <pre>
     * Identifies the new serviced stop (defined in the RT-GTFS).
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStopIdBytes() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      platformId_ = "";
      stopHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      pickupType_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType.REGULAR_PICKUP;
      dropOffType_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType.REGULAR_DROP_OFF;
      shapeDistTraveled_ = 0F;
      stopId_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasStopHeadsign()) {
        if (!getStopHeadsign().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getPlatformIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, stopHeadsign_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, pickupType_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, dropOffType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, shapeDistTraveled_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getStopIdBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getPlatformIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, stopHeadsign_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, pickupType_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, dropOffType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, shapeDistTraveled_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getStopIdBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTimeProperties parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.StopTimeProperties prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.StopTimeProperties}
     *
     * <pre>
     * Provides the updated values for the stop time.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.StopTimeProperties)
        com.google.transit.realtime.GtfsRealtime.StopTimePropertiesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTimeProperties_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTimeProperties_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.StopTimeProperties.class, com.google.transit.realtime.GtfsRealtime.StopTimeProperties.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.StopTimeProperties.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStopHeadsignFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        platformId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (stopHeadsignBuilder_ == null) {
          stopHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          stopHeadsignBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        pickupType_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType.REGULAR_PICKUP;
        bitField0_ = (bitField0_ & ~0x00000004);
        dropOffType_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType.REGULAR_DROP_OFF;
        bitField0_ = (bitField0_ & ~0x00000008);
        shapeDistTraveled_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        stopId_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTimeProperties_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.StopTimeProperties getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.StopTimeProperties build() {
        com.google.transit.realtime.GtfsRealtime.StopTimeProperties result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.StopTimeProperties buildPartial() {
        com.google.transit.realtime.GtfsRealtime.StopTimeProperties result = new com.google.transit.realtime.GtfsRealtime.StopTimeProperties(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.platformId_ = platformId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (stopHeadsignBuilder_ == null) {
          result.stopHeadsign_ = stopHeadsign_;
        } else {
          result.stopHeadsign_ = stopHeadsignBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pickupType_ = pickupType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.dropOffType_ = dropOffType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.shapeDistTraveled_ = shapeDistTraveled_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.stopId_ = stopId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.StopTimeProperties) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.StopTimeProperties)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.StopTimeProperties other) {
        if (other == com.google.transit.realtime.GtfsRealtime.StopTimeProperties.getDefaultInstance()) return this;
        if (other.hasPlatformId()) {
          bitField0_ |= 0x00000001;
          platformId_ = other.platformId_;
          onChanged();
        }
        if (other.hasStopHeadsign()) {
          mergeStopHeadsign(other.getStopHeadsign());
        }
        if (other.hasPickupType()) {
          setPickupType(other.getPickupType());
        }
        if (other.hasDropOffType()) {
          setDropOffType(other.getDropOffType());
        }
        if (other.hasShapeDistTraveled()) {
          setShapeDistTraveled(other.getShapeDistTraveled());
        }
        if (other.hasStopId()) {
          bitField0_ |= 0x00000020;
          stopId_ = other.stopId_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasStopHeadsign()) {
          if (!getStopHeadsign().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.StopTimeProperties parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.StopTimeProperties) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object platformId_ = "";
      /**
       * <code>optional string platform_id = 1;</code>
       *
       * <pre>
       * Refers to a stop_id defined in the GTFS.
       * </pre>
       */
      public boolean hasPlatformId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string platform_id = 1;</code>
       *
       * <pre>
       * Refers to a stop_id defined in the GTFS.
       * </pre>
       */
      public java.lang.String getPlatformId() {
        java.lang.Object ref = platformId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            platformId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string platform_id = 1;</code>
       *
       * <pre>
       * Refers to a stop_id defined in the GTFS.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPlatformIdBytes() {
        java.lang.Object ref = platformId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          platformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string platform_id = 1;</code>
       *
       * <pre>
       * Refers to a stop_id defined in the GTFS.
       * </pre>
       */
      public Builder setPlatformId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        platformId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string platform_id = 1;</code>
       *
       * <pre>
       * Refers to a stop_id defined in the GTFS.
       * </pre>
       */
      public Builder clearPlatformId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        platformId_ = getDefaultInstance().getPlatformId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string platform_id = 1;</code>
       *
       * <pre>
       * Refers to a stop_id defined in the GTFS.
       * </pre>
       */
      public Builder setPlatformIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        platformId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString stopHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> stopHeadsignBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public boolean hasStopHeadsign() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopHeadsign() {
        if (stopHeadsignBuilder_ == null) {
          return stopHeadsign_;
        } else {
          return stopHeadsignBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder setStopHeadsign(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopHeadsignBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stopHeadsign_ = value;
          onChanged();
        } else {
          stopHeadsignBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder setStopHeadsign(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (stopHeadsignBuilder_ == null) {
          stopHeadsign_ = builderForValue.build();
          onChanged();
        } else {
          stopHeadsignBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder mergeStopHeadsign(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopHeadsignBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              stopHeadsign_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            stopHeadsign_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(stopHeadsign_).mergeFrom(value).buildPartial();
          } else {
            stopHeadsign_ = value;
          }
          onChanged();
        } else {
          stopHeadsignBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder clearStopHeadsign() {
        if (stopHeadsignBuilder_ == null) {
          stopHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          stopHeadsignBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getStopHeadsignBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getStopHeadsignFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopHeadsignOrBuilder() {
        if (stopHeadsignBuilder_ != null) {
          return stopHeadsignBuilder_.getMessageOrBuilder();
        } else {
          return stopHeadsign_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 2;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getStopHeadsignFieldBuilder() {
        if (stopHeadsignBuilder_ == null) {
          stopHeadsignBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getStopHeadsign(),
                  getParentForChildren(),
                  isClean());
          stopHeadsign_ = null;
        }
        return stopHeadsignBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType pickupType_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType.REGULAR_PICKUP;
      /**
       * <code>optional .transit_realtime.StopTimeProperties.PickupType pickup_type = 3 [default = REGULAR_PICKUP];</code>
       *
       * <pre>
       * Indicates pickup method.
       * </pre>
       */
      public boolean hasPickupType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .transit_realtime.StopTimeProperties.PickupType pickup_type = 3 [default = REGULAR_PICKUP];</code>
       *
       * <pre>
       * Indicates pickup method.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType getPickupType() {
        return pickupType_;
      }
      /**
       * <code>optional .transit_realtime.StopTimeProperties.PickupType pickup_type = 3 [default = REGULAR_PICKUP];</code>
       *
       * <pre>
       * Indicates pickup method.
       * </pre>
       */
      public Builder setPickupType(com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        pickupType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.StopTimeProperties.PickupType pickup_type = 3 [default = REGULAR_PICKUP];</code>
       *
       * <pre>
       * Indicates pickup method.
       * </pre>
       */
      public Builder clearPickupType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pickupType_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.PickupType.REGULAR_PICKUP;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType dropOffType_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType.REGULAR_DROP_OFF;
      /**
       * <code>optional .transit_realtime.StopTimeProperties.DropOffType drop_off_type = 4 [default = REGULAR_DROP_OFF];</code>
       *
       * <pre>
       * Indicates drop off method.
       * </pre>
       */
      public boolean hasDropOffType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .transit_realtime.StopTimeProperties.DropOffType drop_off_type = 4 [default = REGULAR_DROP_OFF];</code>
       *
       * <pre>
       * Indicates drop off method.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType getDropOffType() {
        return dropOffType_;
      }
      /**
       * <code>optional .transit_realtime.StopTimeProperties.DropOffType drop_off_type = 4 [default = REGULAR_DROP_OFF];</code>
       *
       * <pre>
       * Indicates drop off method.
       * </pre>
       */
      public Builder setDropOffType(com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        dropOffType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.StopTimeProperties.DropOffType drop_off_type = 4 [default = REGULAR_DROP_OFF];</code>
       *
       * <pre>
       * Indicates drop off method.
       * </pre>
       */
      public Builder clearDropOffType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        dropOffType_ = com.google.transit.realtime.GtfsRealtime.StopTimeProperties.DropOffType.REGULAR_DROP_OFF;
        onChanged();
        return this;
      }

      private float shapeDistTraveled_ ;
      /**
       * <code>optional float shape_dist_traveled = 5;</code>
       *
       * <pre>
       * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
       * </pre>
       */
      public boolean hasShapeDistTraveled() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float shape_dist_traveled = 5;</code>
       *
       * <pre>
       * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
       * </pre>
       */
      public float getShapeDistTraveled() {
        return shapeDistTraveled_;
      }
      /**
       * <code>optional float shape_dist_traveled = 5;</code>
       *
       * <pre>
       * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
       * </pre>
       */
      public Builder setShapeDistTraveled(float value) {
        bitField0_ |= 0x00000010;
        shapeDistTraveled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shape_dist_traveled = 5;</code>
       *
       * <pre>
       * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
       * </pre>
       */
      public Builder clearShapeDistTraveled() {
        bitField0_ = (bitField0_ & ~0x00000010);
        shapeDistTraveled_ = 0F;
        onChanged();
        return this;
      }

      private java.lang.Object stopId_ = "";
      /**
       * <code>optional string stop_id = 6;</code>
       *
       * <pre>
       * Identifies the new serviced stop (defined in the RT-GTFS).
       * </pre>
       */
      public boolean hasStopId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string stop_id = 6;</code>
       *
       * <pre>
       * Identifies the new serviced stop (defined in the RT-GTFS).
       * </pre>
       */
      public java.lang.String getStopId() {
        java.lang.Object ref = stopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string stop_id = 6;</code>
       *
       * <pre>
       * Identifies the new serviced stop (defined in the RT-GTFS).
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStopIdBytes() {
        java.lang.Object ref = stopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string stop_id = 6;</code>
       *
       * <pre>
       * Identifies the new serviced stop (defined in the RT-GTFS).
       * </pre>
       */
      public Builder setStopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        stopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string stop_id = 6;</code>
       *
       * <pre>
       * Identifies the new serviced stop (defined in the RT-GTFS).
       * </pre>
       */
      public Builder clearStopId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        stopId_ = getDefaultInstance().getStopId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string stop_id = 6;</code>
       *
       * <pre>
       * Identifies the new serviced stop (defined in the RT-GTFS).
       * </pre>
       */
      public Builder setStopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        stopId_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.StopTimeProperties)
    }

    static {
      defaultInstance = new StopTimeProperties(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.StopTimeProperties)
  }

  public interface TripOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.Trip)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
     * </pre>
     */
    boolean hasTripId();
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
     * </pre>
     */
    java.lang.String getTripId();
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTripIdBytes();

    /**
     * <code>optional string route_id = 2;</code>
     *
     * <pre>
     * Identifies a route.
     * </pre>
     */
    boolean hasRouteId();
    /**
     * <code>optional string route_id = 2;</code>
     *
     * <pre>
     * Identifies a route.
     * </pre>
     */
    java.lang.String getRouteId();
    /**
     * <code>optional string route_id = 2;</code>
     *
     * <pre>
     * Identifies a route.
     * </pre>
     */
    com.google.protobuf.ByteString
        getRouteIdBytes();

    /**
     * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    boolean hasTripHeadsign();
    /**
     * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getTripHeadsign();
    /**
     * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripHeadsignOrBuilder();

    /**
     * <code>required string trip_short_name = 4;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
     * </pre>
     */
    boolean hasTripShortName();
    /**
     * <code>required string trip_short_name = 4;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
     * </pre>
     */
    java.lang.String getTripShortName();
    /**
     * <code>required string trip_short_name = 4;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
     * </pre>
     */
    com.google.protobuf.ByteString
        getTripShortNameBytes();

    /**
     * <code>optional int64 direction_id = 5;</code>
     *
     * <pre>
     * Indicates the direction of travel for a trip.
     * </pre>
     */
    boolean hasDirectionId();
    /**
     * <code>optional int64 direction_id = 5;</code>
     *
     * <pre>
     * Indicates the direction of travel for a trip.
     * </pre>
     */
    long getDirectionId();

    /**
     * <code>optional string block_id = 6;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    boolean hasBlockId();
    /**
     * <code>optional string block_id = 6;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    java.lang.String getBlockId();
    /**
     * <code>optional string block_id = 6;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    com.google.protobuf.ByteString
        getBlockIdBytes();

    /**
     * <code>optional string shape_id = 7;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    boolean hasShapeId();
    /**
     * <code>optional string shape_id = 7;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    java.lang.String getShapeId();
    /**
     * <code>optional string shape_id = 7;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    com.google.protobuf.ByteString
        getShapeIdBytes();

    /**
     * <code>optional .transit_realtime.Trip.WheelchairAccessibleStatus wheelchair_accessible = 8 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
     *
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     */
    boolean hasWheelchairAccessible();
    /**
     * <code>optional .transit_realtime.Trip.WheelchairAccessibleStatus wheelchair_accessible = 8 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
     *
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus getWheelchairAccessible();

    /**
     * <code>optional .transit_realtime.Trip.BikesAllowedStatus biked_allowed = 9 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
     *
     * <pre>
     * Indicates whether bikes are allowed or not.
     * </pre>
     */
    boolean hasBikedAllowed();
    /**
     * <code>optional .transit_realtime.Trip.BikesAllowedStatus biked_allowed = 9 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
     *
     * <pre>
     * Indicates whether bikes are allowed or not.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus getBikedAllowed();

    /**
     * <code>repeated string replaces_trip_id = 10;</code>
     *
     * <pre>
     *  Defines which trips are being replaced by this trip.
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getReplacesTripIdList();
    /**
     * <code>repeated string replaces_trip_id = 10;</code>
     *
     * <pre>
     *  Defines which trips are being replaced by this trip.
     * </pre>
     */
    int getReplacesTripIdCount();
    /**
     * <code>repeated string replaces_trip_id = 10;</code>
     *
     * <pre>
     *  Defines which trips are being replaced by this trip.
     * </pre>
     */
    java.lang.String getReplacesTripId(int index);
    /**
     * <code>repeated string replaces_trip_id = 10;</code>
     *
     * <pre>
     *  Defines which trips are being replaced by this trip.
     * </pre>
     */
    com.google.protobuf.ByteString
        getReplacesTripIdBytes(int index);
  }
  /**
   * Protobuf type {@code transit_realtime.Trip}
   *
   * <pre>
   * Describes new trips.
   * </pre>
   */
  public static final class Trip extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.Trip)
      TripOrBuilder {
    // Use Trip.newBuilder() to construct.
    private Trip(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Trip(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Trip defaultInstance;
    public static Trip getDefaultInstance() {
      return defaultInstance;
    }

    public Trip getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Trip(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              tripId_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              routeId_ = bs;
              break;
            }
            case 26: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = tripHeadsign_.toBuilder();
              }
              tripHeadsign_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tripHeadsign_);
                tripHeadsign_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              tripShortName_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              directionId_ = input.readInt64();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              blockId_ = bs;
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              shapeId_ = bs;
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus value = com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                wheelchairAccessible_ = value;
              }
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus value = com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000100;
                bikedAllowed_ = value;
              }
              break;
            }
            case 82: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                replacesTripId_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000200;
              }
              replacesTripId_.add(bs);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          replacesTripId_ = replacesTripId_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Trip_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Trip_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.Trip.class, com.google.transit.realtime.GtfsRealtime.Trip.Builder.class);
    }

    public static com.google.protobuf.Parser<Trip> PARSER =
        new com.google.protobuf.AbstractParser<Trip>() {
      public Trip parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Trip(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Trip> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.Trip.WheelchairAccessibleStatus}
     *
     * <pre>
     * Options for wheelchair_accessible:
     * 0 or empty - No accessibility information for the trip.
     * 1 - Vehicle being used on this particular trip can accommodate at least one rider in a wheelchair.
     * 2 - No riders in wheelchairs can be accommodated on this trip.
     * </pre>
     */
    public enum WheelchairAccessibleStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_WHEELCHAIR_ACCESSIBILITY = 0;</code>
       */
      UNKNOWN_WHEELCHAIR_ACCESSIBILITY(0, 0),
      /**
       * <code>WHEELCHAIR_ACCESSIBLE = 1;</code>
       */
      WHEELCHAIR_ACCESSIBLE(1, 1),
      /**
       * <code>NOT_WHEELCHAIR_ACCESSIBLE = 2;</code>
       */
      NOT_WHEELCHAIR_ACCESSIBLE(2, 2),
      ;

      /**
       * <code>UNKNOWN_WHEELCHAIR_ACCESSIBILITY = 0;</code>
       */
      public static final int UNKNOWN_WHEELCHAIR_ACCESSIBILITY_VALUE = 0;
      /**
       * <code>WHEELCHAIR_ACCESSIBLE = 1;</code>
       */
      public static final int WHEELCHAIR_ACCESSIBLE_VALUE = 1;
      /**
       * <code>NOT_WHEELCHAIR_ACCESSIBLE = 2;</code>
       */
      public static final int NOT_WHEELCHAIR_ACCESSIBLE_VALUE = 2;


      public final int getNumber() { return value; }

      public static WheelchairAccessibleStatus valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
          case 1: return WHEELCHAIR_ACCESSIBLE;
          case 2: return NOT_WHEELCHAIR_ACCESSIBLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WheelchairAccessibleStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<WheelchairAccessibleStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WheelchairAccessibleStatus>() {
              public WheelchairAccessibleStatus findValueByNumber(int number) {
                return WheelchairAccessibleStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.Trip.getDescriptor().getEnumTypes().get(0);
      }

      private static final WheelchairAccessibleStatus[] VALUES = values();

      public static WheelchairAccessibleStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private WheelchairAccessibleStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.Trip.WheelchairAccessibleStatus)
    }

    /**
     * Protobuf enum {@code transit_realtime.Trip.BikesAllowedStatus}
     *
     * <pre>
     * Options for biked_allowed:
     * 0 or empty - No bike information for the trip.
     * 1 - Vehicle being used on this particular trip can accommodate at least one bicycle.
     * 2 - No bicycles are allowed on this trip.
     * </pre>
     */
    public enum BikesAllowedStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_BIKES_ALLOWANCE = 0;</code>
       */
      UNKNOWN_BIKES_ALLOWANCE(0, 0),
      /**
       * <code>BIKES_ALLOWED = 1;</code>
       */
      BIKES_ALLOWED(1, 1),
      /**
       * <code>BIKES_NOT_ALLOWED = 2;</code>
       */
      BIKES_NOT_ALLOWED(2, 2),
      ;

      /**
       * <code>UNKNOWN_BIKES_ALLOWANCE = 0;</code>
       */
      public static final int UNKNOWN_BIKES_ALLOWANCE_VALUE = 0;
      /**
       * <code>BIKES_ALLOWED = 1;</code>
       */
      public static final int BIKES_ALLOWED_VALUE = 1;
      /**
       * <code>BIKES_NOT_ALLOWED = 2;</code>
       */
      public static final int BIKES_NOT_ALLOWED_VALUE = 2;


      public final int getNumber() { return value; }

      public static BikesAllowedStatus valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_BIKES_ALLOWANCE;
          case 1: return BIKES_ALLOWED;
          case 2: return BIKES_NOT_ALLOWED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BikesAllowedStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<BikesAllowedStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BikesAllowedStatus>() {
              public BikesAllowedStatus findValueByNumber(int number) {
                return BikesAllowedStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.Trip.getDescriptor().getEnumTypes().get(1);
      }

      private static final BikesAllowedStatus[] VALUES = values();

      public static BikesAllowedStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private BikesAllowedStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.Trip.BikesAllowedStatus)
    }

    private int bitField0_;
    public static final int TRIP_ID_FIELD_NUMBER = 1;
    private java.lang.Object tripId_;
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
     * </pre>
     */
    public boolean hasTripId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
     * </pre>
     */
    public java.lang.String getTripId() {
      java.lang.Object ref = tripId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tripId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string trip_id = 1;</code>
     *
     * <pre>
     * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTripIdBytes() {
      java.lang.Object ref = tripId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tripId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUTE_ID_FIELD_NUMBER = 2;
    private java.lang.Object routeId_;
    /**
     * <code>optional string route_id = 2;</code>
     *
     * <pre>
     * Identifies a route.
     * </pre>
     */
    public boolean hasRouteId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string route_id = 2;</code>
     *
     * <pre>
     * Identifies a route.
     * </pre>
     */
    public java.lang.String getRouteId() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          routeId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string route_id = 2;</code>
     *
     * <pre>
     * Identifies a route.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRouteIdBytes() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        routeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRIP_HEADSIGN_FIELD_NUMBER = 3;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString tripHeadsign_;
    /**
     * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public boolean hasTripHeadsign() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getTripHeadsign() {
      return tripHeadsign_;
    }
    /**
     * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripHeadsignOrBuilder() {
      return tripHeadsign_;
    }

    public static final int TRIP_SHORT_NAME_FIELD_NUMBER = 4;
    private java.lang.Object tripShortName_;
    /**
     * <code>required string trip_short_name = 4;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
     * </pre>
     */
    public boolean hasTripShortName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string trip_short_name = 4;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
     * </pre>
     */
    public java.lang.String getTripShortName() {
      java.lang.Object ref = tripShortName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tripShortName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string trip_short_name = 4;</code>
     *
     * <pre>
     * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTripShortNameBytes() {
      java.lang.Object ref = tripShortName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tripShortName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DIRECTION_ID_FIELD_NUMBER = 5;
    private long directionId_;
    /**
     * <code>optional int64 direction_id = 5;</code>
     *
     * <pre>
     * Indicates the direction of travel for a trip.
     * </pre>
     */
    public boolean hasDirectionId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int64 direction_id = 5;</code>
     *
     * <pre>
     * Indicates the direction of travel for a trip.
     * </pre>
     */
    public long getDirectionId() {
      return directionId_;
    }

    public static final int BLOCK_ID_FIELD_NUMBER = 6;
    private java.lang.Object blockId_;
    /**
     * <code>optional string block_id = 6;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    public boolean hasBlockId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string block_id = 6;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    public java.lang.String getBlockId() {
      java.lang.Object ref = blockId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          blockId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string block_id = 6;</code>
     *
     * <pre>
     * Identifies the block to which the trip belongs.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getBlockIdBytes() {
      java.lang.Object ref = blockId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        blockId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHAPE_ID_FIELD_NUMBER = 7;
    private java.lang.Object shapeId_;
    /**
     * <code>optional string shape_id = 7;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    public boolean hasShapeId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string shape_id = 7;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    public java.lang.String getShapeId() {
      java.lang.Object ref = shapeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          shapeId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string shape_id = 7;</code>
     *
     * <pre>
     * Identifies a geospatial shape describing the vehicle travel path for a trip.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getShapeIdBytes() {
      java.lang.Object ref = shapeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shapeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int WHEELCHAIR_ACCESSIBLE_FIELD_NUMBER = 8;
    private com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus wheelchairAccessible_;
    /**
     * <code>optional .transit_realtime.Trip.WheelchairAccessibleStatus wheelchair_accessible = 8 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
     *
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     */
    public boolean hasWheelchairAccessible() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .transit_realtime.Trip.WheelchairAccessibleStatus wheelchair_accessible = 8 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
     *
     * <pre>
     * Indicates wheelchair accessibility.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus getWheelchairAccessible() {
      return wheelchairAccessible_;
    }

    public static final int BIKED_ALLOWED_FIELD_NUMBER = 9;
    private com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus bikedAllowed_;
    /**
     * <code>optional .transit_realtime.Trip.BikesAllowedStatus biked_allowed = 9 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
     *
     * <pre>
     * Indicates whether bikes are allowed or not.
     * </pre>
     */
    public boolean hasBikedAllowed() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .transit_realtime.Trip.BikesAllowedStatus biked_allowed = 9 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
     *
     * <pre>
     * Indicates whether bikes are allowed or not.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus getBikedAllowed() {
      return bikedAllowed_;
    }

    public static final int REPLACES_TRIP_ID_FIELD_NUMBER = 10;
    private com.google.protobuf.LazyStringList replacesTripId_;
    /**
     * <code>repeated string replaces_trip_id = 10;</code>
     *
     * <pre>
     *  Defines which trips are being replaced by this trip.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getReplacesTripIdList() {
      return replacesTripId_;
    }
    /**
     * <code>repeated string replaces_trip_id = 10;</code>
     *
     * <pre>
     *  Defines which trips are being replaced by this trip.
     * </pre>
     */
    public int getReplacesTripIdCount() {
      return replacesTripId_.size();
    }
    /**
     * <code>repeated string replaces_trip_id = 10;</code>
     *
     * <pre>
     *  Defines which trips are being replaced by this trip.
     * </pre>
     */
    public java.lang.String getReplacesTripId(int index) {
      return replacesTripId_.get(index);
    }
    /**
     * <code>repeated string replaces_trip_id = 10;</code>
     *
     * <pre>
     *  Defines which trips are being replaced by this trip.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getReplacesTripIdBytes(int index) {
      return replacesTripId_.getByteString(index);
    }

    private void initFields() {
      tripId_ = "";
      routeId_ = "";
      tripHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      tripShortName_ = "";
      directionId_ = 0L;
      blockId_ = "";
      shapeId_ = "";
      wheelchairAccessible_ = com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus.UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
      bikedAllowed_ = com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus.UNKNOWN_BIKES_ALLOWANCE;
      replacesTripId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTripId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTripHeadsign()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTripShortName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTripHeadsign().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTripIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, tripHeadsign_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getTripShortNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(5, directionId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getBlockIdBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, getShapeIdBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, wheelchairAccessible_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(9, bikedAllowed_.getNumber());
      }
      for (int i = 0; i < replacesTripId_.size(); i++) {
        output.writeBytes(10, replacesTripId_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTripIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, tripHeadsign_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getTripShortNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, directionId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getBlockIdBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getShapeIdBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, wheelchairAccessible_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, bikedAllowed_.getNumber());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < replacesTripId_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(replacesTripId_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getReplacesTripIdList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.Trip parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Trip parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.Trip prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.Trip}
     *
     * <pre>
     * Describes new trips.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.Trip)
        com.google.transit.realtime.GtfsRealtime.TripOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Trip_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Trip_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.Trip.class, com.google.transit.realtime.GtfsRealtime.Trip.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.Trip.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTripHeadsignFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tripId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        routeId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (tripHeadsignBuilder_ == null) {
          tripHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          tripHeadsignBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        tripShortName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        directionId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        blockId_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        shapeId_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        wheelchairAccessible_ = com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus.UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
        bitField0_ = (bitField0_ & ~0x00000080);
        bikedAllowed_ = com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus.UNKNOWN_BIKES_ALLOWANCE;
        bitField0_ = (bitField0_ & ~0x00000100);
        replacesTripId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Trip_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.Trip getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.Trip.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.Trip build() {
        com.google.transit.realtime.GtfsRealtime.Trip result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.Trip buildPartial() {
        com.google.transit.realtime.GtfsRealtime.Trip result = new com.google.transit.realtime.GtfsRealtime.Trip(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tripId_ = tripId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.routeId_ = routeId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (tripHeadsignBuilder_ == null) {
          result.tripHeadsign_ = tripHeadsign_;
        } else {
          result.tripHeadsign_ = tripHeadsignBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tripShortName_ = tripShortName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.directionId_ = directionId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.blockId_ = blockId_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.shapeId_ = shapeId_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.wheelchairAccessible_ = wheelchairAccessible_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.bikedAllowed_ = bikedAllowed_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          replacesTripId_ = replacesTripId_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.replacesTripId_ = replacesTripId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.Trip) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.Trip)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.Trip other) {
        if (other == com.google.transit.realtime.GtfsRealtime.Trip.getDefaultInstance()) return this;
        if (other.hasTripId()) {
          bitField0_ |= 0x00000001;
          tripId_ = other.tripId_;
          onChanged();
        }
        if (other.hasRouteId()) {
          bitField0_ |= 0x00000002;
          routeId_ = other.routeId_;
          onChanged();
        }
        if (other.hasTripHeadsign()) {
          mergeTripHeadsign(other.getTripHeadsign());
        }
        if (other.hasTripShortName()) {
          bitField0_ |= 0x00000008;
          tripShortName_ = other.tripShortName_;
          onChanged();
        }
        if (other.hasDirectionId()) {
          setDirectionId(other.getDirectionId());
        }
        if (other.hasBlockId()) {
          bitField0_ |= 0x00000020;
          blockId_ = other.blockId_;
          onChanged();
        }
        if (other.hasShapeId()) {
          bitField0_ |= 0x00000040;
          shapeId_ = other.shapeId_;
          onChanged();
        }
        if (other.hasWheelchairAccessible()) {
          setWheelchairAccessible(other.getWheelchairAccessible());
        }
        if (other.hasBikedAllowed()) {
          setBikedAllowed(other.getBikedAllowed());
        }
        if (!other.replacesTripId_.isEmpty()) {
          if (replacesTripId_.isEmpty()) {
            replacesTripId_ = other.replacesTripId_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureReplacesTripIdIsMutable();
            replacesTripId_.addAll(other.replacesTripId_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTripId()) {
          
          return false;
        }
        if (!hasTripHeadsign()) {
          
          return false;
        }
        if (!hasTripShortName()) {
          
          return false;
        }
        if (!getTripHeadsign().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.Trip parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.Trip) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object tripId_ = "";
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
       * </pre>
       */
      public boolean hasTripId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
       * </pre>
       */
      public java.lang.String getTripId() {
        java.lang.Object ref = tripId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            tripId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTripIdBytes() {
        java.lang.Object ref = tripId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tripId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
       * </pre>
       */
      public Builder setTripId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        tripId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
       * </pre>
       */
      public Builder clearTripId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tripId_ = getDefaultInstance().getTripId();
        onChanged();
        return this;
      }
      /**
       * <code>required string trip_id = 1;</code>
       *
       * <pre>
       * Identifier of the trip. Must be different than any trip_id defined in the GTFS.
       * </pre>
       */
      public Builder setTripIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        tripId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object routeId_ = "";
      /**
       * <code>optional string route_id = 2;</code>
       *
       * <pre>
       * Identifies a route.
       * </pre>
       */
      public boolean hasRouteId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string route_id = 2;</code>
       *
       * <pre>
       * Identifies a route.
       * </pre>
       */
      public java.lang.String getRouteId() {
        java.lang.Object ref = routeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            routeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string route_id = 2;</code>
       *
       * <pre>
       * Identifies a route.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRouteIdBytes() {
        java.lang.Object ref = routeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          routeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string route_id = 2;</code>
       *
       * <pre>
       * Identifies a route.
       * </pre>
       */
      public Builder setRouteId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        routeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_id = 2;</code>
       *
       * <pre>
       * Identifies a route.
       * </pre>
       */
      public Builder clearRouteId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        routeId_ = getDefaultInstance().getRouteId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_id = 2;</code>
       *
       * <pre>
       * Identifies a route.
       * </pre>
       */
      public Builder setRouteIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        routeId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString tripHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> tripHeadsignBuilder_;
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public boolean hasTripHeadsign() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getTripHeadsign() {
        if (tripHeadsignBuilder_ == null) {
          return tripHeadsign_;
        } else {
          return tripHeadsignBuilder_.getMessage();
        }
      }
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder setTripHeadsign(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (tripHeadsignBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tripHeadsign_ = value;
          onChanged();
        } else {
          tripHeadsignBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder setTripHeadsign(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (tripHeadsignBuilder_ == null) {
          tripHeadsign_ = builderForValue.build();
          onChanged();
        } else {
          tripHeadsignBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder mergeTripHeadsign(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (tripHeadsignBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              tripHeadsign_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            tripHeadsign_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(tripHeadsign_).mergeFrom(value).buildPartial();
          } else {
            tripHeadsign_ = value;
          }
          onChanged();
        } else {
          tripHeadsignBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder clearTripHeadsign() {
        if (tripHeadsignBuilder_ == null) {
          tripHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          tripHeadsignBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getTripHeadsignBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTripHeadsignFieldBuilder().getBuilder();
      }
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getTripHeadsignOrBuilder() {
        if (tripHeadsignBuilder_ != null) {
          return tripHeadsignBuilder_.getMessageOrBuilder();
        } else {
          return tripHeadsign_;
        }
      }
      /**
       * <code>required .transit_realtime.TranslatedString trip_headsign = 3;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getTripHeadsignFieldBuilder() {
        if (tripHeadsignBuilder_ == null) {
          tripHeadsignBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getTripHeadsign(),
                  getParentForChildren(),
                  isClean());
          tripHeadsign_ = null;
        }
        return tripHeadsignBuilder_;
      }

      private java.lang.Object tripShortName_ = "";
      /**
       * <code>required string trip_short_name = 4;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
       * </pre>
       */
      public boolean hasTripShortName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string trip_short_name = 4;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
       * </pre>
       */
      public java.lang.String getTripShortName() {
        java.lang.Object ref = tripShortName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            tripShortName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string trip_short_name = 4;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTripShortNameBytes() {
        java.lang.Object ref = tripShortName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tripShortName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string trip_short_name = 4;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
       * </pre>
       */
      public Builder setTripShortName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        tripShortName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string trip_short_name = 4;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
       * </pre>
       */
      public Builder clearTripShortName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        tripShortName_ = getDefaultInstance().getTripShortName();
        onChanged();
        return this;
      }
      /**
       * <code>required string trip_short_name = 4;</code>
       *
       * <pre>
       * Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trip
       * </pre>
       */
      public Builder setTripShortNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        tripShortName_ = value;
        onChanged();
        return this;
      }

      private long directionId_ ;
      /**
       * <code>optional int64 direction_id = 5;</code>
       *
       * <pre>
       * Indicates the direction of travel for a trip.
       * </pre>
       */
      public boolean hasDirectionId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int64 direction_id = 5;</code>
       *
       * <pre>
       * Indicates the direction of travel for a trip.
       * </pre>
       */
      public long getDirectionId() {
        return directionId_;
      }
      /**
       * <code>optional int64 direction_id = 5;</code>
       *
       * <pre>
       * Indicates the direction of travel for a trip.
       * </pre>
       */
      public Builder setDirectionId(long value) {
        bitField0_ |= 0x00000010;
        directionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 direction_id = 5;</code>
       *
       * <pre>
       * Indicates the direction of travel for a trip.
       * </pre>
       */
      public Builder clearDirectionId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        directionId_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object blockId_ = "";
      /**
       * <code>optional string block_id = 6;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public boolean hasBlockId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string block_id = 6;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public java.lang.String getBlockId() {
        java.lang.Object ref = blockId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            blockId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string block_id = 6;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getBlockIdBytes() {
        java.lang.Object ref = blockId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          blockId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string block_id = 6;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public Builder setBlockId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        blockId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string block_id = 6;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public Builder clearBlockId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        blockId_ = getDefaultInstance().getBlockId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string block_id = 6;</code>
       *
       * <pre>
       * Identifies the block to which the trip belongs.
       * </pre>
       */
      public Builder setBlockIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        blockId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object shapeId_ = "";
      /**
       * <code>optional string shape_id = 7;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public boolean hasShapeId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string shape_id = 7;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public java.lang.String getShapeId() {
        java.lang.Object ref = shapeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            shapeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string shape_id = 7;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getShapeIdBytes() {
        java.lang.Object ref = shapeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shapeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string shape_id = 7;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public Builder setShapeId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        shapeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string shape_id = 7;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public Builder clearShapeId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        shapeId_ = getDefaultInstance().getShapeId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string shape_id = 7;</code>
       *
       * <pre>
       * Identifies a geospatial shape describing the vehicle travel path for a trip.
       * </pre>
       */
      public Builder setShapeIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        shapeId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus wheelchairAccessible_ = com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus.UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
      /**
       * <code>optional .transit_realtime.Trip.WheelchairAccessibleStatus wheelchair_accessible = 8 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
       *
       * <pre>
       * Indicates wheelchair accessibility.
       * </pre>
       */
      public boolean hasWheelchairAccessible() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .transit_realtime.Trip.WheelchairAccessibleStatus wheelchair_accessible = 8 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
       *
       * <pre>
       * Indicates wheelchair accessibility.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus getWheelchairAccessible() {
        return wheelchairAccessible_;
      }
      /**
       * <code>optional .transit_realtime.Trip.WheelchairAccessibleStatus wheelchair_accessible = 8 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
       *
       * <pre>
       * Indicates wheelchair accessibility.
       * </pre>
       */
      public Builder setWheelchairAccessible(com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        wheelchairAccessible_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.Trip.WheelchairAccessibleStatus wheelchair_accessible = 8 [default = UNKNOWN_WHEELCHAIR_ACCESSIBILITY];</code>
       *
       * <pre>
       * Indicates wheelchair accessibility.
       * </pre>
       */
      public Builder clearWheelchairAccessible() {
        bitField0_ = (bitField0_ & ~0x00000080);
        wheelchairAccessible_ = com.google.transit.realtime.GtfsRealtime.Trip.WheelchairAccessibleStatus.UNKNOWN_WHEELCHAIR_ACCESSIBILITY;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus bikedAllowed_ = com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus.UNKNOWN_BIKES_ALLOWANCE;
      /**
       * <code>optional .transit_realtime.Trip.BikesAllowedStatus biked_allowed = 9 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
       *
       * <pre>
       * Indicates whether bikes are allowed or not.
       * </pre>
       */
      public boolean hasBikedAllowed() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .transit_realtime.Trip.BikesAllowedStatus biked_allowed = 9 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
       *
       * <pre>
       * Indicates whether bikes are allowed or not.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus getBikedAllowed() {
        return bikedAllowed_;
      }
      /**
       * <code>optional .transit_realtime.Trip.BikesAllowedStatus biked_allowed = 9 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
       *
       * <pre>
       * Indicates whether bikes are allowed or not.
       * </pre>
       */
      public Builder setBikedAllowed(com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        bikedAllowed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.Trip.BikesAllowedStatus biked_allowed = 9 [default = UNKNOWN_BIKES_ALLOWANCE];</code>
       *
       * <pre>
       * Indicates whether bikes are allowed or not.
       * </pre>
       */
      public Builder clearBikedAllowed() {
        bitField0_ = (bitField0_ & ~0x00000100);
        bikedAllowed_ = com.google.transit.realtime.GtfsRealtime.Trip.BikesAllowedStatus.UNKNOWN_BIKES_ALLOWANCE;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList replacesTripId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureReplacesTripIdIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          replacesTripId_ = new com.google.protobuf.LazyStringArrayList(replacesTripId_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getReplacesTripIdList() {
        return replacesTripId_.getUnmodifiableView();
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public int getReplacesTripIdCount() {
        return replacesTripId_.size();
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public java.lang.String getReplacesTripId(int index) {
        return replacesTripId_.get(index);
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getReplacesTripIdBytes(int index) {
        return replacesTripId_.getByteString(index);
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public Builder setReplacesTripId(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacesTripIdIsMutable();
        replacesTripId_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public Builder addReplacesTripId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacesTripIdIsMutable();
        replacesTripId_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public Builder addAllReplacesTripId(
          java.lang.Iterable<java.lang.String> values) {
        ensureReplacesTripIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, replacesTripId_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public Builder clearReplacesTripId() {
        replacesTripId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replaces_trip_id = 10;</code>
       *
       * <pre>
       *  Defines which trips are being replaced by this trip.
       * </pre>
       */
      public Builder addReplacesTripIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacesTripIdIsMutable();
        replacesTripId_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.Trip)
    }

    static {
      defaultInstance = new Trip(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.Trip)
  }

  public interface StopTimeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.StopTime)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 stop_sequence = 1;</code>
     *
     * <pre>
     * Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.
     * </pre>
     */
    boolean hasStopSequence();
    /**
     * <code>required uint32 stop_sequence = 1;</code>
     *
     * <pre>
     * Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.
     * </pre>
     */
    int getStopSequence();

    /**
     * <code>required uint64 arrival_time = 2;</code>
     *
     * <pre>
     * Arrival time at a specific stop for a specific trip on a route.
     * </pre>
     */
    boolean hasArrivalTime();
    /**
     * <code>required uint64 arrival_time = 2;</code>
     *
     * <pre>
     * Arrival time at a specific stop for a specific trip on a route.
     * </pre>
     */
    long getArrivalTime();

    /**
     * <code>required uint64 departure_time = 3;</code>
     *
     * <pre>
     * Departure time at a specific stop for a specific trip on a route.
     * </pre>
     */
    boolean hasDepartureTime();
    /**
     * <code>required uint64 departure_time = 3;</code>
     *
     * <pre>
     * Departure time at a specific stop for a specific trip on a route.
     * </pre>
     */
    long getDepartureTime();

    /**
     * <code>required string stop_id = 4;</code>
     *
     * <pre>
     * Identifies the serviced stop.
     * </pre>
     */
    boolean hasStopId();
    /**
     * <code>required string stop_id = 4;</code>
     *
     * <pre>
     * Identifies the serviced stop.
     * </pre>
     */
    java.lang.String getStopId();
    /**
     * <code>required string stop_id = 4;</code>
     *
     * <pre>
     * Identifies the serviced stop.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStopIdBytes();

    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    boolean hasStopHeadsign();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getStopHeadsign();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopHeadsignOrBuilder();

    /**
     * <code>optional .transit_realtime.StopTime.PickupType pickup_type = 6 [default = REGULAR_PICKUP];</code>
     *
     * <pre>
     * Indicates pickup method.
     * </pre>
     */
    boolean hasPickupType();
    /**
     * <code>optional .transit_realtime.StopTime.PickupType pickup_type = 6 [default = REGULAR_PICKUP];</code>
     *
     * <pre>
     * Indicates pickup method.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.StopTime.PickupType getPickupType();

    /**
     * <code>optional .transit_realtime.StopTime.DropOffType drop_off_type = 7 [default = REGULAR_DROP_OFF];</code>
     *
     * <pre>
     * Indicates drop off method.
     * </pre>
     */
    boolean hasDropOffType();
    /**
     * <code>optional .transit_realtime.StopTime.DropOffType drop_off_type = 7 [default = REGULAR_DROP_OFF];</code>
     *
     * <pre>
     * Indicates drop off method.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType getDropOffType();

    /**
     * <code>optional float shape_dist_traveled = 8;</code>
     *
     * <pre>
     * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
     * </pre>
     */
    boolean hasShapeDistTraveled();
    /**
     * <code>optional float shape_dist_traveled = 8;</code>
     *
     * <pre>
     * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
     * </pre>
     */
    float getShapeDistTraveled();
  }
  /**
   * Protobuf type {@code transit_realtime.StopTime}
   *
   * <pre>
   * Describes the times that a vehicle arrives at and departs from stops for each updated trip
   * </pre>
   */
  public static final class StopTime extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.StopTime)
      StopTimeOrBuilder {
    // Use StopTime.newBuilder() to construct.
    private StopTime(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StopTime(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StopTime defaultInstance;
    public static StopTime getDefaultInstance() {
      return defaultInstance;
    }

    public StopTime getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StopTime(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              stopSequence_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              arrivalTime_ = input.readUInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              departureTime_ = input.readUInt64();
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              stopId_ = bs;
              break;
            }
            case 42: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = stopHeadsign_.toBuilder();
              }
              stopHeadsign_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stopHeadsign_);
                stopHeadsign_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.StopTime.PickupType value = com.google.transit.realtime.GtfsRealtime.StopTime.PickupType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                pickupType_ = value;
              }
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType value = com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                dropOffType_ = value;
              }
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              shapeDistTraveled_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTime_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTime_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.StopTime.class, com.google.transit.realtime.GtfsRealtime.StopTime.Builder.class);
    }

    public static com.google.protobuf.Parser<StopTime> PARSER =
        new com.google.protobuf.AbstractParser<StopTime>() {
      public StopTime parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StopTime(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StopTime> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.StopTime.PickupType}
     *
     * <pre>
     * Valid options for pickup_type:
     * 0 or empty - Regularly scheduled pickup.
     * 1 - No pickup available.
     * 2 - Must phone agency to arrange pickup.
     * 3 - Must coordinate with driver to arrange pickup.
     * </pre>
     */
    public enum PickupType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REGULAR_PICKUP = 0;</code>
       */
      REGULAR_PICKUP(0, 0),
      /**
       * <code>NO_PICKUP = 1;</code>
       */
      NO_PICKUP(1, 1),
      /**
       * <code>MUST_PHONE_AGENCY_PICKUP = 2;</code>
       */
      MUST_PHONE_AGENCY_PICKUP(2, 2),
      /**
       * <code>MUST_ASK_DRIVER_PICK_UP = 3;</code>
       */
      MUST_ASK_DRIVER_PICK_UP(3, 3),
      ;

      /**
       * <code>REGULAR_PICKUP = 0;</code>
       */
      public static final int REGULAR_PICKUP_VALUE = 0;
      /**
       * <code>NO_PICKUP = 1;</code>
       */
      public static final int NO_PICKUP_VALUE = 1;
      /**
       * <code>MUST_PHONE_AGENCY_PICKUP = 2;</code>
       */
      public static final int MUST_PHONE_AGENCY_PICKUP_VALUE = 2;
      /**
       * <code>MUST_ASK_DRIVER_PICK_UP = 3;</code>
       */
      public static final int MUST_ASK_DRIVER_PICK_UP_VALUE = 3;


      public final int getNumber() { return value; }

      public static PickupType valueOf(int value) {
        switch (value) {
          case 0: return REGULAR_PICKUP;
          case 1: return NO_PICKUP;
          case 2: return MUST_PHONE_AGENCY_PICKUP;
          case 3: return MUST_ASK_DRIVER_PICK_UP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PickupType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PickupType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PickupType>() {
              public PickupType findValueByNumber(int number) {
                return PickupType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.StopTime.getDescriptor().getEnumTypes().get(0);
      }

      private static final PickupType[] VALUES = values();

      public static PickupType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PickupType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.StopTime.PickupType)
    }

    /**
     * Protobuf enum {@code transit_realtime.StopTime.DropOffType}
     *
     * <pre>
     * Valid options for drop_off_type:
     * 0 or empty - Regularly scheduled drop off.
     * 1 - No drop off available.
     * 2 - Must phone agency to arrange drop off.
     * 3 - Must coordinate with driver to arrange drop off.
     * </pre>
     */
    public enum DropOffType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REGULAR_DROP_OFF = 0;</code>
       */
      REGULAR_DROP_OFF(0, 0),
      /**
       * <code>NO_DROP_OFF = 1;</code>
       */
      NO_DROP_OFF(1, 1),
      /**
       * <code>MUST_PHONE_AGENCY_DROP_OFF = 2;</code>
       */
      MUST_PHONE_AGENCY_DROP_OFF(2, 2),
      /**
       * <code>MUST_ASK_DRIVER_DROP_OFF = 3;</code>
       */
      MUST_ASK_DRIVER_DROP_OFF(3, 3),
      ;

      /**
       * <code>REGULAR_DROP_OFF = 0;</code>
       */
      public static final int REGULAR_DROP_OFF_VALUE = 0;
      /**
       * <code>NO_DROP_OFF = 1;</code>
       */
      public static final int NO_DROP_OFF_VALUE = 1;
      /**
       * <code>MUST_PHONE_AGENCY_DROP_OFF = 2;</code>
       */
      public static final int MUST_PHONE_AGENCY_DROP_OFF_VALUE = 2;
      /**
       * <code>MUST_ASK_DRIVER_DROP_OFF = 3;</code>
       */
      public static final int MUST_ASK_DRIVER_DROP_OFF_VALUE = 3;


      public final int getNumber() { return value; }

      public static DropOffType valueOf(int value) {
        switch (value) {
          case 0: return REGULAR_DROP_OFF;
          case 1: return NO_DROP_OFF;
          case 2: return MUST_PHONE_AGENCY_DROP_OFF;
          case 3: return MUST_ASK_DRIVER_DROP_OFF;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DropOffType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DropOffType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DropOffType>() {
              public DropOffType findValueByNumber(int number) {
                return DropOffType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.StopTime.getDescriptor().getEnumTypes().get(1);
      }

      private static final DropOffType[] VALUES = values();

      public static DropOffType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DropOffType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.StopTime.DropOffType)
    }

    private int bitField0_;
    public static final int STOP_SEQUENCE_FIELD_NUMBER = 1;
    private int stopSequence_;
    /**
     * <code>required uint32 stop_sequence = 1;</code>
     *
     * <pre>
     * Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.
     * </pre>
     */
    public boolean hasStopSequence() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 stop_sequence = 1;</code>
     *
     * <pre>
     * Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.
     * </pre>
     */
    public int getStopSequence() {
      return stopSequence_;
    }

    public static final int ARRIVAL_TIME_FIELD_NUMBER = 2;
    private long arrivalTime_;
    /**
     * <code>required uint64 arrival_time = 2;</code>
     *
     * <pre>
     * Arrival time at a specific stop for a specific trip on a route.
     * </pre>
     */
    public boolean hasArrivalTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 arrival_time = 2;</code>
     *
     * <pre>
     * Arrival time at a specific stop for a specific trip on a route.
     * </pre>
     */
    public long getArrivalTime() {
      return arrivalTime_;
    }

    public static final int DEPARTURE_TIME_FIELD_NUMBER = 3;
    private long departureTime_;
    /**
     * <code>required uint64 departure_time = 3;</code>
     *
     * <pre>
     * Departure time at a specific stop for a specific trip on a route.
     * </pre>
     */
    public boolean hasDepartureTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint64 departure_time = 3;</code>
     *
     * <pre>
     * Departure time at a specific stop for a specific trip on a route.
     * </pre>
     */
    public long getDepartureTime() {
      return departureTime_;
    }

    public static final int STOP_ID_FIELD_NUMBER = 4;
    private java.lang.Object stopId_;
    /**
     * <code>required string stop_id = 4;</code>
     *
     * <pre>
     * Identifies the serviced stop.
     * </pre>
     */
    public boolean hasStopId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string stop_id = 4;</code>
     *
     * <pre>
     * Identifies the serviced stop.
     * </pre>
     */
    public java.lang.String getStopId() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string stop_id = 4;</code>
     *
     * <pre>
     * Identifies the serviced stop.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStopIdBytes() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STOP_HEADSIGN_FIELD_NUMBER = 5;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString stopHeadsign_;
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public boolean hasStopHeadsign() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopHeadsign() {
      return stopHeadsign_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
     *
     * <pre>
     * Text that appears on signage identifying the trip's destination to riders.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopHeadsignOrBuilder() {
      return stopHeadsign_;
    }

    public static final int PICKUP_TYPE_FIELD_NUMBER = 6;
    private com.google.transit.realtime.GtfsRealtime.StopTime.PickupType pickupType_;
    /**
     * <code>optional .transit_realtime.StopTime.PickupType pickup_type = 6 [default = REGULAR_PICKUP];</code>
     *
     * <pre>
     * Indicates pickup method.
     * </pre>
     */
    public boolean hasPickupType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .transit_realtime.StopTime.PickupType pickup_type = 6 [default = REGULAR_PICKUP];</code>
     *
     * <pre>
     * Indicates pickup method.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.StopTime.PickupType getPickupType() {
      return pickupType_;
    }

    public static final int DROP_OFF_TYPE_FIELD_NUMBER = 7;
    private com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType dropOffType_;
    /**
     * <code>optional .transit_realtime.StopTime.DropOffType drop_off_type = 7 [default = REGULAR_DROP_OFF];</code>
     *
     * <pre>
     * Indicates drop off method.
     * </pre>
     */
    public boolean hasDropOffType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .transit_realtime.StopTime.DropOffType drop_off_type = 7 [default = REGULAR_DROP_OFF];</code>
     *
     * <pre>
     * Indicates drop off method.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType getDropOffType() {
      return dropOffType_;
    }

    public static final int SHAPE_DIST_TRAVELED_FIELD_NUMBER = 8;
    private float shapeDistTraveled_;
    /**
     * <code>optional float shape_dist_traveled = 8;</code>
     *
     * <pre>
     * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
     * </pre>
     */
    public boolean hasShapeDistTraveled() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float shape_dist_traveled = 8;</code>
     *
     * <pre>
     * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
     * </pre>
     */
    public float getShapeDistTraveled() {
      return shapeDistTraveled_;
    }

    private void initFields() {
      stopSequence_ = 0;
      arrivalTime_ = 0L;
      departureTime_ = 0L;
      stopId_ = "";
      stopHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      pickupType_ = com.google.transit.realtime.GtfsRealtime.StopTime.PickupType.REGULAR_PICKUP;
      dropOffType_ = com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType.REGULAR_DROP_OFF;
      shapeDistTraveled_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStopSequence()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasArrivalTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDepartureTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStopId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasStopHeadsign()) {
        if (!getStopHeadsign().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, stopSequence_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, arrivalTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, departureTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getStopIdBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, stopHeadsign_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, pickupType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, dropOffType_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, shapeDistTraveled_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stopSequence_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, arrivalTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, departureTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getStopIdBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, stopHeadsign_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, pickupType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, dropOffType_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, shapeDistTraveled_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.StopTime parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.StopTime parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.StopTime prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.StopTime}
     *
     * <pre>
     * Describes the times that a vehicle arrives at and departs from stops for each updated trip
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.StopTime)
        com.google.transit.realtime.GtfsRealtime.StopTimeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTime_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTime_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.StopTime.class, com.google.transit.realtime.GtfsRealtime.StopTime.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.StopTime.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStopHeadsignFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        stopSequence_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        arrivalTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        departureTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        stopId_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (stopHeadsignBuilder_ == null) {
          stopHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          stopHeadsignBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        pickupType_ = com.google.transit.realtime.GtfsRealtime.StopTime.PickupType.REGULAR_PICKUP;
        bitField0_ = (bitField0_ & ~0x00000020);
        dropOffType_ = com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType.REGULAR_DROP_OFF;
        bitField0_ = (bitField0_ & ~0x00000040);
        shapeDistTraveled_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_StopTime_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.StopTime getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.StopTime.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.StopTime build() {
        com.google.transit.realtime.GtfsRealtime.StopTime result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.StopTime buildPartial() {
        com.google.transit.realtime.GtfsRealtime.StopTime result = new com.google.transit.realtime.GtfsRealtime.StopTime(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stopSequence_ = stopSequence_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.arrivalTime_ = arrivalTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.departureTime_ = departureTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.stopId_ = stopId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (stopHeadsignBuilder_ == null) {
          result.stopHeadsign_ = stopHeadsign_;
        } else {
          result.stopHeadsign_ = stopHeadsignBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pickupType_ = pickupType_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.dropOffType_ = dropOffType_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.shapeDistTraveled_ = shapeDistTraveled_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.StopTime) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.StopTime)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.StopTime other) {
        if (other == com.google.transit.realtime.GtfsRealtime.StopTime.getDefaultInstance()) return this;
        if (other.hasStopSequence()) {
          setStopSequence(other.getStopSequence());
        }
        if (other.hasArrivalTime()) {
          setArrivalTime(other.getArrivalTime());
        }
        if (other.hasDepartureTime()) {
          setDepartureTime(other.getDepartureTime());
        }
        if (other.hasStopId()) {
          bitField0_ |= 0x00000008;
          stopId_ = other.stopId_;
          onChanged();
        }
        if (other.hasStopHeadsign()) {
          mergeStopHeadsign(other.getStopHeadsign());
        }
        if (other.hasPickupType()) {
          setPickupType(other.getPickupType());
        }
        if (other.hasDropOffType()) {
          setDropOffType(other.getDropOffType());
        }
        if (other.hasShapeDistTraveled()) {
          setShapeDistTraveled(other.getShapeDistTraveled());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStopSequence()) {
          
          return false;
        }
        if (!hasArrivalTime()) {
          
          return false;
        }
        if (!hasDepartureTime()) {
          
          return false;
        }
        if (!hasStopId()) {
          
          return false;
        }
        if (hasStopHeadsign()) {
          if (!getStopHeadsign().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.StopTime parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.StopTime) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stopSequence_ ;
      /**
       * <code>required uint32 stop_sequence = 1;</code>
       *
       * <pre>
       * Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.
       * </pre>
       */
      public boolean hasStopSequence() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 stop_sequence = 1;</code>
       *
       * <pre>
       * Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.
       * </pre>
       */
      public int getStopSequence() {
        return stopSequence_;
      }
      /**
       * <code>required uint32 stop_sequence = 1;</code>
       *
       * <pre>
       * Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.
       * </pre>
       */
      public Builder setStopSequence(int value) {
        bitField0_ |= 0x00000001;
        stopSequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 stop_sequence = 1;</code>
       *
       * <pre>
       * Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.
       * </pre>
       */
      public Builder clearStopSequence() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stopSequence_ = 0;
        onChanged();
        return this;
      }

      private long arrivalTime_ ;
      /**
       * <code>required uint64 arrival_time = 2;</code>
       *
       * <pre>
       * Arrival time at a specific stop for a specific trip on a route.
       * </pre>
       */
      public boolean hasArrivalTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 arrival_time = 2;</code>
       *
       * <pre>
       * Arrival time at a specific stop for a specific trip on a route.
       * </pre>
       */
      public long getArrivalTime() {
        return arrivalTime_;
      }
      /**
       * <code>required uint64 arrival_time = 2;</code>
       *
       * <pre>
       * Arrival time at a specific stop for a specific trip on a route.
       * </pre>
       */
      public Builder setArrivalTime(long value) {
        bitField0_ |= 0x00000002;
        arrivalTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 arrival_time = 2;</code>
       *
       * <pre>
       * Arrival time at a specific stop for a specific trip on a route.
       * </pre>
       */
      public Builder clearArrivalTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        arrivalTime_ = 0L;
        onChanged();
        return this;
      }

      private long departureTime_ ;
      /**
       * <code>required uint64 departure_time = 3;</code>
       *
       * <pre>
       * Departure time at a specific stop for a specific trip on a route.
       * </pre>
       */
      public boolean hasDepartureTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint64 departure_time = 3;</code>
       *
       * <pre>
       * Departure time at a specific stop for a specific trip on a route.
       * </pre>
       */
      public long getDepartureTime() {
        return departureTime_;
      }
      /**
       * <code>required uint64 departure_time = 3;</code>
       *
       * <pre>
       * Departure time at a specific stop for a specific trip on a route.
       * </pre>
       */
      public Builder setDepartureTime(long value) {
        bitField0_ |= 0x00000004;
        departureTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 departure_time = 3;</code>
       *
       * <pre>
       * Departure time at a specific stop for a specific trip on a route.
       * </pre>
       */
      public Builder clearDepartureTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        departureTime_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object stopId_ = "";
      /**
       * <code>required string stop_id = 4;</code>
       *
       * <pre>
       * Identifies the serviced stop.
       * </pre>
       */
      public boolean hasStopId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string stop_id = 4;</code>
       *
       * <pre>
       * Identifies the serviced stop.
       * </pre>
       */
      public java.lang.String getStopId() {
        java.lang.Object ref = stopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string stop_id = 4;</code>
       *
       * <pre>
       * Identifies the serviced stop.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStopIdBytes() {
        java.lang.Object ref = stopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string stop_id = 4;</code>
       *
       * <pre>
       * Identifies the serviced stop.
       * </pre>
       */
      public Builder setStopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        stopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string stop_id = 4;</code>
       *
       * <pre>
       * Identifies the serviced stop.
       * </pre>
       */
      public Builder clearStopId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        stopId_ = getDefaultInstance().getStopId();
        onChanged();
        return this;
      }
      /**
       * <code>required string stop_id = 4;</code>
       *
       * <pre>
       * Identifies the serviced stop.
       * </pre>
       */
      public Builder setStopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        stopId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString stopHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> stopHeadsignBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public boolean hasStopHeadsign() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopHeadsign() {
        if (stopHeadsignBuilder_ == null) {
          return stopHeadsign_;
        } else {
          return stopHeadsignBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder setStopHeadsign(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopHeadsignBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stopHeadsign_ = value;
          onChanged();
        } else {
          stopHeadsignBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder setStopHeadsign(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (stopHeadsignBuilder_ == null) {
          stopHeadsign_ = builderForValue.build();
          onChanged();
        } else {
          stopHeadsignBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder mergeStopHeadsign(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopHeadsignBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              stopHeadsign_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            stopHeadsign_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(stopHeadsign_).mergeFrom(value).buildPartial();
          } else {
            stopHeadsign_ = value;
          }
          onChanged();
        } else {
          stopHeadsignBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public Builder clearStopHeadsign() {
        if (stopHeadsignBuilder_ == null) {
          stopHeadsign_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          stopHeadsignBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getStopHeadsignBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getStopHeadsignFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopHeadsignOrBuilder() {
        if (stopHeadsignBuilder_ != null) {
          return stopHeadsignBuilder_.getMessageOrBuilder();
        } else {
          return stopHeadsign_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_headsign = 5;</code>
       *
       * <pre>
       * Text that appears on signage identifying the trip's destination to riders.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getStopHeadsignFieldBuilder() {
        if (stopHeadsignBuilder_ == null) {
          stopHeadsignBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getStopHeadsign(),
                  getParentForChildren(),
                  isClean());
          stopHeadsign_ = null;
        }
        return stopHeadsignBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.StopTime.PickupType pickupType_ = com.google.transit.realtime.GtfsRealtime.StopTime.PickupType.REGULAR_PICKUP;
      /**
       * <code>optional .transit_realtime.StopTime.PickupType pickup_type = 6 [default = REGULAR_PICKUP];</code>
       *
       * <pre>
       * Indicates pickup method.
       * </pre>
       */
      public boolean hasPickupType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .transit_realtime.StopTime.PickupType pickup_type = 6 [default = REGULAR_PICKUP];</code>
       *
       * <pre>
       * Indicates pickup method.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.StopTime.PickupType getPickupType() {
        return pickupType_;
      }
      /**
       * <code>optional .transit_realtime.StopTime.PickupType pickup_type = 6 [default = REGULAR_PICKUP];</code>
       *
       * <pre>
       * Indicates pickup method.
       * </pre>
       */
      public Builder setPickupType(com.google.transit.realtime.GtfsRealtime.StopTime.PickupType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        pickupType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.StopTime.PickupType pickup_type = 6 [default = REGULAR_PICKUP];</code>
       *
       * <pre>
       * Indicates pickup method.
       * </pre>
       */
      public Builder clearPickupType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        pickupType_ = com.google.transit.realtime.GtfsRealtime.StopTime.PickupType.REGULAR_PICKUP;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType dropOffType_ = com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType.REGULAR_DROP_OFF;
      /**
       * <code>optional .transit_realtime.StopTime.DropOffType drop_off_type = 7 [default = REGULAR_DROP_OFF];</code>
       *
       * <pre>
       * Indicates drop off method.
       * </pre>
       */
      public boolean hasDropOffType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .transit_realtime.StopTime.DropOffType drop_off_type = 7 [default = REGULAR_DROP_OFF];</code>
       *
       * <pre>
       * Indicates drop off method.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType getDropOffType() {
        return dropOffType_;
      }
      /**
       * <code>optional .transit_realtime.StopTime.DropOffType drop_off_type = 7 [default = REGULAR_DROP_OFF];</code>
       *
       * <pre>
       * Indicates drop off method.
       * </pre>
       */
      public Builder setDropOffType(com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        dropOffType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.StopTime.DropOffType drop_off_type = 7 [default = REGULAR_DROP_OFF];</code>
       *
       * <pre>
       * Indicates drop off method.
       * </pre>
       */
      public Builder clearDropOffType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dropOffType_ = com.google.transit.realtime.GtfsRealtime.StopTime.DropOffType.REGULAR_DROP_OFF;
        onChanged();
        return this;
      }

      private float shapeDistTraveled_ ;
      /**
       * <code>optional float shape_dist_traveled = 8;</code>
       *
       * <pre>
       * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
       * </pre>
       */
      public boolean hasShapeDistTraveled() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float shape_dist_traveled = 8;</code>
       *
       * <pre>
       * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
       * </pre>
       */
      public float getShapeDistTraveled() {
        return shapeDistTraveled_;
      }
      /**
       * <code>optional float shape_dist_traveled = 8;</code>
       *
       * <pre>
       * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
       * </pre>
       */
      public Builder setShapeDistTraveled(float value) {
        bitField0_ |= 0x00000080;
        shapeDistTraveled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shape_dist_traveled = 8;</code>
       *
       * <pre>
       * Actual distance traveled along the associated shape, from the first stop to the stop specified in this record.
       * </pre>
       */
      public Builder clearShapeDistTraveled() {
        bitField0_ = (bitField0_ & ~0x00000080);
        shapeDistTraveled_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.StopTime)
    }

    static {
      defaultInstance = new StopTime(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.StopTime)
  }

  public interface ShapeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.Shape)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string shape_id = 1;</code>
     *
     * <pre>
     * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
     * </pre>
     */
    boolean hasShapeId();
    /**
     * <code>required string shape_id = 1;</code>
     *
     * <pre>
     * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
     * </pre>
     */
    java.lang.String getShapeId();
    /**
     * <code>required string shape_id = 1;</code>
     *
     * <pre>
     * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
     * </pre>
     */
    com.google.protobuf.ByteString
        getShapeIdBytes();

    /**
     * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
     *
     * <pre>
     * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
     * </pre>
     */
    boolean hasShapePoint();
    /**
     * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
     *
     * <pre>
     * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.ShapePoint getShapePoint();
    /**
     * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
     *
     * <pre>
     * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.ShapePointOrBuilder getShapePointOrBuilder();
  }
  /**
   * Protobuf type {@code transit_realtime.Shape}
   *
   * <pre>
   * Defines a shape for a trip that has been updated.
   * </pre>
   */
  public static final class Shape extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.Shape)
      ShapeOrBuilder {
    // Use Shape.newBuilder() to construct.
    private Shape(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Shape(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Shape defaultInstance;
    public static Shape getDefaultInstance() {
      return defaultInstance;
    }

    public Shape getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Shape(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              shapeId_ = bs;
              break;
            }
            case 18: {
              com.google.transit.realtime.GtfsRealtime.ShapePoint.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = shapePoint_.toBuilder();
              }
              shapePoint_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.ShapePoint.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(shapePoint_);
                shapePoint_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Shape_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Shape_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.Shape.class, com.google.transit.realtime.GtfsRealtime.Shape.Builder.class);
    }

    public static com.google.protobuf.Parser<Shape> PARSER =
        new com.google.protobuf.AbstractParser<Shape>() {
      public Shape parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Shape(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Shape> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SHAPE_ID_FIELD_NUMBER = 1;
    private java.lang.Object shapeId_;
    /**
     * <code>required string shape_id = 1;</code>
     *
     * <pre>
     * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
     * </pre>
     */
    public boolean hasShapeId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string shape_id = 1;</code>
     *
     * <pre>
     * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
     * </pre>
     */
    public java.lang.String getShapeId() {
      java.lang.Object ref = shapeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          shapeId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string shape_id = 1;</code>
     *
     * <pre>
     * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getShapeIdBytes() {
      java.lang.Object ref = shapeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shapeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHAPE_POINT_FIELD_NUMBER = 2;
    private com.google.transit.realtime.GtfsRealtime.ShapePoint shapePoint_;
    /**
     * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
     *
     * <pre>
     * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
     * </pre>
     */
    public boolean hasShapePoint() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
     *
     * <pre>
     * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.ShapePoint getShapePoint() {
      return shapePoint_;
    }
    /**
     * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
     *
     * <pre>
     * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.ShapePointOrBuilder getShapePointOrBuilder() {
      return shapePoint_;
    }

    private void initFields() {
      shapeId_ = "";
      shapePoint_ = com.google.transit.realtime.GtfsRealtime.ShapePoint.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasShapeId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasShapePoint()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getShapePoint().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getShapeIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, shapePoint_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getShapeIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, shapePoint_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.Shape parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Shape parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.Shape prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.Shape}
     *
     * <pre>
     * Defines a shape for a trip that has been updated.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.Shape)
        com.google.transit.realtime.GtfsRealtime.ShapeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Shape_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Shape_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.Shape.class, com.google.transit.realtime.GtfsRealtime.Shape.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.Shape.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getShapePointFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        shapeId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (shapePointBuilder_ == null) {
          shapePoint_ = com.google.transit.realtime.GtfsRealtime.ShapePoint.getDefaultInstance();
        } else {
          shapePointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Shape_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.Shape getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.Shape.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.Shape build() {
        com.google.transit.realtime.GtfsRealtime.Shape result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.Shape buildPartial() {
        com.google.transit.realtime.GtfsRealtime.Shape result = new com.google.transit.realtime.GtfsRealtime.Shape(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.shapeId_ = shapeId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (shapePointBuilder_ == null) {
          result.shapePoint_ = shapePoint_;
        } else {
          result.shapePoint_ = shapePointBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.Shape) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.Shape)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.Shape other) {
        if (other == com.google.transit.realtime.GtfsRealtime.Shape.getDefaultInstance()) return this;
        if (other.hasShapeId()) {
          bitField0_ |= 0x00000001;
          shapeId_ = other.shapeId_;
          onChanged();
        }
        if (other.hasShapePoint()) {
          mergeShapePoint(other.getShapePoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasShapeId()) {
          
          return false;
        }
        if (!hasShapePoint()) {
          
          return false;
        }
        if (!getShapePoint().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.Shape parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.Shape) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object shapeId_ = "";
      /**
       * <code>required string shape_id = 1;</code>
       *
       * <pre>
       * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
       * </pre>
       */
      public boolean hasShapeId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string shape_id = 1;</code>
       *
       * <pre>
       * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
       * </pre>
       */
      public java.lang.String getShapeId() {
        java.lang.Object ref = shapeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            shapeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string shape_id = 1;</code>
       *
       * <pre>
       * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getShapeIdBytes() {
        java.lang.Object ref = shapeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shapeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string shape_id = 1;</code>
       *
       * <pre>
       * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
       * </pre>
       */
      public Builder setShapeId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        shapeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string shape_id = 1;</code>
       *
       * <pre>
       * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
       * </pre>
       */
      public Builder clearShapeId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        shapeId_ = getDefaultInstance().getShapeId();
        onChanged();
        return this;
      }
      /**
       * <code>required string shape_id = 1;</code>
       *
       * <pre>
       * Identifier of the shape. Must be different than any shape_id defined in the GTFS.
       * </pre>
       */
      public Builder setShapeIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        shapeId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.ShapePoint shapePoint_ = com.google.transit.realtime.GtfsRealtime.ShapePoint.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.ShapePoint, com.google.transit.realtime.GtfsRealtime.ShapePoint.Builder, com.google.transit.realtime.GtfsRealtime.ShapePointOrBuilder> shapePointBuilder_;
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      public boolean hasShapePoint() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.ShapePoint getShapePoint() {
        if (shapePointBuilder_ == null) {
          return shapePoint_;
        } else {
          return shapePointBuilder_.getMessage();
        }
      }
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      public Builder setShapePoint(com.google.transit.realtime.GtfsRealtime.ShapePoint value) {
        if (shapePointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          shapePoint_ = value;
          onChanged();
        } else {
          shapePointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      public Builder setShapePoint(
          com.google.transit.realtime.GtfsRealtime.ShapePoint.Builder builderForValue) {
        if (shapePointBuilder_ == null) {
          shapePoint_ = builderForValue.build();
          onChanged();
        } else {
          shapePointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      public Builder mergeShapePoint(com.google.transit.realtime.GtfsRealtime.ShapePoint value) {
        if (shapePointBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              shapePoint_ != com.google.transit.realtime.GtfsRealtime.ShapePoint.getDefaultInstance()) {
            shapePoint_ =
              com.google.transit.realtime.GtfsRealtime.ShapePoint.newBuilder(shapePoint_).mergeFrom(value).buildPartial();
          } else {
            shapePoint_ = value;
          }
          onChanged();
        } else {
          shapePointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      public Builder clearShapePoint() {
        if (shapePointBuilder_ == null) {
          shapePoint_ = com.google.transit.realtime.GtfsRealtime.ShapePoint.getDefaultInstance();
          onChanged();
        } else {
          shapePointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.ShapePoint.Builder getShapePointBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getShapePointFieldBuilder().getBuilder();
      }
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.ShapePointOrBuilder getShapePointOrBuilder() {
        if (shapePointBuilder_ != null) {
          return shapePointBuilder_.getMessageOrBuilder();
        } else {
          return shapePoint_;
        }
      }
      /**
       * <code>required .transit_realtime.ShapePoint shape_point = 2;</code>
       *
       * <pre>
       * Points in the shape. A shape must contain at least two shape points. The shape points order in this field defines their order in the shape.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.ShapePoint, com.google.transit.realtime.GtfsRealtime.ShapePoint.Builder, com.google.transit.realtime.GtfsRealtime.ShapePointOrBuilder> 
          getShapePointFieldBuilder() {
        if (shapePointBuilder_ == null) {
          shapePointBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.ShapePoint, com.google.transit.realtime.GtfsRealtime.ShapePoint.Builder, com.google.transit.realtime.GtfsRealtime.ShapePointOrBuilder>(
                  getShapePoint(),
                  getParentForChildren(),
                  isClean());
          shapePoint_ = null;
        }
        return shapePointBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.Shape)
    }

    static {
      defaultInstance = new Shape(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.Shape)
  }

  public interface ShapePointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.ShapePoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required float shape_pt_lat = 1;</code>
     *
     * <pre>
     * Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
     * </pre>
     */
    boolean hasShapePtLat();
    /**
     * <code>required float shape_pt_lat = 1;</code>
     *
     * <pre>
     * Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
     * </pre>
     */
    float getShapePtLat();

    /**
     * <code>required float shape_pt_lon = 2;</code>
     *
     * <pre>
     * Longitude of a shape point.
     * </pre>
     */
    boolean hasShapePtLon();
    /**
     * <code>required float shape_pt_lon = 2;</code>
     *
     * <pre>
     * Longitude of a shape point.
     * </pre>
     */
    float getShapePtLon();

    /**
     * <code>optional float shape_dist_traveled = 3;</code>
     *
     * <pre>
     * Actual distance traveled along the shape from the first shape point to the point specified in this record.
     * </pre>
     */
    boolean hasShapeDistTraveled();
    /**
     * <code>optional float shape_dist_traveled = 3;</code>
     *
     * <pre>
     * Actual distance traveled along the shape from the first shape point to the point specified in this record.
     * </pre>
     */
    float getShapeDistTraveled();
  }
  /**
   * Protobuf type {@code transit_realtime.ShapePoint}
   *
   * <pre>
   * Defines the geographical representation of a point in a shape.
   * </pre>
   */
  public static final class ShapePoint extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.ShapePoint)
      ShapePointOrBuilder {
    // Use ShapePoint.newBuilder() to construct.
    private ShapePoint(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ShapePoint(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ShapePoint defaultInstance;
    public static ShapePoint getDefaultInstance() {
      return defaultInstance;
    }

    public ShapePoint getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ShapePoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              shapePtLat_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              shapePtLon_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              shapeDistTraveled_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_ShapePoint_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_ShapePoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.ShapePoint.class, com.google.transit.realtime.GtfsRealtime.ShapePoint.Builder.class);
    }

    public static com.google.protobuf.Parser<ShapePoint> PARSER =
        new com.google.protobuf.AbstractParser<ShapePoint>() {
      public ShapePoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ShapePoint(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ShapePoint> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SHAPE_PT_LAT_FIELD_NUMBER = 1;
    private float shapePtLat_;
    /**
     * <code>required float shape_pt_lat = 1;</code>
     *
     * <pre>
     * Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
     * </pre>
     */
    public boolean hasShapePtLat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float shape_pt_lat = 1;</code>
     *
     * <pre>
     * Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
     * </pre>
     */
    public float getShapePtLat() {
      return shapePtLat_;
    }

    public static final int SHAPE_PT_LON_FIELD_NUMBER = 2;
    private float shapePtLon_;
    /**
     * <code>required float shape_pt_lon = 2;</code>
     *
     * <pre>
     * Longitude of a shape point.
     * </pre>
     */
    public boolean hasShapePtLon() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float shape_pt_lon = 2;</code>
     *
     * <pre>
     * Longitude of a shape point.
     * </pre>
     */
    public float getShapePtLon() {
      return shapePtLon_;
    }

    public static final int SHAPE_DIST_TRAVELED_FIELD_NUMBER = 3;
    private float shapeDistTraveled_;
    /**
     * <code>optional float shape_dist_traveled = 3;</code>
     *
     * <pre>
     * Actual distance traveled along the shape from the first shape point to the point specified in this record.
     * </pre>
     */
    public boolean hasShapeDistTraveled() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float shape_dist_traveled = 3;</code>
     *
     * <pre>
     * Actual distance traveled along the shape from the first shape point to the point specified in this record.
     * </pre>
     */
    public float getShapeDistTraveled() {
      return shapeDistTraveled_;
    }

    private void initFields() {
      shapePtLat_ = 0F;
      shapePtLon_ = 0F;
      shapeDistTraveled_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasShapePtLat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasShapePtLon()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, shapePtLat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, shapePtLon_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, shapeDistTraveled_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, shapePtLat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, shapePtLon_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, shapeDistTraveled_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.ShapePoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.ShapePoint prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.ShapePoint}
     *
     * <pre>
     * Defines the geographical representation of a point in a shape.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.ShapePoint)
        com.google.transit.realtime.GtfsRealtime.ShapePointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_ShapePoint_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_ShapePoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.ShapePoint.class, com.google.transit.realtime.GtfsRealtime.ShapePoint.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.ShapePoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        shapePtLat_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        shapePtLon_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        shapeDistTraveled_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_ShapePoint_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.ShapePoint getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.ShapePoint.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.ShapePoint build() {
        com.google.transit.realtime.GtfsRealtime.ShapePoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.ShapePoint buildPartial() {
        com.google.transit.realtime.GtfsRealtime.ShapePoint result = new com.google.transit.realtime.GtfsRealtime.ShapePoint(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.shapePtLat_ = shapePtLat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.shapePtLon_ = shapePtLon_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.shapeDistTraveled_ = shapeDistTraveled_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.ShapePoint) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.ShapePoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.ShapePoint other) {
        if (other == com.google.transit.realtime.GtfsRealtime.ShapePoint.getDefaultInstance()) return this;
        if (other.hasShapePtLat()) {
          setShapePtLat(other.getShapePtLat());
        }
        if (other.hasShapePtLon()) {
          setShapePtLon(other.getShapePtLon());
        }
        if (other.hasShapeDistTraveled()) {
          setShapeDistTraveled(other.getShapeDistTraveled());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasShapePtLat()) {
          
          return false;
        }
        if (!hasShapePtLon()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.ShapePoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.ShapePoint) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float shapePtLat_ ;
      /**
       * <code>required float shape_pt_lat = 1;</code>
       *
       * <pre>
       * Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
       * </pre>
       */
      public boolean hasShapePtLat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float shape_pt_lat = 1;</code>
       *
       * <pre>
       * Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
       * </pre>
       */
      public float getShapePtLat() {
        return shapePtLat_;
      }
      /**
       * <code>required float shape_pt_lat = 1;</code>
       *
       * <pre>
       * Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
       * </pre>
       */
      public Builder setShapePtLat(float value) {
        bitField0_ |= 0x00000001;
        shapePtLat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float shape_pt_lat = 1;</code>
       *
       * <pre>
       * Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
       * </pre>
       */
      public Builder clearShapePtLat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        shapePtLat_ = 0F;
        onChanged();
        return this;
      }

      private float shapePtLon_ ;
      /**
       * <code>required float shape_pt_lon = 2;</code>
       *
       * <pre>
       * Longitude of a shape point.
       * </pre>
       */
      public boolean hasShapePtLon() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float shape_pt_lon = 2;</code>
       *
       * <pre>
       * Longitude of a shape point.
       * </pre>
       */
      public float getShapePtLon() {
        return shapePtLon_;
      }
      /**
       * <code>required float shape_pt_lon = 2;</code>
       *
       * <pre>
       * Longitude of a shape point.
       * </pre>
       */
      public Builder setShapePtLon(float value) {
        bitField0_ |= 0x00000002;
        shapePtLon_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float shape_pt_lon = 2;</code>
       *
       * <pre>
       * Longitude of a shape point.
       * </pre>
       */
      public Builder clearShapePtLon() {
        bitField0_ = (bitField0_ & ~0x00000002);
        shapePtLon_ = 0F;
        onChanged();
        return this;
      }

      private float shapeDistTraveled_ ;
      /**
       * <code>optional float shape_dist_traveled = 3;</code>
       *
       * <pre>
       * Actual distance traveled along the shape from the first shape point to the point specified in this record.
       * </pre>
       */
      public boolean hasShapeDistTraveled() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float shape_dist_traveled = 3;</code>
       *
       * <pre>
       * Actual distance traveled along the shape from the first shape point to the point specified in this record.
       * </pre>
       */
      public float getShapeDistTraveled() {
        return shapeDistTraveled_;
      }
      /**
       * <code>optional float shape_dist_traveled = 3;</code>
       *
       * <pre>
       * Actual distance traveled along the shape from the first shape point to the point specified in this record.
       * </pre>
       */
      public Builder setShapeDistTraveled(float value) {
        bitField0_ |= 0x00000004;
        shapeDistTraveled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shape_dist_traveled = 3;</code>
       *
       * <pre>
       * Actual distance traveled along the shape from the first shape point to the point specified in this record.
       * </pre>
       */
      public Builder clearShapeDistTraveled() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shapeDistTraveled_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.ShapePoint)
    }

    static {
      defaultInstance = new ShapePoint(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.ShapePoint)
  }

  public interface RouteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.Route)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string route_id = 1;</code>
     *
     * <pre>
     *  Identifier of the route. Must be different than any route_id defined in the GTFS.
     * </pre>
     */
    boolean hasRouteId();
    /**
     * <code>required string route_id = 1;</code>
     *
     * <pre>
     *  Identifier of the route. Must be different than any route_id defined in the GTFS.
     * </pre>
     */
    java.lang.String getRouteId();
    /**
     * <code>required string route_id = 1;</code>
     *
     * <pre>
     *  Identifier of the route. Must be different than any route_id defined in the GTFS.
     * </pre>
     */
    com.google.protobuf.ByteString
        getRouteIdBytes();

    /**
     * <code>required string agency_id = 2;</code>
     *
     * <pre>
     * Identifies a transit brand which is often synonymous with a transit agency.
     * </pre>
     */
    boolean hasAgencyId();
    /**
     * <code>required string agency_id = 2;</code>
     *
     * <pre>
     * Identifies a transit brand which is often synonymous with a transit agency.
     * </pre>
     */
    java.lang.String getAgencyId();
    /**
     * <code>required string agency_id = 2;</code>
     *
     * <pre>
     * Identifies a transit brand which is often synonymous with a transit agency.
     * </pre>
     */
    com.google.protobuf.ByteString
        getAgencyIdBytes();

    /**
     * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
     *
     * <pre>
     * Short name of a route.
     * </pre>
     */
    boolean hasRouteShortName();
    /**
     * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
     *
     * <pre>
     * Short name of a route.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteShortName();
    /**
     * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
     *
     * <pre>
     * Short name of a route.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteShortNameOrBuilder();

    /**
     * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
     *
     * <pre>
     * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
     * </pre>
     */
    boolean hasRouteLongName();
    /**
     * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
     *
     * <pre>
     * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteLongName();
    /**
     * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
     *
     * <pre>
     * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteLongNameOrBuilder();

    /**
     * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
     *
     * <pre>
     * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
     * </pre>
     */
    boolean hasRouteDesc();
    /**
     * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
     *
     * <pre>
     * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteDesc();
    /**
     * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
     *
     * <pre>
     * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteDescOrBuilder();

    /**
     * <code>required .transit_realtime.Route.RouteType route_type = 6;</code>
     *
     * <pre>
     * Indicates the type of transportation used on a route.
     * </pre>
     */
    boolean hasRouteType();
    /**
     * <code>required .transit_realtime.Route.RouteType route_type = 6;</code>
     *
     * <pre>
     * Indicates the type of transportation used on a route.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.Route.RouteType getRouteType();

    /**
     * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
     *
     * <pre>
     * URL of a web page about the particular route. Should be different from the agency.agency_url value.
     * </pre>
     */
    boolean hasRouteUrl();
    /**
     * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
     *
     * <pre>
     * URL of a web page about the particular route. Should be different from the agency.agency_url value.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteUrl();
    /**
     * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
     *
     * <pre>
     * URL of a web page about the particular route. Should be different from the agency.agency_url value.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteUrlOrBuilder();

    /**
     * <code>optional string route_color = 8;</code>
     *
     * <pre>
     * Route color designation that matches public facing material. D
     * </pre>
     */
    boolean hasRouteColor();
    /**
     * <code>optional string route_color = 8;</code>
     *
     * <pre>
     * Route color designation that matches public facing material. D
     * </pre>
     */
    java.lang.String getRouteColor();
    /**
     * <code>optional string route_color = 8;</code>
     *
     * <pre>
     * Route color designation that matches public facing material. D
     * </pre>
     */
    com.google.protobuf.ByteString
        getRouteColorBytes();

    /**
     * <code>optional string route_text_color = 9;</code>
     *
     * <pre>
     * Legible color to use for text drawn against a background of route_color.
     * </pre>
     */
    boolean hasRouteTextColor();
    /**
     * <code>optional string route_text_color = 9;</code>
     *
     * <pre>
     * Legible color to use for text drawn against a background of route_color.
     * </pre>
     */
    java.lang.String getRouteTextColor();
    /**
     * <code>optional string route_text_color = 9;</code>
     *
     * <pre>
     * Legible color to use for text drawn against a background of route_color.
     * </pre>
     */
    com.google.protobuf.ByteString
        getRouteTextColorBytes();

    /**
     * <code>optional uint32 route_sort_order = 10;</code>
     *
     * <pre>
     * Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first.
     * </pre>
     */
    boolean hasRouteSortOrder();
    /**
     * <code>optional uint32 route_sort_order = 10;</code>
     *
     * <pre>
     * Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first.
     * </pre>
     */
    int getRouteSortOrder();
  }
  /**
   * Protobuf type {@code transit_realtime.Route}
   *
   * <pre>
   * Describes new routes. A route is a group of trips that are displayed to riders as a single service.
   * </pre>
   */
  public static final class Route extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.Route)
      RouteOrBuilder {
    // Use Route.newBuilder() to construct.
    private Route(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Route(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Route defaultInstance;
    public static Route getDefaultInstance() {
      return defaultInstance;
    }

    public Route getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Route(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              routeId_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              agencyId_ = bs;
              break;
            }
            case 26: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = routeShortName_.toBuilder();
              }
              routeShortName_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(routeShortName_);
                routeShortName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = routeLongName_.toBuilder();
              }
              routeLongName_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(routeLongName_);
                routeLongName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = routeDesc_.toBuilder();
              }
              routeDesc_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(routeDesc_);
                routeDesc_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.Route.RouteType value = com.google.transit.realtime.GtfsRealtime.Route.RouteType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                routeType_ = value;
              }
              break;
            }
            case 58: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = routeUrl_.toBuilder();
              }
              routeUrl_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(routeUrl_);
                routeUrl_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              routeColor_ = bs;
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000100;
              routeTextColor_ = bs;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              routeSortOrder_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Route_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Route_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.Route.class, com.google.transit.realtime.GtfsRealtime.Route.Builder.class);
    }

    public static com.google.protobuf.Parser<Route> PARSER =
        new com.google.protobuf.AbstractParser<Route>() {
      public Route parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Route(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Route> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.Route.RouteType}
     *
     * <pre>
     * Valid options for route_type:
     * 0 - Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.
     * 1 - Subway, Metro. Any underground rail system within a metropolitan area.
     * 2 - Rail. Used for intercity or long-distance travel.
     * 3 - Bus. Used for short- and long-distance bus routes.
     * 4 - Ferry. Used for short- and long-distance boat service.
     * 5 - Cable car. Used for street-level cable cars where the cable runs beneath the car.
     * 6 - Gondola, Suspended cable car. Typically used for aerial cable cars where the car is suspended from the cable.
     * 7 - Funicular. Any rail system designed for steep inclines.
     * </pre>
     */
    public enum RouteType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LIGHT_RAIL = 0;</code>
       */
      LIGHT_RAIL(0, 0),
      /**
       * <code>SUBWAY = 1;</code>
       */
      SUBWAY(1, 1),
      /**
       * <code>RAIL = 2;</code>
       */
      RAIL(2, 2),
      /**
       * <code>BUS = 3;</code>
       */
      BUS(3, 3),
      /**
       * <code>FERRY = 4;</code>
       */
      FERRY(4, 4),
      /**
       * <code>CABLE_CAR = 5;</code>
       */
      CABLE_CAR(5, 5),
      /**
       * <code>GONDOLA = 6;</code>
       */
      GONDOLA(6, 6),
      /**
       * <code>FUNICULAR = 7;</code>
       */
      FUNICULAR(7, 7),
      ;

      /**
       * <code>LIGHT_RAIL = 0;</code>
       */
      public static final int LIGHT_RAIL_VALUE = 0;
      /**
       * <code>SUBWAY = 1;</code>
       */
      public static final int SUBWAY_VALUE = 1;
      /**
       * <code>RAIL = 2;</code>
       */
      public static final int RAIL_VALUE = 2;
      /**
       * <code>BUS = 3;</code>
       */
      public static final int BUS_VALUE = 3;
      /**
       * <code>FERRY = 4;</code>
       */
      public static final int FERRY_VALUE = 4;
      /**
       * <code>CABLE_CAR = 5;</code>
       */
      public static final int CABLE_CAR_VALUE = 5;
      /**
       * <code>GONDOLA = 6;</code>
       */
      public static final int GONDOLA_VALUE = 6;
      /**
       * <code>FUNICULAR = 7;</code>
       */
      public static final int FUNICULAR_VALUE = 7;


      public final int getNumber() { return value; }

      public static RouteType valueOf(int value) {
        switch (value) {
          case 0: return LIGHT_RAIL;
          case 1: return SUBWAY;
          case 2: return RAIL;
          case 3: return BUS;
          case 4: return FERRY;
          case 5: return CABLE_CAR;
          case 6: return GONDOLA;
          case 7: return FUNICULAR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RouteType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RouteType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RouteType>() {
              public RouteType findValueByNumber(int number) {
                return RouteType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.Route.getDescriptor().getEnumTypes().get(0);
      }

      private static final RouteType[] VALUES = values();

      public static RouteType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private RouteType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.Route.RouteType)
    }

    private int bitField0_;
    public static final int ROUTE_ID_FIELD_NUMBER = 1;
    private java.lang.Object routeId_;
    /**
     * <code>required string route_id = 1;</code>
     *
     * <pre>
     *  Identifier of the route. Must be different than any route_id defined in the GTFS.
     * </pre>
     */
    public boolean hasRouteId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string route_id = 1;</code>
     *
     * <pre>
     *  Identifier of the route. Must be different than any route_id defined in the GTFS.
     * </pre>
     */
    public java.lang.String getRouteId() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          routeId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string route_id = 1;</code>
     *
     * <pre>
     *  Identifier of the route. Must be different than any route_id defined in the GTFS.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRouteIdBytes() {
      java.lang.Object ref = routeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        routeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int AGENCY_ID_FIELD_NUMBER = 2;
    private java.lang.Object agencyId_;
    /**
     * <code>required string agency_id = 2;</code>
     *
     * <pre>
     * Identifies a transit brand which is often synonymous with a transit agency.
     * </pre>
     */
    public boolean hasAgencyId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string agency_id = 2;</code>
     *
     * <pre>
     * Identifies a transit brand which is often synonymous with a transit agency.
     * </pre>
     */
    public java.lang.String getAgencyId() {
      java.lang.Object ref = agencyId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          agencyId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string agency_id = 2;</code>
     *
     * <pre>
     * Identifies a transit brand which is often synonymous with a transit agency.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAgencyIdBytes() {
      java.lang.Object ref = agencyId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        agencyId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUTE_SHORT_NAME_FIELD_NUMBER = 3;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString routeShortName_;
    /**
     * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
     *
     * <pre>
     * Short name of a route.
     * </pre>
     */
    public boolean hasRouteShortName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
     *
     * <pre>
     * Short name of a route.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteShortName() {
      return routeShortName_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
     *
     * <pre>
     * Short name of a route.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteShortNameOrBuilder() {
      return routeShortName_;
    }

    public static final int ROUTE_LONG_NAME_FIELD_NUMBER = 4;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString routeLongName_;
    /**
     * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
     *
     * <pre>
     * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
     * </pre>
     */
    public boolean hasRouteLongName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
     *
     * <pre>
     * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteLongName() {
      return routeLongName_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
     *
     * <pre>
     * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteLongNameOrBuilder() {
      return routeLongName_;
    }

    public static final int ROUTE_DESC_FIELD_NUMBER = 5;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString routeDesc_;
    /**
     * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
     *
     * <pre>
     * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
     * </pre>
     */
    public boolean hasRouteDesc() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
     *
     * <pre>
     * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteDesc() {
      return routeDesc_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
     *
     * <pre>
     * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteDescOrBuilder() {
      return routeDesc_;
    }

    public static final int ROUTE_TYPE_FIELD_NUMBER = 6;
    private com.google.transit.realtime.GtfsRealtime.Route.RouteType routeType_;
    /**
     * <code>required .transit_realtime.Route.RouteType route_type = 6;</code>
     *
     * <pre>
     * Indicates the type of transportation used on a route.
     * </pre>
     */
    public boolean hasRouteType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required .transit_realtime.Route.RouteType route_type = 6;</code>
     *
     * <pre>
     * Indicates the type of transportation used on a route.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.Route.RouteType getRouteType() {
      return routeType_;
    }

    public static final int ROUTE_URL_FIELD_NUMBER = 7;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString routeUrl_;
    /**
     * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
     *
     * <pre>
     * URL of a web page about the particular route. Should be different from the agency.agency_url value.
     * </pre>
     */
    public boolean hasRouteUrl() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
     *
     * <pre>
     * URL of a web page about the particular route. Should be different from the agency.agency_url value.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteUrl() {
      return routeUrl_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
     *
     * <pre>
     * URL of a web page about the particular route. Should be different from the agency.agency_url value.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteUrlOrBuilder() {
      return routeUrl_;
    }

    public static final int ROUTE_COLOR_FIELD_NUMBER = 8;
    private java.lang.Object routeColor_;
    /**
     * <code>optional string route_color = 8;</code>
     *
     * <pre>
     * Route color designation that matches public facing material. D
     * </pre>
     */
    public boolean hasRouteColor() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string route_color = 8;</code>
     *
     * <pre>
     * Route color designation that matches public facing material. D
     * </pre>
     */
    public java.lang.String getRouteColor() {
      java.lang.Object ref = routeColor_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          routeColor_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string route_color = 8;</code>
     *
     * <pre>
     * Route color designation that matches public facing material. D
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRouteColorBytes() {
      java.lang.Object ref = routeColor_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        routeColor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUTE_TEXT_COLOR_FIELD_NUMBER = 9;
    private java.lang.Object routeTextColor_;
    /**
     * <code>optional string route_text_color = 9;</code>
     *
     * <pre>
     * Legible color to use for text drawn against a background of route_color.
     * </pre>
     */
    public boolean hasRouteTextColor() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional string route_text_color = 9;</code>
     *
     * <pre>
     * Legible color to use for text drawn against a background of route_color.
     * </pre>
     */
    public java.lang.String getRouteTextColor() {
      java.lang.Object ref = routeTextColor_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          routeTextColor_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string route_text_color = 9;</code>
     *
     * <pre>
     * Legible color to use for text drawn against a background of route_color.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRouteTextColorBytes() {
      java.lang.Object ref = routeTextColor_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        routeTextColor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUTE_SORT_ORDER_FIELD_NUMBER = 10;
    private int routeSortOrder_;
    /**
     * <code>optional uint32 route_sort_order = 10;</code>
     *
     * <pre>
     * Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first.
     * </pre>
     */
    public boolean hasRouteSortOrder() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 route_sort_order = 10;</code>
     *
     * <pre>
     * Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first.
     * </pre>
     */
    public int getRouteSortOrder() {
      return routeSortOrder_;
    }

    private void initFields() {
      routeId_ = "";
      agencyId_ = "";
      routeShortName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      routeLongName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      routeDesc_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      routeType_ = com.google.transit.realtime.GtfsRealtime.Route.RouteType.LIGHT_RAIL;
      routeUrl_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      routeColor_ = "";
      routeTextColor_ = "";
      routeSortOrder_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasRouteId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAgencyId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRouteType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasRouteShortName()) {
        if (!getRouteShortName().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRouteLongName()) {
        if (!getRouteLongName().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRouteDesc()) {
        if (!getRouteDesc().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRouteUrl()) {
        if (!getRouteUrl().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getAgencyIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, routeShortName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, routeLongName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, routeDesc_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, routeType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, routeUrl_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getRouteColorBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(9, getRouteTextColorBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, routeSortOrder_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getRouteIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getAgencyIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, routeShortName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, routeLongName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, routeDesc_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, routeType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, routeUrl_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getRouteColorBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, getRouteTextColorBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, routeSortOrder_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.Route parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Route parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.Route prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.Route}
     *
     * <pre>
     * Describes new routes. A route is a group of trips that are displayed to riders as a single service.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.Route)
        com.google.transit.realtime.GtfsRealtime.RouteOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Route_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Route_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.Route.class, com.google.transit.realtime.GtfsRealtime.Route.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.Route.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRouteShortNameFieldBuilder();
          getRouteLongNameFieldBuilder();
          getRouteDescFieldBuilder();
          getRouteUrlFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        routeId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        agencyId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (routeShortNameBuilder_ == null) {
          routeShortName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          routeShortNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (routeLongNameBuilder_ == null) {
          routeLongName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          routeLongNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (routeDescBuilder_ == null) {
          routeDesc_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          routeDescBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        routeType_ = com.google.transit.realtime.GtfsRealtime.Route.RouteType.LIGHT_RAIL;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (routeUrlBuilder_ == null) {
          routeUrl_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          routeUrlBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        routeColor_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        routeTextColor_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        routeSortOrder_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Route_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.Route getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.Route.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.Route build() {
        com.google.transit.realtime.GtfsRealtime.Route result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.Route buildPartial() {
        com.google.transit.realtime.GtfsRealtime.Route result = new com.google.transit.realtime.GtfsRealtime.Route(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.routeId_ = routeId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.agencyId_ = agencyId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (routeShortNameBuilder_ == null) {
          result.routeShortName_ = routeShortName_;
        } else {
          result.routeShortName_ = routeShortNameBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (routeLongNameBuilder_ == null) {
          result.routeLongName_ = routeLongName_;
        } else {
          result.routeLongName_ = routeLongNameBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (routeDescBuilder_ == null) {
          result.routeDesc_ = routeDesc_;
        } else {
          result.routeDesc_ = routeDescBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.routeType_ = routeType_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (routeUrlBuilder_ == null) {
          result.routeUrl_ = routeUrl_;
        } else {
          result.routeUrl_ = routeUrlBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.routeColor_ = routeColor_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.routeTextColor_ = routeTextColor_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.routeSortOrder_ = routeSortOrder_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.Route) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.Route)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.Route other) {
        if (other == com.google.transit.realtime.GtfsRealtime.Route.getDefaultInstance()) return this;
        if (other.hasRouteId()) {
          bitField0_ |= 0x00000001;
          routeId_ = other.routeId_;
          onChanged();
        }
        if (other.hasAgencyId()) {
          bitField0_ |= 0x00000002;
          agencyId_ = other.agencyId_;
          onChanged();
        }
        if (other.hasRouteShortName()) {
          mergeRouteShortName(other.getRouteShortName());
        }
        if (other.hasRouteLongName()) {
          mergeRouteLongName(other.getRouteLongName());
        }
        if (other.hasRouteDesc()) {
          mergeRouteDesc(other.getRouteDesc());
        }
        if (other.hasRouteType()) {
          setRouteType(other.getRouteType());
        }
        if (other.hasRouteUrl()) {
          mergeRouteUrl(other.getRouteUrl());
        }
        if (other.hasRouteColor()) {
          bitField0_ |= 0x00000080;
          routeColor_ = other.routeColor_;
          onChanged();
        }
        if (other.hasRouteTextColor()) {
          bitField0_ |= 0x00000100;
          routeTextColor_ = other.routeTextColor_;
          onChanged();
        }
        if (other.hasRouteSortOrder()) {
          setRouteSortOrder(other.getRouteSortOrder());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRouteId()) {
          
          return false;
        }
        if (!hasAgencyId()) {
          
          return false;
        }
        if (!hasRouteType()) {
          
          return false;
        }
        if (hasRouteShortName()) {
          if (!getRouteShortName().isInitialized()) {
            
            return false;
          }
        }
        if (hasRouteLongName()) {
          if (!getRouteLongName().isInitialized()) {
            
            return false;
          }
        }
        if (hasRouteDesc()) {
          if (!getRouteDesc().isInitialized()) {
            
            return false;
          }
        }
        if (hasRouteUrl()) {
          if (!getRouteUrl().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.Route parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.Route) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object routeId_ = "";
      /**
       * <code>required string route_id = 1;</code>
       *
       * <pre>
       *  Identifier of the route. Must be different than any route_id defined in the GTFS.
       * </pre>
       */
      public boolean hasRouteId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string route_id = 1;</code>
       *
       * <pre>
       *  Identifier of the route. Must be different than any route_id defined in the GTFS.
       * </pre>
       */
      public java.lang.String getRouteId() {
        java.lang.Object ref = routeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            routeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string route_id = 1;</code>
       *
       * <pre>
       *  Identifier of the route. Must be different than any route_id defined in the GTFS.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRouteIdBytes() {
        java.lang.Object ref = routeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          routeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string route_id = 1;</code>
       *
       * <pre>
       *  Identifier of the route. Must be different than any route_id defined in the GTFS.
       * </pre>
       */
      public Builder setRouteId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        routeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string route_id = 1;</code>
       *
       * <pre>
       *  Identifier of the route. Must be different than any route_id defined in the GTFS.
       * </pre>
       */
      public Builder clearRouteId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        routeId_ = getDefaultInstance().getRouteId();
        onChanged();
        return this;
      }
      /**
       * <code>required string route_id = 1;</code>
       *
       * <pre>
       *  Identifier of the route. Must be different than any route_id defined in the GTFS.
       * </pre>
       */
      public Builder setRouteIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        routeId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object agencyId_ = "";
      /**
       * <code>required string agency_id = 2;</code>
       *
       * <pre>
       * Identifies a transit brand which is often synonymous with a transit agency.
       * </pre>
       */
      public boolean hasAgencyId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string agency_id = 2;</code>
       *
       * <pre>
       * Identifies a transit brand which is often synonymous with a transit agency.
       * </pre>
       */
      public java.lang.String getAgencyId() {
        java.lang.Object ref = agencyId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            agencyId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string agency_id = 2;</code>
       *
       * <pre>
       * Identifies a transit brand which is often synonymous with a transit agency.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAgencyIdBytes() {
        java.lang.Object ref = agencyId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          agencyId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string agency_id = 2;</code>
       *
       * <pre>
       * Identifies a transit brand which is often synonymous with a transit agency.
       * </pre>
       */
      public Builder setAgencyId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        agencyId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string agency_id = 2;</code>
       *
       * <pre>
       * Identifies a transit brand which is often synonymous with a transit agency.
       * </pre>
       */
      public Builder clearAgencyId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        agencyId_ = getDefaultInstance().getAgencyId();
        onChanged();
        return this;
      }
      /**
       * <code>required string agency_id = 2;</code>
       *
       * <pre>
       * Identifies a transit brand which is often synonymous with a transit agency.
       * </pre>
       */
      public Builder setAgencyIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        agencyId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString routeShortName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> routeShortNameBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      public boolean hasRouteShortName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteShortName() {
        if (routeShortNameBuilder_ == null) {
          return routeShortName_;
        } else {
          return routeShortNameBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      public Builder setRouteShortName(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (routeShortNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          routeShortName_ = value;
          onChanged();
        } else {
          routeShortNameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      public Builder setRouteShortName(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (routeShortNameBuilder_ == null) {
          routeShortName_ = builderForValue.build();
          onChanged();
        } else {
          routeShortNameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      public Builder mergeRouteShortName(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (routeShortNameBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              routeShortName_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            routeShortName_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(routeShortName_).mergeFrom(value).buildPartial();
          } else {
            routeShortName_ = value;
          }
          onChanged();
        } else {
          routeShortNameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      public Builder clearRouteShortName() {
        if (routeShortNameBuilder_ == null) {
          routeShortName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          routeShortNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getRouteShortNameBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getRouteShortNameFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteShortNameOrBuilder() {
        if (routeShortNameBuilder_ != null) {
          return routeShortNameBuilder_.getMessageOrBuilder();
        } else {
          return routeShortName_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_short_name = 3;</code>
       *
       * <pre>
       * Short name of a route.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getRouteShortNameFieldBuilder() {
        if (routeShortNameBuilder_ == null) {
          routeShortNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getRouteShortName(),
                  getParentForChildren(),
                  isClean());
          routeShortName_ = null;
        }
        return routeShortNameBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString routeLongName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> routeLongNameBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      public boolean hasRouteLongName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteLongName() {
        if (routeLongNameBuilder_ == null) {
          return routeLongName_;
        } else {
          return routeLongNameBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      public Builder setRouteLongName(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (routeLongNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          routeLongName_ = value;
          onChanged();
        } else {
          routeLongNameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      public Builder setRouteLongName(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (routeLongNameBuilder_ == null) {
          routeLongName_ = builderForValue.build();
          onChanged();
        } else {
          routeLongNameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      public Builder mergeRouteLongName(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (routeLongNameBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              routeLongName_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            routeLongName_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(routeLongName_).mergeFrom(value).buildPartial();
          } else {
            routeLongName_ = value;
          }
          onChanged();
        } else {
          routeLongNameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      public Builder clearRouteLongName() {
        if (routeLongNameBuilder_ == null) {
          routeLongName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          routeLongNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getRouteLongNameBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getRouteLongNameFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteLongNameOrBuilder() {
        if (routeLongNameBuilder_ != null) {
          return routeLongNameBuilder_.getMessageOrBuilder();
        } else {
          return routeLongName_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_long_name = 4;</code>
       *
       * <pre>
       * Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getRouteLongNameFieldBuilder() {
        if (routeLongNameBuilder_ == null) {
          routeLongNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getRouteLongName(),
                  getParentForChildren(),
                  isClean());
          routeLongName_ = null;
        }
        return routeLongNameBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString routeDesc_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> routeDescBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      public boolean hasRouteDesc() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteDesc() {
        if (routeDescBuilder_ == null) {
          return routeDesc_;
        } else {
          return routeDescBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      public Builder setRouteDesc(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (routeDescBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          routeDesc_ = value;
          onChanged();
        } else {
          routeDescBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      public Builder setRouteDesc(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (routeDescBuilder_ == null) {
          routeDesc_ = builderForValue.build();
          onChanged();
        } else {
          routeDescBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      public Builder mergeRouteDesc(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (routeDescBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              routeDesc_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            routeDesc_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(routeDesc_).mergeFrom(value).buildPartial();
          } else {
            routeDesc_ = value;
          }
          onChanged();
        } else {
          routeDescBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      public Builder clearRouteDesc() {
        if (routeDescBuilder_ == null) {
          routeDesc_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          routeDescBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getRouteDescBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getRouteDescFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteDescOrBuilder() {
        if (routeDescBuilder_ != null) {
          return routeDescBuilder_.getMessageOrBuilder();
        } else {
          return routeDesc_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_desc = 5;</code>
       *
       * <pre>
       * Description of a route that provides useful, quality information. Do not simply duplicate the name of the route.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getRouteDescFieldBuilder() {
        if (routeDescBuilder_ == null) {
          routeDescBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getRouteDesc(),
                  getParentForChildren(),
                  isClean());
          routeDesc_ = null;
        }
        return routeDescBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.Route.RouteType routeType_ = com.google.transit.realtime.GtfsRealtime.Route.RouteType.LIGHT_RAIL;
      /**
       * <code>required .transit_realtime.Route.RouteType route_type = 6;</code>
       *
       * <pre>
       * Indicates the type of transportation used on a route.
       * </pre>
       */
      public boolean hasRouteType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required .transit_realtime.Route.RouteType route_type = 6;</code>
       *
       * <pre>
       * Indicates the type of transportation used on a route.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.Route.RouteType getRouteType() {
        return routeType_;
      }
      /**
       * <code>required .transit_realtime.Route.RouteType route_type = 6;</code>
       *
       * <pre>
       * Indicates the type of transportation used on a route.
       * </pre>
       */
      public Builder setRouteType(com.google.transit.realtime.GtfsRealtime.Route.RouteType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        routeType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .transit_realtime.Route.RouteType route_type = 6;</code>
       *
       * <pre>
       * Indicates the type of transportation used on a route.
       * </pre>
       */
      public Builder clearRouteType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        routeType_ = com.google.transit.realtime.GtfsRealtime.Route.RouteType.LIGHT_RAIL;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString routeUrl_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> routeUrlBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      public boolean hasRouteUrl() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getRouteUrl() {
        if (routeUrlBuilder_ == null) {
          return routeUrl_;
        } else {
          return routeUrlBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      public Builder setRouteUrl(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (routeUrlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          routeUrl_ = value;
          onChanged();
        } else {
          routeUrlBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      public Builder setRouteUrl(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (routeUrlBuilder_ == null) {
          routeUrl_ = builderForValue.build();
          onChanged();
        } else {
          routeUrlBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      public Builder mergeRouteUrl(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (routeUrlBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              routeUrl_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            routeUrl_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(routeUrl_).mergeFrom(value).buildPartial();
          } else {
            routeUrl_ = value;
          }
          onChanged();
        } else {
          routeUrlBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      public Builder clearRouteUrl() {
        if (routeUrlBuilder_ == null) {
          routeUrl_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          routeUrlBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getRouteUrlBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getRouteUrlFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getRouteUrlOrBuilder() {
        if (routeUrlBuilder_ != null) {
          return routeUrlBuilder_.getMessageOrBuilder();
        } else {
          return routeUrl_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString route_url = 7;</code>
       *
       * <pre>
       * URL of a web page about the particular route. Should be different from the agency.agency_url value.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getRouteUrlFieldBuilder() {
        if (routeUrlBuilder_ == null) {
          routeUrlBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getRouteUrl(),
                  getParentForChildren(),
                  isClean());
          routeUrl_ = null;
        }
        return routeUrlBuilder_;
      }

      private java.lang.Object routeColor_ = "";
      /**
       * <code>optional string route_color = 8;</code>
       *
       * <pre>
       * Route color designation that matches public facing material. D
       * </pre>
       */
      public boolean hasRouteColor() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string route_color = 8;</code>
       *
       * <pre>
       * Route color designation that matches public facing material. D
       * </pre>
       */
      public java.lang.String getRouteColor() {
        java.lang.Object ref = routeColor_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            routeColor_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string route_color = 8;</code>
       *
       * <pre>
       * Route color designation that matches public facing material. D
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRouteColorBytes() {
        java.lang.Object ref = routeColor_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          routeColor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string route_color = 8;</code>
       *
       * <pre>
       * Route color designation that matches public facing material. D
       * </pre>
       */
      public Builder setRouteColor(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        routeColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_color = 8;</code>
       *
       * <pre>
       * Route color designation that matches public facing material. D
       * </pre>
       */
      public Builder clearRouteColor() {
        bitField0_ = (bitField0_ & ~0x00000080);
        routeColor_ = getDefaultInstance().getRouteColor();
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_color = 8;</code>
       *
       * <pre>
       * Route color designation that matches public facing material. D
       * </pre>
       */
      public Builder setRouteColorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        routeColor_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object routeTextColor_ = "";
      /**
       * <code>optional string route_text_color = 9;</code>
       *
       * <pre>
       * Legible color to use for text drawn against a background of route_color.
       * </pre>
       */
      public boolean hasRouteTextColor() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional string route_text_color = 9;</code>
       *
       * <pre>
       * Legible color to use for text drawn against a background of route_color.
       * </pre>
       */
      public java.lang.String getRouteTextColor() {
        java.lang.Object ref = routeTextColor_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            routeTextColor_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string route_text_color = 9;</code>
       *
       * <pre>
       * Legible color to use for text drawn against a background of route_color.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRouteTextColorBytes() {
        java.lang.Object ref = routeTextColor_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          routeTextColor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string route_text_color = 9;</code>
       *
       * <pre>
       * Legible color to use for text drawn against a background of route_color.
       * </pre>
       */
      public Builder setRouteTextColor(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        routeTextColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_text_color = 9;</code>
       *
       * <pre>
       * Legible color to use for text drawn against a background of route_color.
       * </pre>
       */
      public Builder clearRouteTextColor() {
        bitField0_ = (bitField0_ & ~0x00000100);
        routeTextColor_ = getDefaultInstance().getRouteTextColor();
        onChanged();
        return this;
      }
      /**
       * <code>optional string route_text_color = 9;</code>
       *
       * <pre>
       * Legible color to use for text drawn against a background of route_color.
       * </pre>
       */
      public Builder setRouteTextColorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        routeTextColor_ = value;
        onChanged();
        return this;
      }

      private int routeSortOrder_ ;
      /**
       * <code>optional uint32 route_sort_order = 10;</code>
       *
       * <pre>
       * Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first.
       * </pre>
       */
      public boolean hasRouteSortOrder() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 route_sort_order = 10;</code>
       *
       * <pre>
       * Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first.
       * </pre>
       */
      public int getRouteSortOrder() {
        return routeSortOrder_;
      }
      /**
       * <code>optional uint32 route_sort_order = 10;</code>
       *
       * <pre>
       * Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first.
       * </pre>
       */
      public Builder setRouteSortOrder(int value) {
        bitField0_ |= 0x00000200;
        routeSortOrder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 route_sort_order = 10;</code>
       *
       * <pre>
       * Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first.
       * </pre>
       */
      public Builder clearRouteSortOrder() {
        bitField0_ = (bitField0_ & ~0x00000200);
        routeSortOrder_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.Route)
    }

    static {
      defaultInstance = new Route(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.Route)
  }

  public interface StopOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.Stop)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string stop_id = 1;</code>
     *
     * <pre>
     *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
     * </pre>
     */
    boolean hasStopId();
    /**
     * <code>required string stop_id = 1;</code>
     *
     * <pre>
     *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
     * </pre>
     */
    java.lang.String getStopId();
    /**
     * <code>required string stop_id = 1;</code>
     *
     * <pre>
     *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStopIdBytes();

    /**
     * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
     *
     * <pre>
     * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
     * information systems or printed on signage to make it easier for riders to get information for a particular location.
     * </pre>
     */
    boolean hasStopCode();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
     *
     * <pre>
     * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
     * information systems or printed on signage to make it easier for riders to get information for a particular location.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getStopCode();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
     *
     * <pre>
     * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
     * information systems or printed on signage to make it easier for riders to get information for a particular location.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopCodeOrBuilder();

    /**
     * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
     *
     * <pre>
     * Name of the location. Use a name that people will understand in the local and tourist vernacular.
     * </pre>
     */
    boolean hasStopName();
    /**
     * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
     *
     * <pre>
     * Name of the location. Use a name that people will understand in the local and tourist vernacular.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getStopName();
    /**
     * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
     *
     * <pre>
     * Name of the location. Use a name that people will understand in the local and tourist vernacular.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopNameOrBuilder();

    /**
     * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
     *
     * <pre>
     * Description of the location that provides useful, quality information.
     * </pre>
     */
    boolean hasStopDesc();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
     *
     * <pre>
     * Description of the location that provides useful, quality information.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getStopDesc();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
     *
     * <pre>
     * Description of the location that provides useful, quality information.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopDescOrBuilder();

    /**
     * <code>required float stop_lat = 5;</code>
     *
     * <pre>
     * Latitude of the location.
     * </pre>
     */
    boolean hasStopLat();
    /**
     * <code>required float stop_lat = 5;</code>
     *
     * <pre>
     * Latitude of the location.
     * </pre>
     */
    float getStopLat();

    /**
     * <code>required float stop_lon = 6;</code>
     *
     * <pre>
     * Longitude of the location.
     * </pre>
     */
    boolean hasStopLon();
    /**
     * <code>required float stop_lon = 6;</code>
     *
     * <pre>
     * Longitude of the location.
     * </pre>
     */
    float getStopLon();

    /**
     * <code>optional string zone_id = 7;</code>
     *
     * <pre>
     * Identifies the fare zone for a stop.
     * </pre>
     */
    boolean hasZoneId();
    /**
     * <code>optional string zone_id = 7;</code>
     *
     * <pre>
     * Identifies the fare zone for a stop.
     * </pre>
     */
    java.lang.String getZoneId();
    /**
     * <code>optional string zone_id = 7;</code>
     *
     * <pre>
     * Identifies the fare zone for a stop.
     * </pre>
     */
    com.google.protobuf.ByteString
        getZoneIdBytes();

    /**
     * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
     *
     * <pre>
     * URL of a web page about the location.
     * </pre>
     */
    boolean hasStopUrl();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
     *
     * <pre>
     * URL of a web page about the location.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedString getStopUrl();
    /**
     * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
     *
     * <pre>
     * URL of a web page about the location.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopUrlOrBuilder();

    /**
     * <code>optional string parent_station = 9;</code>
     *
     * <pre>
     * Defines hierarchy between the different locations defined in stops.txt.
     * </pre>
     */
    boolean hasParentStation();
    /**
     * <code>optional string parent_station = 9;</code>
     *
     * <pre>
     * Defines hierarchy between the different locations defined in stops.txt.
     * </pre>
     */
    java.lang.String getParentStation();
    /**
     * <code>optional string parent_station = 9;</code>
     *
     * <pre>
     * Defines hierarchy between the different locations defined in stops.txt.
     * </pre>
     */
    com.google.protobuf.ByteString
        getParentStationBytes();

    /**
     * <code>optional string stop_timezone = 10;</code>
     *
     * <pre>
     * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
     * </pre>
     */
    boolean hasStopTimezone();
    /**
     * <code>optional string stop_timezone = 10;</code>
     *
     * <pre>
     * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
     * </pre>
     */
    java.lang.String getStopTimezone();
    /**
     * <code>optional string stop_timezone = 10;</code>
     *
     * <pre>
     * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStopTimezoneBytes();

    /**
     * <code>optional .transit_realtime.Stop.WheelchairBoardingStatus wheelchair_boarding = 11 [default = UNKNOWN_WHEELCHAIR_BOARDING];</code>
     *
     * <pre>
     * Indicates whether wheelchair boardings are possible from the location.
     * </pre>
     */
    boolean hasWheelchairBoarding();
    /**
     * <code>optional .transit_realtime.Stop.WheelchairBoardingStatus wheelchair_boarding = 11 [default = UNKNOWN_WHEELCHAIR_BOARDING];</code>
     *
     * <pre>
     * Indicates whether wheelchair boardings are possible from the location.
     * </pre>
     */
    com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus getWheelchairBoarding();

    /**
     * <code>optional string level_id = 12;</code>
     *
     * <pre>
     * Level of the location.
     * </pre>
     */
    boolean hasLevelId();
    /**
     * <code>optional string level_id = 12;</code>
     *
     * <pre>
     * Level of the location.
     * </pre>
     */
    java.lang.String getLevelId();
    /**
     * <code>optional string level_id = 12;</code>
     *
     * <pre>
     * Level of the location.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLevelIdBytes();

    /**
     * <code>optional string platform_code = 13;</code>
     *
     * <pre>
     * Platform identifier for a platform stop.
     * </pre>
     */
    boolean hasPlatformCode();
    /**
     * <code>optional string platform_code = 13;</code>
     *
     * <pre>
     * Platform identifier for a platform stop.
     * </pre>
     */
    java.lang.String getPlatformCode();
    /**
     * <code>optional string platform_code = 13;</code>
     *
     * <pre>
     * Platform identifier for a platform stop.
     * </pre>
     */
    com.google.protobuf.ByteString
        getPlatformCodeBytes();
  }
  /**
   * Protobuf type {@code transit_realtime.Stop}
   *
   * <pre>
   * Describes new stops where vehicles pick up or drop off riders.
   * </pre>
   */
  public static final class Stop extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.Stop)
      StopOrBuilder {
    // Use Stop.newBuilder() to construct.
    private Stop(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Stop(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Stop defaultInstance;
    public static Stop getDefaultInstance() {
      return defaultInstance;
    }

    public Stop getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Stop(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              stopId_ = bs;
              break;
            }
            case 18: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = stopCode_.toBuilder();
              }
              stopCode_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stopCode_);
                stopCode_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = stopName_.toBuilder();
              }
              stopName_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stopName_);
                stopName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = stopDesc_.toBuilder();
              }
              stopDesc_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stopDesc_);
                stopDesc_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              stopLat_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              stopLon_ = input.readFloat();
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              zoneId_ = bs;
              break;
            }
            case 66: {
              com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = stopUrl_.toBuilder();
              }
              stopUrl_ = input.readMessage(com.google.transit.realtime.GtfsRealtime.TranslatedString.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stopUrl_);
                stopUrl_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000100;
              parentStation_ = bs;
              break;
            }
            case 82: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000200;
              stopTimezone_ = bs;
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus value = com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                wheelchairBoarding_ = value;
              }
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000800;
              levelId_ = bs;
              break;
            }
            case 106: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00001000;
              platformCode_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Stop_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Stop_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtime.Stop.class, com.google.transit.realtime.GtfsRealtime.Stop.Builder.class);
    }

    public static com.google.protobuf.Parser<Stop> PARSER =
        new com.google.protobuf.AbstractParser<Stop>() {
      public Stop parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Stop(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Stop> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code transit_realtime.Stop.WheelchairBoardingStatus}
     *
     * <pre>
     * Valid options for wheelchair_boarding:
     * </pre>
     */
    public enum WheelchairBoardingStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_WHEELCHAIR_BOARDING = 0;</code>
       */
      UNKNOWN_WHEELCHAIR_BOARDING(0, 0),
      /**
       * <code>WHEELCHAIR_ACCESSIBLE = 1;</code>
       */
      WHEELCHAIR_ACCESSIBLE(1, 1),
      /**
       * <code>NOT_WHEELCHAIR_ACCESSIBLE = 2;</code>
       */
      NOT_WHEELCHAIR_ACCESSIBLE(2, 2),
      ;

      /**
       * <code>UNKNOWN_WHEELCHAIR_BOARDING = 0;</code>
       */
      public static final int UNKNOWN_WHEELCHAIR_BOARDING_VALUE = 0;
      /**
       * <code>WHEELCHAIR_ACCESSIBLE = 1;</code>
       */
      public static final int WHEELCHAIR_ACCESSIBLE_VALUE = 1;
      /**
       * <code>NOT_WHEELCHAIR_ACCESSIBLE = 2;</code>
       */
      public static final int NOT_WHEELCHAIR_ACCESSIBLE_VALUE = 2;


      public final int getNumber() { return value; }

      public static WheelchairBoardingStatus valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_WHEELCHAIR_BOARDING;
          case 1: return WHEELCHAIR_ACCESSIBLE;
          case 2: return NOT_WHEELCHAIR_ACCESSIBLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WheelchairBoardingStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<WheelchairBoardingStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WheelchairBoardingStatus>() {
              public WheelchairBoardingStatus findValueByNumber(int number) {
                return WheelchairBoardingStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.Stop.getDescriptor().getEnumTypes().get(0);
      }

      private static final WheelchairBoardingStatus[] VALUES = values();

      public static WheelchairBoardingStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private WheelchairBoardingStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.Stop.WheelchairBoardingStatus)
    }

    private int bitField0_;
    public static final int STOP_ID_FIELD_NUMBER = 1;
    private java.lang.Object stopId_;
    /**
     * <code>required string stop_id = 1;</code>
     *
     * <pre>
     *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
     * </pre>
     */
    public boolean hasStopId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string stop_id = 1;</code>
     *
     * <pre>
     *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
     * </pre>
     */
    public java.lang.String getStopId() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string stop_id = 1;</code>
     *
     * <pre>
     *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStopIdBytes() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STOP_CODE_FIELD_NUMBER = 2;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString stopCode_;
    /**
     * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
     *
     * <pre>
     * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
     * information systems or printed on signage to make it easier for riders to get information for a particular location.
     * </pre>
     */
    public boolean hasStopCode() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
     *
     * <pre>
     * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
     * information systems or printed on signage to make it easier for riders to get information for a particular location.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopCode() {
      return stopCode_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
     *
     * <pre>
     * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
     * information systems or printed on signage to make it easier for riders to get information for a particular location.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopCodeOrBuilder() {
      return stopCode_;
    }

    public static final int STOP_NAME_FIELD_NUMBER = 3;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString stopName_;
    /**
     * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
     *
     * <pre>
     * Name of the location. Use a name that people will understand in the local and tourist vernacular.
     * </pre>
     */
    public boolean hasStopName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
     *
     * <pre>
     * Name of the location. Use a name that people will understand in the local and tourist vernacular.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopName() {
      return stopName_;
    }
    /**
     * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
     *
     * <pre>
     * Name of the location. Use a name that people will understand in the local and tourist vernacular.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopNameOrBuilder() {
      return stopName_;
    }

    public static final int STOP_DESC_FIELD_NUMBER = 4;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString stopDesc_;
    /**
     * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
     *
     * <pre>
     * Description of the location that provides useful, quality information.
     * </pre>
     */
    public boolean hasStopDesc() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
     *
     * <pre>
     * Description of the location that provides useful, quality information.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopDesc() {
      return stopDesc_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
     *
     * <pre>
     * Description of the location that provides useful, quality information.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopDescOrBuilder() {
      return stopDesc_;
    }

    public static final int STOP_LAT_FIELD_NUMBER = 5;
    private float stopLat_;
    /**
     * <code>required float stop_lat = 5;</code>
     *
     * <pre>
     * Latitude of the location.
     * </pre>
     */
    public boolean hasStopLat() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float stop_lat = 5;</code>
     *
     * <pre>
     * Latitude of the location.
     * </pre>
     */
    public float getStopLat() {
      return stopLat_;
    }

    public static final int STOP_LON_FIELD_NUMBER = 6;
    private float stopLon_;
    /**
     * <code>required float stop_lon = 6;</code>
     *
     * <pre>
     * Longitude of the location.
     * </pre>
     */
    public boolean hasStopLon() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float stop_lon = 6;</code>
     *
     * <pre>
     * Longitude of the location.
     * </pre>
     */
    public float getStopLon() {
      return stopLon_;
    }

    public static final int ZONE_ID_FIELD_NUMBER = 7;
    private java.lang.Object zoneId_;
    /**
     * <code>optional string zone_id = 7;</code>
     *
     * <pre>
     * Identifies the fare zone for a stop.
     * </pre>
     */
    public boolean hasZoneId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string zone_id = 7;</code>
     *
     * <pre>
     * Identifies the fare zone for a stop.
     * </pre>
     */
    public java.lang.String getZoneId() {
      java.lang.Object ref = zoneId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          zoneId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string zone_id = 7;</code>
     *
     * <pre>
     * Identifies the fare zone for a stop.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getZoneIdBytes() {
      java.lang.Object ref = zoneId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        zoneId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STOP_URL_FIELD_NUMBER = 8;
    private com.google.transit.realtime.GtfsRealtime.TranslatedString stopUrl_;
    /**
     * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
     *
     * <pre>
     * URL of a web page about the location.
     * </pre>
     */
    public boolean hasStopUrl() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
     *
     * <pre>
     * URL of a web page about the location.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopUrl() {
      return stopUrl_;
    }
    /**
     * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
     *
     * <pre>
     * URL of a web page about the location.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopUrlOrBuilder() {
      return stopUrl_;
    }

    public static final int PARENT_STATION_FIELD_NUMBER = 9;
    private java.lang.Object parentStation_;
    /**
     * <code>optional string parent_station = 9;</code>
     *
     * <pre>
     * Defines hierarchy between the different locations defined in stops.txt.
     * </pre>
     */
    public boolean hasParentStation() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional string parent_station = 9;</code>
     *
     * <pre>
     * Defines hierarchy between the different locations defined in stops.txt.
     * </pre>
     */
    public java.lang.String getParentStation() {
      java.lang.Object ref = parentStation_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          parentStation_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string parent_station = 9;</code>
     *
     * <pre>
     * Defines hierarchy between the different locations defined in stops.txt.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getParentStationBytes() {
      java.lang.Object ref = parentStation_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        parentStation_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STOP_TIMEZONE_FIELD_NUMBER = 10;
    private java.lang.Object stopTimezone_;
    /**
     * <code>optional string stop_timezone = 10;</code>
     *
     * <pre>
     * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
     * </pre>
     */
    public boolean hasStopTimezone() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string stop_timezone = 10;</code>
     *
     * <pre>
     * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
     * </pre>
     */
    public java.lang.String getStopTimezone() {
      java.lang.Object ref = stopTimezone_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopTimezone_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string stop_timezone = 10;</code>
     *
     * <pre>
     * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStopTimezoneBytes() {
      java.lang.Object ref = stopTimezone_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopTimezone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int WHEELCHAIR_BOARDING_FIELD_NUMBER = 11;
    private com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus wheelchairBoarding_;
    /**
     * <code>optional .transit_realtime.Stop.WheelchairBoardingStatus wheelchair_boarding = 11 [default = UNKNOWN_WHEELCHAIR_BOARDING];</code>
     *
     * <pre>
     * Indicates whether wheelchair boardings are possible from the location.
     * </pre>
     */
    public boolean hasWheelchairBoarding() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .transit_realtime.Stop.WheelchairBoardingStatus wheelchair_boarding = 11 [default = UNKNOWN_WHEELCHAIR_BOARDING];</code>
     *
     * <pre>
     * Indicates whether wheelchair boardings are possible from the location.
     * </pre>
     */
    public com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus getWheelchairBoarding() {
      return wheelchairBoarding_;
    }

    public static final int LEVEL_ID_FIELD_NUMBER = 12;
    private java.lang.Object levelId_;
    /**
     * <code>optional string level_id = 12;</code>
     *
     * <pre>
     * Level of the location.
     * </pre>
     */
    public boolean hasLevelId() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional string level_id = 12;</code>
     *
     * <pre>
     * Level of the location.
     * </pre>
     */
    public java.lang.String getLevelId() {
      java.lang.Object ref = levelId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          levelId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string level_id = 12;</code>
     *
     * <pre>
     * Level of the location.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLevelIdBytes() {
      java.lang.Object ref = levelId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        levelId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PLATFORM_CODE_FIELD_NUMBER = 13;
    private java.lang.Object platformCode_;
    /**
     * <code>optional string platform_code = 13;</code>
     *
     * <pre>
     * Platform identifier for a platform stop.
     * </pre>
     */
    public boolean hasPlatformCode() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional string platform_code = 13;</code>
     *
     * <pre>
     * Platform identifier for a platform stop.
     * </pre>
     */
    public java.lang.String getPlatformCode() {
      java.lang.Object ref = platformCode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          platformCode_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string platform_code = 13;</code>
     *
     * <pre>
     * Platform identifier for a platform stop.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPlatformCodeBytes() {
      java.lang.Object ref = platformCode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        platformCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      stopId_ = "";
      stopCode_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      stopName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      stopDesc_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      stopLat_ = 0F;
      stopLon_ = 0F;
      zoneId_ = "";
      stopUrl_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      parentStation_ = "";
      stopTimezone_ = "";
      wheelchairBoarding_ = com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus.UNKNOWN_WHEELCHAIR_BOARDING;
      levelId_ = "";
      platformCode_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStopId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStopName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStopLat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStopLon()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasStopCode()) {
        if (!getStopCode().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getStopName().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasStopDesc()) {
        if (!getStopDesc().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasStopUrl()) {
        if (!getStopUrl().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getStopIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, stopCode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, stopName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, stopDesc_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, stopLat_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, stopLon_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, getZoneIdBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, stopUrl_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(9, getParentStationBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getStopTimezoneBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, wheelchairBoarding_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBytes(12, getLevelIdBytes());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(13, getPlatformCodeBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getStopIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, stopCode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, stopName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, stopDesc_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, stopLat_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, stopLon_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getZoneIdBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, stopUrl_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, getParentStationBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getStopTimezoneBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, wheelchairBoarding_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, getLevelIdBytes());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, getPlatformCodeBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtime.Stop parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtime.Stop parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtime.Stop prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.Stop}
     *
     * <pre>
     * Describes new stops where vehicles pick up or drop off riders.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.Stop)
        com.google.transit.realtime.GtfsRealtime.StopOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Stop_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Stop_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtime.Stop.class, com.google.transit.realtime.GtfsRealtime.Stop.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtime.Stop.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStopCodeFieldBuilder();
          getStopNameFieldBuilder();
          getStopDescFieldBuilder();
          getStopUrlFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        stopId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (stopCodeBuilder_ == null) {
          stopCode_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          stopCodeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (stopNameBuilder_ == null) {
          stopName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          stopNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (stopDescBuilder_ == null) {
          stopDesc_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          stopDescBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        stopLat_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        stopLon_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        zoneId_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        if (stopUrlBuilder_ == null) {
          stopUrl_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
        } else {
          stopUrlBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        parentStation_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        stopTimezone_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        wheelchairBoarding_ = com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus.UNKNOWN_WHEELCHAIR_BOARDING;
        bitField0_ = (bitField0_ & ~0x00000400);
        levelId_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        platformCode_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtime.internal_static_transit_realtime_Stop_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtime.Stop getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtime.Stop.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtime.Stop build() {
        com.google.transit.realtime.GtfsRealtime.Stop result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtime.Stop buildPartial() {
        com.google.transit.realtime.GtfsRealtime.Stop result = new com.google.transit.realtime.GtfsRealtime.Stop(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stopId_ = stopId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (stopCodeBuilder_ == null) {
          result.stopCode_ = stopCode_;
        } else {
          result.stopCode_ = stopCodeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (stopNameBuilder_ == null) {
          result.stopName_ = stopName_;
        } else {
          result.stopName_ = stopNameBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (stopDescBuilder_ == null) {
          result.stopDesc_ = stopDesc_;
        } else {
          result.stopDesc_ = stopDescBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.stopLat_ = stopLat_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.stopLon_ = stopLon_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.zoneId_ = zoneId_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (stopUrlBuilder_ == null) {
          result.stopUrl_ = stopUrl_;
        } else {
          result.stopUrl_ = stopUrlBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.parentStation_ = parentStation_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.stopTimezone_ = stopTimezone_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.wheelchairBoarding_ = wheelchairBoarding_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.levelId_ = levelId_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.platformCode_ = platformCode_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtime.Stop) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtime.Stop)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtime.Stop other) {
        if (other == com.google.transit.realtime.GtfsRealtime.Stop.getDefaultInstance()) return this;
        if (other.hasStopId()) {
          bitField0_ |= 0x00000001;
          stopId_ = other.stopId_;
          onChanged();
        }
        if (other.hasStopCode()) {
          mergeStopCode(other.getStopCode());
        }
        if (other.hasStopName()) {
          mergeStopName(other.getStopName());
        }
        if (other.hasStopDesc()) {
          mergeStopDesc(other.getStopDesc());
        }
        if (other.hasStopLat()) {
          setStopLat(other.getStopLat());
        }
        if (other.hasStopLon()) {
          setStopLon(other.getStopLon());
        }
        if (other.hasZoneId()) {
          bitField0_ |= 0x00000040;
          zoneId_ = other.zoneId_;
          onChanged();
        }
        if (other.hasStopUrl()) {
          mergeStopUrl(other.getStopUrl());
        }
        if (other.hasParentStation()) {
          bitField0_ |= 0x00000100;
          parentStation_ = other.parentStation_;
          onChanged();
        }
        if (other.hasStopTimezone()) {
          bitField0_ |= 0x00000200;
          stopTimezone_ = other.stopTimezone_;
          onChanged();
        }
        if (other.hasWheelchairBoarding()) {
          setWheelchairBoarding(other.getWheelchairBoarding());
        }
        if (other.hasLevelId()) {
          bitField0_ |= 0x00000800;
          levelId_ = other.levelId_;
          onChanged();
        }
        if (other.hasPlatformCode()) {
          bitField0_ |= 0x00001000;
          platformCode_ = other.platformCode_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStopId()) {
          
          return false;
        }
        if (!hasStopName()) {
          
          return false;
        }
        if (!hasStopLat()) {
          
          return false;
        }
        if (!hasStopLon()) {
          
          return false;
        }
        if (hasStopCode()) {
          if (!getStopCode().isInitialized()) {
            
            return false;
          }
        }
        if (!getStopName().isInitialized()) {
          
          return false;
        }
        if (hasStopDesc()) {
          if (!getStopDesc().isInitialized()) {
            
            return false;
          }
        }
        if (hasStopUrl()) {
          if (!getStopUrl().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtime.Stop parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtime.Stop) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object stopId_ = "";
      /**
       * <code>required string stop_id = 1;</code>
       *
       * <pre>
       *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
       * </pre>
       */
      public boolean hasStopId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string stop_id = 1;</code>
       *
       * <pre>
       *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
       * </pre>
       */
      public java.lang.String getStopId() {
        java.lang.Object ref = stopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string stop_id = 1;</code>
       *
       * <pre>
       *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStopIdBytes() {
        java.lang.Object ref = stopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string stop_id = 1;</code>
       *
       * <pre>
       *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
       * </pre>
       */
      public Builder setStopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        stopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string stop_id = 1;</code>
       *
       * <pre>
       *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
       * </pre>
       */
      public Builder clearStopId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stopId_ = getDefaultInstance().getStopId();
        onChanged();
        return this;
      }
      /**
       * <code>required string stop_id = 1;</code>
       *
       * <pre>
       *  Identifier of the stop. Must be different than any stop_id defines in the GTFS.
       * </pre>
       */
      public Builder setStopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        stopId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString stopCode_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> stopCodeBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      public boolean hasStopCode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopCode() {
        if (stopCodeBuilder_ == null) {
          return stopCode_;
        } else {
          return stopCodeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      public Builder setStopCode(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopCodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stopCode_ = value;
          onChanged();
        } else {
          stopCodeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      public Builder setStopCode(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (stopCodeBuilder_ == null) {
          stopCode_ = builderForValue.build();
          onChanged();
        } else {
          stopCodeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      public Builder mergeStopCode(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopCodeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              stopCode_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            stopCode_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(stopCode_).mergeFrom(value).buildPartial();
          } else {
            stopCode_ = value;
          }
          onChanged();
        } else {
          stopCodeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      public Builder clearStopCode() {
        if (stopCodeBuilder_ == null) {
          stopCode_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          stopCodeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getStopCodeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getStopCodeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopCodeOrBuilder() {
        if (stopCodeBuilder_ != null) {
          return stopCodeBuilder_.getMessageOrBuilder();
        } else {
          return stopCode_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_code = 2;</code>
       *
       * <pre>
       * Short text or a number that identifies the location for riders. These codes are often used in phone-based transit
       * information systems or printed on signage to make it easier for riders to get information for a particular location.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getStopCodeFieldBuilder() {
        if (stopCodeBuilder_ == null) {
          stopCodeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getStopCode(),
                  getParentForChildren(),
                  isClean());
          stopCode_ = null;
        }
        return stopCodeBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString stopName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> stopNameBuilder_;
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      public boolean hasStopName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopName() {
        if (stopNameBuilder_ == null) {
          return stopName_;
        } else {
          return stopNameBuilder_.getMessage();
        }
      }
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      public Builder setStopName(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stopName_ = value;
          onChanged();
        } else {
          stopNameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      public Builder setStopName(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (stopNameBuilder_ == null) {
          stopName_ = builderForValue.build();
          onChanged();
        } else {
          stopNameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      public Builder mergeStopName(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopNameBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              stopName_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            stopName_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(stopName_).mergeFrom(value).buildPartial();
          } else {
            stopName_ = value;
          }
          onChanged();
        } else {
          stopNameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      public Builder clearStopName() {
        if (stopNameBuilder_ == null) {
          stopName_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          stopNameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getStopNameBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getStopNameFieldBuilder().getBuilder();
      }
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopNameOrBuilder() {
        if (stopNameBuilder_ != null) {
          return stopNameBuilder_.getMessageOrBuilder();
        } else {
          return stopName_;
        }
      }
      /**
       * <code>required .transit_realtime.TranslatedString stop_name = 3;</code>
       *
       * <pre>
       * Name of the location. Use a name that people will understand in the local and tourist vernacular.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getStopNameFieldBuilder() {
        if (stopNameBuilder_ == null) {
          stopNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getStopName(),
                  getParentForChildren(),
                  isClean());
          stopName_ = null;
        }
        return stopNameBuilder_;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString stopDesc_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> stopDescBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      public boolean hasStopDesc() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopDesc() {
        if (stopDescBuilder_ == null) {
          return stopDesc_;
        } else {
          return stopDescBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      public Builder setStopDesc(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopDescBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stopDesc_ = value;
          onChanged();
        } else {
          stopDescBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      public Builder setStopDesc(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (stopDescBuilder_ == null) {
          stopDesc_ = builderForValue.build();
          onChanged();
        } else {
          stopDescBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      public Builder mergeStopDesc(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopDescBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              stopDesc_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            stopDesc_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(stopDesc_).mergeFrom(value).buildPartial();
          } else {
            stopDesc_ = value;
          }
          onChanged();
        } else {
          stopDescBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      public Builder clearStopDesc() {
        if (stopDescBuilder_ == null) {
          stopDesc_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          stopDescBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getStopDescBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getStopDescFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopDescOrBuilder() {
        if (stopDescBuilder_ != null) {
          return stopDescBuilder_.getMessageOrBuilder();
        } else {
          return stopDesc_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_desc = 4;</code>
       *
       * <pre>
       * Description of the location that provides useful, quality information.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getStopDescFieldBuilder() {
        if (stopDescBuilder_ == null) {
          stopDescBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getStopDesc(),
                  getParentForChildren(),
                  isClean());
          stopDesc_ = null;
        }
        return stopDescBuilder_;
      }

      private float stopLat_ ;
      /**
       * <code>required float stop_lat = 5;</code>
       *
       * <pre>
       * Latitude of the location.
       * </pre>
       */
      public boolean hasStopLat() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float stop_lat = 5;</code>
       *
       * <pre>
       * Latitude of the location.
       * </pre>
       */
      public float getStopLat() {
        return stopLat_;
      }
      /**
       * <code>required float stop_lat = 5;</code>
       *
       * <pre>
       * Latitude of the location.
       * </pre>
       */
      public Builder setStopLat(float value) {
        bitField0_ |= 0x00000010;
        stopLat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float stop_lat = 5;</code>
       *
       * <pre>
       * Latitude of the location.
       * </pre>
       */
      public Builder clearStopLat() {
        bitField0_ = (bitField0_ & ~0x00000010);
        stopLat_ = 0F;
        onChanged();
        return this;
      }

      private float stopLon_ ;
      /**
       * <code>required float stop_lon = 6;</code>
       *
       * <pre>
       * Longitude of the location.
       * </pre>
       */
      public boolean hasStopLon() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float stop_lon = 6;</code>
       *
       * <pre>
       * Longitude of the location.
       * </pre>
       */
      public float getStopLon() {
        return stopLon_;
      }
      /**
       * <code>required float stop_lon = 6;</code>
       *
       * <pre>
       * Longitude of the location.
       * </pre>
       */
      public Builder setStopLon(float value) {
        bitField0_ |= 0x00000020;
        stopLon_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float stop_lon = 6;</code>
       *
       * <pre>
       * Longitude of the location.
       * </pre>
       */
      public Builder clearStopLon() {
        bitField0_ = (bitField0_ & ~0x00000020);
        stopLon_ = 0F;
        onChanged();
        return this;
      }

      private java.lang.Object zoneId_ = "";
      /**
       * <code>optional string zone_id = 7;</code>
       *
       * <pre>
       * Identifies the fare zone for a stop.
       * </pre>
       */
      public boolean hasZoneId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string zone_id = 7;</code>
       *
       * <pre>
       * Identifies the fare zone for a stop.
       * </pre>
       */
      public java.lang.String getZoneId() {
        java.lang.Object ref = zoneId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            zoneId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string zone_id = 7;</code>
       *
       * <pre>
       * Identifies the fare zone for a stop.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getZoneIdBytes() {
        java.lang.Object ref = zoneId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          zoneId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string zone_id = 7;</code>
       *
       * <pre>
       * Identifies the fare zone for a stop.
       * </pre>
       */
      public Builder setZoneId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        zoneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string zone_id = 7;</code>
       *
       * <pre>
       * Identifies the fare zone for a stop.
       * </pre>
       */
      public Builder clearZoneId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        zoneId_ = getDefaultInstance().getZoneId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string zone_id = 7;</code>
       *
       * <pre>
       * Identifies the fare zone for a stop.
       * </pre>
       */
      public Builder setZoneIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        zoneId_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.TranslatedString stopUrl_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> stopUrlBuilder_;
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      public boolean hasStopUrl() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString getStopUrl() {
        if (stopUrlBuilder_ == null) {
          return stopUrl_;
        } else {
          return stopUrlBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      public Builder setStopUrl(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopUrlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stopUrl_ = value;
          onChanged();
        } else {
          stopUrlBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      public Builder setStopUrl(
          com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder builderForValue) {
        if (stopUrlBuilder_ == null) {
          stopUrl_ = builderForValue.build();
          onChanged();
        } else {
          stopUrlBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      public Builder mergeStopUrl(com.google.transit.realtime.GtfsRealtime.TranslatedString value) {
        if (stopUrlBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              stopUrl_ != com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance()) {
            stopUrl_ =
              com.google.transit.realtime.GtfsRealtime.TranslatedString.newBuilder(stopUrl_).mergeFrom(value).buildPartial();
          } else {
            stopUrl_ = value;
          }
          onChanged();
        } else {
          stopUrlBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      public Builder clearStopUrl() {
        if (stopUrlBuilder_ == null) {
          stopUrl_ = com.google.transit.realtime.GtfsRealtime.TranslatedString.getDefaultInstance();
          onChanged();
        } else {
          stopUrlBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder getStopUrlBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getStopUrlFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder getStopUrlOrBuilder() {
        if (stopUrlBuilder_ != null) {
          return stopUrlBuilder_.getMessageOrBuilder();
        } else {
          return stopUrl_;
        }
      }
      /**
       * <code>optional .transit_realtime.TranslatedString stop_url = 8;</code>
       *
       * <pre>
       * URL of a web page about the location.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder> 
          getStopUrlFieldBuilder() {
        if (stopUrlBuilder_ == null) {
          stopUrlBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.transit.realtime.GtfsRealtime.TranslatedString, com.google.transit.realtime.GtfsRealtime.TranslatedString.Builder, com.google.transit.realtime.GtfsRealtime.TranslatedStringOrBuilder>(
                  getStopUrl(),
                  getParentForChildren(),
                  isClean());
          stopUrl_ = null;
        }
        return stopUrlBuilder_;
      }

      private java.lang.Object parentStation_ = "";
      /**
       * <code>optional string parent_station = 9;</code>
       *
       * <pre>
       * Defines hierarchy between the different locations defined in stops.txt.
       * </pre>
       */
      public boolean hasParentStation() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional string parent_station = 9;</code>
       *
       * <pre>
       * Defines hierarchy between the different locations defined in stops.txt.
       * </pre>
       */
      public java.lang.String getParentStation() {
        java.lang.Object ref = parentStation_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            parentStation_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string parent_station = 9;</code>
       *
       * <pre>
       * Defines hierarchy between the different locations defined in stops.txt.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getParentStationBytes() {
        java.lang.Object ref = parentStation_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          parentStation_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string parent_station = 9;</code>
       *
       * <pre>
       * Defines hierarchy between the different locations defined in stops.txt.
       * </pre>
       */
      public Builder setParentStation(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        parentStation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string parent_station = 9;</code>
       *
       * <pre>
       * Defines hierarchy between the different locations defined in stops.txt.
       * </pre>
       */
      public Builder clearParentStation() {
        bitField0_ = (bitField0_ & ~0x00000100);
        parentStation_ = getDefaultInstance().getParentStation();
        onChanged();
        return this;
      }
      /**
       * <code>optional string parent_station = 9;</code>
       *
       * <pre>
       * Defines hierarchy between the different locations defined in stops.txt.
       * </pre>
       */
      public Builder setParentStationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        parentStation_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object stopTimezone_ = "";
      /**
       * <code>optional string stop_timezone = 10;</code>
       *
       * <pre>
       * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
       * </pre>
       */
      public boolean hasStopTimezone() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string stop_timezone = 10;</code>
       *
       * <pre>
       * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
       * </pre>
       */
      public java.lang.String getStopTimezone() {
        java.lang.Object ref = stopTimezone_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopTimezone_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string stop_timezone = 10;</code>
       *
       * <pre>
       * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStopTimezoneBytes() {
        java.lang.Object ref = stopTimezone_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopTimezone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string stop_timezone = 10;</code>
       *
       * <pre>
       * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
       * </pre>
       */
      public Builder setStopTimezone(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        stopTimezone_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string stop_timezone = 10;</code>
       *
       * <pre>
       * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
       * </pre>
       */
      public Builder clearStopTimezone() {
        bitField0_ = (bitField0_ & ~0x00000200);
        stopTimezone_ = getDefaultInstance().getStopTimezone();
        onChanged();
        return this;
      }
      /**
       * <code>optional string stop_timezone = 10;</code>
       *
       * <pre>
       * Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own.
       * </pre>
       */
      public Builder setStopTimezoneBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        stopTimezone_ = value;
        onChanged();
        return this;
      }

      private com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus wheelchairBoarding_ = com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus.UNKNOWN_WHEELCHAIR_BOARDING;
      /**
       * <code>optional .transit_realtime.Stop.WheelchairBoardingStatus wheelchair_boarding = 11 [default = UNKNOWN_WHEELCHAIR_BOARDING];</code>
       *
       * <pre>
       * Indicates whether wheelchair boardings are possible from the location.
       * </pre>
       */
      public boolean hasWheelchairBoarding() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .transit_realtime.Stop.WheelchairBoardingStatus wheelchair_boarding = 11 [default = UNKNOWN_WHEELCHAIR_BOARDING];</code>
       *
       * <pre>
       * Indicates whether wheelchair boardings are possible from the location.
       * </pre>
       */
      public com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus getWheelchairBoarding() {
        return wheelchairBoarding_;
      }
      /**
       * <code>optional .transit_realtime.Stop.WheelchairBoardingStatus wheelchair_boarding = 11 [default = UNKNOWN_WHEELCHAIR_BOARDING];</code>
       *
       * <pre>
       * Indicates whether wheelchair boardings are possible from the location.
       * </pre>
       */
      public Builder setWheelchairBoarding(com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        wheelchairBoarding_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.Stop.WheelchairBoardingStatus wheelchair_boarding = 11 [default = UNKNOWN_WHEELCHAIR_BOARDING];</code>
       *
       * <pre>
       * Indicates whether wheelchair boardings are possible from the location.
       * </pre>
       */
      public Builder clearWheelchairBoarding() {
        bitField0_ = (bitField0_ & ~0x00000400);
        wheelchairBoarding_ = com.google.transit.realtime.GtfsRealtime.Stop.WheelchairBoardingStatus.UNKNOWN_WHEELCHAIR_BOARDING;
        onChanged();
        return this;
      }

      private java.lang.Object levelId_ = "";
      /**
       * <code>optional string level_id = 12;</code>
       *
       * <pre>
       * Level of the location.
       * </pre>
       */
      public boolean hasLevelId() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string level_id = 12;</code>
       *
       * <pre>
       * Level of the location.
       * </pre>
       */
      public java.lang.String getLevelId() {
        java.lang.Object ref = levelId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            levelId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string level_id = 12;</code>
       *
       * <pre>
       * Level of the location.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLevelIdBytes() {
        java.lang.Object ref = levelId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          levelId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string level_id = 12;</code>
       *
       * <pre>
       * Level of the location.
       * </pre>
       */
      public Builder setLevelId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        levelId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string level_id = 12;</code>
       *
       * <pre>
       * Level of the location.
       * </pre>
       */
      public Builder clearLevelId() {
        bitField0_ = (bitField0_ & ~0x00000800);
        levelId_ = getDefaultInstance().getLevelId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string level_id = 12;</code>
       *
       * <pre>
       * Level of the location.
       * </pre>
       */
      public Builder setLevelIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        levelId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object platformCode_ = "";
      /**
       * <code>optional string platform_code = 13;</code>
       *
       * <pre>
       * Platform identifier for a platform stop.
       * </pre>
       */
      public boolean hasPlatformCode() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional string platform_code = 13;</code>
       *
       * <pre>
       * Platform identifier for a platform stop.
       * </pre>
       */
      public java.lang.String getPlatformCode() {
        java.lang.Object ref = platformCode_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            platformCode_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string platform_code = 13;</code>
       *
       * <pre>
       * Platform identifier for a platform stop.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPlatformCodeBytes() {
        java.lang.Object ref = platformCode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          platformCode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string platform_code = 13;</code>
       *
       * <pre>
       * Platform identifier for a platform stop.
       * </pre>
       */
      public Builder setPlatformCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        platformCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string platform_code = 13;</code>
       *
       * <pre>
       * Platform identifier for a platform stop.
       * </pre>
       */
      public Builder clearPlatformCode() {
        bitField0_ = (bitField0_ & ~0x00001000);
        platformCode_ = getDefaultInstance().getPlatformCode();
        onChanged();
        return this;
      }
      /**
       * <code>optional string platform_code = 13;</code>
       *
       * <pre>
       * Platform identifier for a platform stop.
       * </pre>
       */
      public Builder setPlatformCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        platformCode_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.Stop)
    }

    static {
      defaultInstance = new Stop(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.Stop)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_FeedMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_FeedMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_FeedHeader_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_FeedHeader_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_FeedEntity_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_FeedEntity_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_TripUpdate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_TripUpdate_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_VehiclePosition_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_VehiclePosition_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_Alert_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_Alert_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_TimeRange_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_TimeRange_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_Position_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_Position_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_TripDescriptor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_TripDescriptor_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_VehicleDescriptor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_VehicleDescriptor_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_EntitySelector_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_EntitySelector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_TranslatedString_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_TranslatedString_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_TranslatedString_Translation_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_TranslatedString_Translation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_TripProperties_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_TripProperties_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_VehicleProperties_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_VehicleProperties_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_StopTimeProperties_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_StopTimeProperties_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_Trip_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_Trip_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_StopTime_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_StopTime_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_Shape_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_Shape_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_ShapePoint_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_ShapePoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_Route_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_Route_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_Stop_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_Stop_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031proto/gtfs-realtime.proto\022\020transit_rea" +
      "ltime\"y\n\013FeedMessage\022,\n\006header\030\001 \002(\0132\034.t" +
      "ransit_realtime.FeedHeader\022,\n\006entity\030\002 \003" +
      "(\0132\034.transit_realtime.FeedEntity*\006\010\350\007\020\320\017" +
      "*\006\010\250F\020\220N\"\327\001\n\nFeedHeader\022\035\n\025gtfs_realtime" +
      "_version\030\001 \002(\t\022Q\n\016incrementality\030\002 \001(\0162+" +
      ".transit_realtime.FeedHeader.Incremental" +
      "ity:\014FULL_DATASET\022\021\n\ttimestamp\030\003 \001(\004\"4\n\016" +
      "Incrementality\022\020\n\014FULL_DATASET\020\000\022\020\n\014DIFF" +
      "ERENTIAL\020\001*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\356\002\n\nFeedEntit",
      "y\022\n\n\002id\030\001 \002(\t\022\031\n\nis_deleted\030\002 \001(\010:\005false" +
      "\0221\n\013trip_update\030\003 \001(\0132\034.transit_realtime" +
      ".TripUpdate\0222\n\007vehicle\030\004 \001(\0132!.transit_r" +
      "ealtime.VehiclePosition\022&\n\005alert\030\005 \001(\0132\027" +
      ".transit_realtime.Alert\022$\n\004trip\030\006 \001(\0132\026." +
      "transit_realtime.Trip\022&\n\005shape\030\007 \001(\0132\027.t" +
      "ransit_realtime.Shape\022&\n\005route\030\010 \001(\0132\027.t" +
      "ransit_realtime.Route\022$\n\004stop\030\t \001(\0132\026.tr" +
      "ansit_realtime.Stop*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\232\007\n\n" +
      "TripUpdate\022.\n\004trip\030\001 \002(\0132 .transit_realt",
      "ime.TripDescriptor\0224\n\007vehicle\030\003 \001(\0132#.tr" +
      "ansit_realtime.VehicleDescriptor\022E\n\020stop" +
      "_time_update\030\002 \003(\0132+.transit_realtime.Tr" +
      "ipUpdate.StopTimeUpdate\022\021\n\ttimestamp\030\004 \001" +
      "(\004\022\r\n\005delay\030\005 \001(\005\0229\n\017trip_properties\030\006 \001" +
      "(\0132 .transit_realtime.TripProperties\022?\n\022" +
      "vehicle_properties\030\007 \001(\0132#.transit_realt" +
      "ime.VehicleProperties\032h\n\rStopTimeEvent\022\r" +
      "\n\005delay\030\001 \001(\005\022\014\n\004time\030\002 \001(\003\022\023\n\013uncertain" +
      "ty\030\003 \001(\005\022\025\n\rschedule_time\030\004 \001(\003*\006\010\350\007\020\320\017*",
      "\006\010\250F\020\220N\032\306\003\n\016StopTimeUpdate\022\025\n\rstop_seque" +
      "nce\030\001 \001(\r\022\017\n\007stop_id\030\004 \001(\t\022;\n\007arrival\030\002 " +
      "\001(\0132*.transit_realtime.TripUpdate.StopTi" +
      "meEvent\022=\n\tdeparture\030\003 \001(\0132*.transit_rea" +
      "ltime.TripUpdate.StopTimeEvent\022j\n\025schedu" +
      "le_relationship\030\005 \001(\0162@.transit_realtime" +
      ".TripUpdate.StopTimeUpdate.ScheduleRelat" +
      "ionship:\tSCHEDULED\022B\n\024stop_time_properti" +
      "es\030\006 \001(\0132$.transit_realtime.StopTimeProp" +
      "erties\"P\n\024ScheduleRelationship\022\r\n\tSCHEDU",
      "LED\020\000\022\013\n\007SKIPPED\020\001\022\013\n\007NO_DATA\020\002\022\017\n\013UNSCH" +
      "EDULED\020\003*\006\010\350\007\020\320\017*\006\010\250F\020\220N*\006\010\350\007\020\320\017*\006\010\250F\020\220N" +
      "\"\350\006\n\017VehiclePosition\022.\n\004trip\030\001 \001(\0132 .tra" +
      "nsit_realtime.TripDescriptor\0224\n\007vehicle\030" +
      "\010 \001(\0132#.transit_realtime.VehicleDescript" +
      "or\022,\n\010position\030\002 \001(\0132\032.transit_realtime." +
      "Position\022\035\n\025current_stop_sequence\030\003 \001(\r\022" +
      "\017\n\007stop_id\030\007 \001(\t\022Z\n\016current_status\030\004 \001(\016" +
      "23.transit_realtime.VehiclePosition.Vehi" +
      "cleStopStatus:\rIN_TRANSIT_TO\022\021\n\ttimestam",
      "p\030\005 \001(\004\022K\n\020congestion_level\030\006 \001(\01621.tran" +
      "sit_realtime.VehiclePosition.CongestionL" +
      "evel\022K\n\020occupancy_status\030\t \001(\01621.transit" +
      "_realtime.VehiclePosition.OccupancyStatu" +
      "s\"G\n\021VehicleStopStatus\022\017\n\013INCOMING_AT\020\000\022" +
      "\016\n\nSTOPPED_AT\020\001\022\021\n\rIN_TRANSIT_TO\020\002\"}\n\017Co" +
      "ngestionLevel\022\034\n\030UNKNOWN_CONGESTION_LEVE" +
      "L\020\000\022\024\n\020RUNNING_SMOOTHLY\020\001\022\017\n\013STOP_AND_GO" +
      "\020\002\022\016\n\nCONGESTION\020\003\022\025\n\021SEVERE_CONGESTION\020" +
      "\004\"\257\001\n\017OccupancyStatus\022\t\n\005EMPTY\020\000\022\030\n\024MANY",
      "_SEATS_AVAILABLE\020\001\022\027\n\023FEW_SEATS_AVAILABL" +
      "E\020\002\022\026\n\022STANDING_ROOM_ONLY\020\003\022\036\n\032CRUSHED_S" +
      "TANDING_ROOM_ONLY\020\004\022\010\n\004FULL\020\005\022\034\n\030NOT_ACC" +
      "EPTING_PASSENGERS\020\006*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\200\t\n\005" +
      "Alert\0222\n\ractive_period\030\001 \003(\0132\033.transit_r" +
      "ealtime.TimeRange\0229\n\017informed_entity\030\005 \003" +
      "(\0132 .transit_realtime.EntitySelector\022;\n\005" +
      "cause\030\006 \001(\0162\035.transit_realtime.Alert.Cau" +
      "se:\rUNKNOWN_CAUSE\022>\n\006effect\030\007 \001(\0162\036.tran" +
      "sit_realtime.Alert.Effect:\016UNKNOWN_EFFEC",
      "T\022/\n\003url\030\010 \001(\0132\".transit_realtime.Transl" +
      "atedString\0227\n\013header_text\030\n \001(\0132\".transi" +
      "t_realtime.TranslatedString\022<\n\020descripti" +
      "on_text\030\013 \001(\0132\".transit_realtime.Transla" +
      "tedString\022;\n\017tts_header_text\030\014 \001(\0132\".tra" +
      "nsit_realtime.TranslatedString\022@\n\024tts_de" +
      "scription_text\030\r \001(\0132\".transit_realtime." +
      "TranslatedString\022O\n\016severity_level\030\016 \001(\016" +
      "2%.transit_realtime.Alert.SeverityLevel:" +
      "\020UNKNOWN_SEVERITY\"\330\001\n\005Cause\022\021\n\rUNKNOWN_C",
      "AUSE\020\001\022\017\n\013OTHER_CAUSE\020\002\022\025\n\021TECHNICAL_PRO" +
      "BLEM\020\003\022\n\n\006STRIKE\020\004\022\021\n\rDEMONSTRATION\020\005\022\014\n" +
      "\010ACCIDENT\020\006\022\013\n\007HOLIDAY\020\007\022\013\n\007WEATHER\020\010\022\017\n" +
      "\013MAINTENANCE\020\t\022\020\n\014CONSTRUCTION\020\n\022\023\n\017POLI" +
      "CE_ACTIVITY\020\013\022\025\n\021MEDICAL_EMERGENCY\020\014\"\335\001\n" +
      "\006Effect\022\016\n\nNO_SERVICE\020\001\022\023\n\017REDUCED_SERVI" +
      "CE\020\002\022\026\n\022SIGNIFICANT_DELAYS\020\003\022\n\n\006DETOUR\020\004" +
      "\022\026\n\022ADDITIONAL_SERVICE\020\005\022\024\n\020MODIFIED_SER" +
      "VICE\020\006\022\020\n\014OTHER_EFFECT\020\007\022\022\n\016UNKNOWN_EFFE" +
      "CT\020\010\022\016\n\nSTOP_MOVED\020\t\022\r\n\tNO_EFFECT\020\n\022\027\n\023A",
      "CCESSIBILITY_ISSUE\020\013\"H\n\rSeverityLevel\022\024\n" +
      "\020UNKNOWN_SEVERITY\020\001\022\010\n\004INFO\020\002\022\013\n\007WARNING" +
      "\020\003\022\n\n\006SEVERE\020\004*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"7\n\tTimeRa" +
      "nge\022\r\n\005start\030\001 \001(\004\022\013\n\003end\030\002 \001(\004*\006\010\350\007\020\320\017*" +
      "\006\010\250F\020\220N\"q\n\010Position\022\020\n\010latitude\030\001 \002(\002\022\021\n" +
      "\tlongitude\030\002 \002(\002\022\017\n\007bearing\030\003 \001(\002\022\020\n\010odo" +
      "meter\030\004 \001(\001\022\r\n\005speed\030\005 \001(\002*\006\010\350\007\020\320\017*\006\010\250F\020" +
      "\220N\"\321\002\n\016TripDescriptor\022\017\n\007trip_id\030\001 \001(\t\022\020" +
      "\n\010route_id\030\005 \001(\t\022\024\n\014direction_id\030\006 \001(\r\022\022" +
      "\n\nstart_time\030\002 \001(\t\022\022\n\nstart_date\030\003 \001(\t\022T",
      "\n\025schedule_relationship\030\004 \001(\01625.transit_" +
      "realtime.TripDescriptor.ScheduleRelation" +
      "ship\"x\n\024ScheduleRelationship\022\r\n\tSCHEDULE" +
      "D\020\000\022\r\n\005ADDED\020\001\032\002\010\001\022\017\n\013UNSCHEDULED\020\002\022\014\n\010C" +
      "ANCELED\020\003\022\023\n\013REPLACEMENT\020\005\032\002\010\001\022\016\n\nDUPLIC" +
      "ATED\020\006*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"U\n\021VehicleDescrip" +
      "tor\022\n\n\002id\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\025\n\rlicens" +
      "e_plate\030\003 \001(\t*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\260\001\n\016Entity" +
      "Selector\022\021\n\tagency_id\030\001 \001(\t\022\020\n\010route_id\030" +
      "\002 \001(\t\022\022\n\nroute_type\030\003 \001(\005\022.\n\004trip\030\004 \001(\0132",
      " .transit_realtime.TripDescriptor\022\017\n\007sto" +
      "p_id\030\005 \001(\t\022\024\n\014direction_id\030\006 \001(\r*\006\010\350\007\020\320\017" +
      "*\006\010\250F\020\220N\"\246\001\n\020TranslatedString\022C\n\013transla" +
      "tion\030\001 \003(\0132..transit_realtime.Translated" +
      "String.Translation\032=\n\013Translation\022\014\n\004tex" +
      "t\030\001 \002(\t\022\020\n\010language\030\002 \001(\t*\006\010\350\007\020\320\017*\006\010\250F\020\220" +
      "N*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\367\001\n\016TripProperties\022\017\n\007" +
      "trip_id\030\001 \002(\t\022\022\n\nstart_date\030\002 \002(\t\022\022\n\nsta" +
      "rt_time\030\003 \002(\t\022\020\n\010route_id\030\004 \001(\t\0229\n\rtrip_" +
      "headsign\030\005 \001(\0132\".transit_realtime.Transl",
      "atedString\022;\n\017trip_short_name\030\006 \001(\0132\".tr" +
      "ansit_realtime.TranslatedString\022\020\n\010block" +
      "_id\030\007 \001(\t\022\020\n\010shape_id\030\010 \001(\t\"\327\003\n\021VehicleP" +
      "roperties\022\177\n\025wheelchair_accessible\030\001 \001(\016" +
      "2>.transit_realtime.VehicleProperties.Wh" +
      "eelchairAccessibleStatus: UNKNOWN_WHEELC" +
      "HAIR_ACCESSIBILITY\022f\n\rbiked_allowed\030\002 \001(" +
      "\01626.transit_realtime.VehicleProperties.B" +
      "ikesAllowedStatus:\027UNKNOWN_BIKES_ALLOWAN" +
      "CE\"|\n\032WheelchairAccessibleStatus\022$\n UNKN",
      "OWN_WHEELCHAIR_ACCESSIBILITY\020\000\022\031\n\025WHEELC" +
      "HAIR_ACCESSIBLE\020\001\022\035\n\031NOT_WHEELCHAIR_ACCE" +
      "SSIBLE\020\002\"[\n\022BikesAllowedStatus\022\033\n\027UNKNOW" +
      "N_BIKES_ALLOWANCE\020\000\022\021\n\rBIKES_ALLOWED\020\001\022\025" +
      "\n\021BIKES_NOT_ALLOWED\020\002\"\242\004\n\022StopTimeProper" +
      "ties\022\023\n\013platform_id\030\001 \001(\t\0229\n\rstop_headsi" +
      "gn\030\002 \001(\0132\".transit_realtime.TranslatedSt" +
      "ring\022T\n\013pickup_type\030\003 \001(\0162/.transit_real" +
      "time.StopTimeProperties.PickupType:\016REGU" +
      "LAR_PICKUP\022Y\n\rdrop_off_type\030\004 \001(\01620.tran",
      "sit_realtime.StopTimeProperties.DropOffT" +
      "ype:\020REGULAR_DROP_OFF\022\033\n\023shape_dist_trav" +
      "eled\030\005 \001(\002\022\017\n\007stop_id\030\006 \001(\t\"i\n\nPickupTyp" +
      "e\022\022\n\016REGULAR_PICKUP\020\000\022\r\n\tNO_PICKUP\020\001\022\034\n\030" +
      "MUST_PHONE_AGENCY_PICKUP\020\002\022\032\n\026MUST_ASK_D" +
      "RIVER_PICKUP\020\003\"r\n\013DropOffType\022\024\n\020REGULAR" +
      "_DROP_OFF\020\000\022\017\n\013NO_DROP_OFF\020\001\022\036\n\032MUST_PHO" +
      "NE_AGENCY_DROP_OFF\020\002\022\034\n\030MUST_ASK_DRIVER_" +
      "DROP_OFF\020\003\"\373\004\n\004Trip\022\017\n\007trip_id\030\001 \002(\t\022\020\n\010" +
      "route_id\030\002 \001(\t\0229\n\rtrip_headsign\030\003 \002(\0132\".",
      "transit_realtime.TranslatedString\022\027\n\017tri" +
      "p_short_name\030\004 \002(\t\022\024\n\014direction_id\030\005 \001(\003" +
      "\022\020\n\010block_id\030\006 \001(\t\022\020\n\010shape_id\030\007 \001(\t\022r\n\025" +
      "wheelchair_accessible\030\010 \001(\01621.transit_re" +
      "altime.Trip.WheelchairAccessibleStatus: " +
      "UNKNOWN_WHEELCHAIR_ACCESSIBILITY\022Y\n\rbike" +
      "d_allowed\030\t \001(\0162).transit_realtime.Trip." +
      "BikesAllowedStatus:\027UNKNOWN_BIKES_ALLOWA" +
      "NCE\022\030\n\020replaces_trip_id\030\n \003(\t\"|\n\032Wheelch" +
      "airAccessibleStatus\022$\n UNKNOWN_WHEELCHAI",
      "R_ACCESSIBILITY\020\000\022\031\n\025WHEELCHAIR_ACCESSIB" +
      "LE\020\001\022\035\n\031NOT_WHEELCHAIR_ACCESSIBLE\020\002\"[\n\022B" +
      "ikesAllowedStatus\022\033\n\027UNKNOWN_BIKES_ALLOW" +
      "ANCE\020\000\022\021\n\rBIKES_ALLOWED\020\001\022\025\n\021BIKES_NOT_A" +
      "LLOWED\020\002\"\265\004\n\010StopTime\022\025\n\rstop_sequence\030\001" +
      " \002(\r\022\024\n\014arrival_time\030\002 \002(\004\022\026\n\016departure_" +
      "time\030\003 \002(\004\022\017\n\007stop_id\030\004 \002(\t\0229\n\rstop_head" +
      "sign\030\005 \001(\0132\".transit_realtime.Translated" +
      "String\022J\n\013pickup_type\030\006 \001(\0162%.transit_re" +
      "altime.StopTime.PickupType:\016REGULAR_PICK",
      "UP\022O\n\rdrop_off_type\030\007 \001(\0162&.transit_real" +
      "time.StopTime.DropOffType:\020REGULAR_DROP_" +
      "OFF\022\033\n\023shape_dist_traveled\030\010 \001(\002\"j\n\nPick" +
      "upType\022\022\n\016REGULAR_PICKUP\020\000\022\r\n\tNO_PICKUP\020" +
      "\001\022\034\n\030MUST_PHONE_AGENCY_PICKUP\020\002\022\033\n\027MUST_" +
      "ASK_DRIVER_PICK_UP\020\003\"r\n\013DropOffType\022\024\n\020R" +
      "EGULAR_DROP_OFF\020\000\022\017\n\013NO_DROP_OFF\020\001\022\036\n\032MU" +
      "ST_PHONE_AGENCY_DROP_OFF\020\002\022\034\n\030MUST_ASK_D" +
      "RIVER_DROP_OFF\020\003\"L\n\005Shape\022\020\n\010shape_id\030\001 " +
      "\002(\t\0221\n\013shape_point\030\002 \002(\0132\034.transit_realt",
      "ime.ShapePoint\"U\n\nShapePoint\022\024\n\014shape_pt" +
      "_lat\030\001 \002(\002\022\024\n\014shape_pt_lon\030\002 \002(\002\022\033\n\023shap" +
      "e_dist_traveled\030\003 \001(\002\"\210\004\n\005Route\022\020\n\010route" +
      "_id\030\001 \002(\t\022\021\n\tagency_id\030\002 \002(\t\022<\n\020route_sh" +
      "ort_name\030\003 \001(\0132\".transit_realtime.Transl" +
      "atedString\022;\n\017route_long_name\030\004 \001(\0132\".tr" +
      "ansit_realtime.TranslatedString\0226\n\nroute" +
      "_desc\030\005 \001(\0132\".transit_realtime.Translate" +
      "dString\0225\n\nroute_type\030\006 \002(\0162!.transit_re" +
      "altime.Route.RouteType\0225\n\troute_url\030\007 \001(",
      "\0132\".transit_realtime.TranslatedString\022\023\n" +
      "\013route_color\030\010 \001(\t\022\030\n\020route_text_color\030\t" +
      " \001(\t\022\030\n\020route_sort_order\030\n \001(\r\"p\n\tRouteT" +
      "ype\022\016\n\nLIGHT_RAIL\020\000\022\n\n\006SUBWAY\020\001\022\010\n\004RAIL\020" +
      "\002\022\007\n\003BUS\020\003\022\t\n\005FERRY\020\004\022\r\n\tCABLE_CAR\020\005\022\013\n\007" +
      "GONDOLA\020\006\022\r\n\tFUNICULAR\020\007\"\341\004\n\004Stop\022\017\n\007sto" +
      "p_id\030\001 \002(\t\0225\n\tstop_code\030\002 \001(\0132\".transit_" +
      "realtime.TranslatedString\0225\n\tstop_name\030\003" +
      " \002(\0132\".transit_realtime.TranslatedString" +
      "\0225\n\tstop_desc\030\004 \001(\0132\".transit_realtime.T",
      "ranslatedString\022\020\n\010stop_lat\030\005 \002(\002\022\020\n\010sto" +
      "p_lon\030\006 \002(\002\022\017\n\007zone_id\030\007 \001(\t\0224\n\010stop_url" +
      "\030\010 \001(\0132\".transit_realtime.TranslatedStri" +
      "ng\022\026\n\016parent_station\030\t \001(\t\022\025\n\rstop_timez" +
      "one\030\n \001(\t\022i\n\023wheelchair_boarding\030\013 \001(\0162/" +
      ".transit_realtime.Stop.WheelchairBoardin" +
      "gStatus:\033UNKNOWN_WHEELCHAIR_BOARDING\022\020\n\010" +
      "level_id\030\014 \001(\t\022\025\n\rplatform_code\030\r \001(\t\"u\n" +
      "\030WheelchairBoardingStatus\022\037\n\033UNKNOWN_WHE" +
      "ELCHAIR_BOARDING\020\000\022\031\n\025WHEELCHAIR_ACCESSI",
      "BLE\020\001\022\035\n\031NOT_WHEELCHAIR_ACCESSIBLE\020\002B\035\n\033" +
      "com.google.transit.realtime"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_transit_realtime_FeedMessage_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_transit_realtime_FeedMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_FeedMessage_descriptor,
        new java.lang.String[] { "Header", "Entity", });
    internal_static_transit_realtime_FeedHeader_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_transit_realtime_FeedHeader_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_FeedHeader_descriptor,
        new java.lang.String[] { "GtfsRealtimeVersion", "Incrementality", "Timestamp", });
    internal_static_transit_realtime_FeedEntity_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_transit_realtime_FeedEntity_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_FeedEntity_descriptor,
        new java.lang.String[] { "Id", "IsDeleted", "TripUpdate", "Vehicle", "Alert", "Trip", "Shape", "Route", "Stop", });
    internal_static_transit_realtime_TripUpdate_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_transit_realtime_TripUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_TripUpdate_descriptor,
        new java.lang.String[] { "Trip", "Vehicle", "StopTimeUpdate", "Timestamp", "Delay", "TripProperties", "VehicleProperties", });
    internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor =
      internal_static_transit_realtime_TripUpdate_descriptor.getNestedTypes().get(0);
    internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor,
        new java.lang.String[] { "Delay", "Time", "Uncertainty", "ScheduleTime", });
    internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor =
      internal_static_transit_realtime_TripUpdate_descriptor.getNestedTypes().get(1);
    internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor,
        new java.lang.String[] { "StopSequence", "StopId", "Arrival", "Departure", "ScheduleRelationship", "StopTimeProperties", });
    internal_static_transit_realtime_VehiclePosition_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_transit_realtime_VehiclePosition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_VehiclePosition_descriptor,
        new java.lang.String[] { "Trip", "Vehicle", "Position", "CurrentStopSequence", "StopId", "CurrentStatus", "Timestamp", "CongestionLevel", "OccupancyStatus", });
    internal_static_transit_realtime_Alert_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_transit_realtime_Alert_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_Alert_descriptor,
        new java.lang.String[] { "ActivePeriod", "InformedEntity", "Cause", "Effect", "Url", "HeaderText", "DescriptionText", "TtsHeaderText", "TtsDescriptionText", "SeverityLevel", });
    internal_static_transit_realtime_TimeRange_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_transit_realtime_TimeRange_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_TimeRange_descriptor,
        new java.lang.String[] { "Start", "End", });
    internal_static_transit_realtime_Position_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_transit_realtime_Position_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_Position_descriptor,
        new java.lang.String[] { "Latitude", "Longitude", "Bearing", "Odometer", "Speed", });
    internal_static_transit_realtime_TripDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_transit_realtime_TripDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_TripDescriptor_descriptor,
        new java.lang.String[] { "TripId", "RouteId", "DirectionId", "StartTime", "StartDate", "ScheduleRelationship", });
    internal_static_transit_realtime_VehicleDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_transit_realtime_VehicleDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_VehicleDescriptor_descriptor,
        new java.lang.String[] { "Id", "Label", "LicensePlate", });
    internal_static_transit_realtime_EntitySelector_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_transit_realtime_EntitySelector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_EntitySelector_descriptor,
        new java.lang.String[] { "AgencyId", "RouteId", "RouteType", "Trip", "StopId", "DirectionId", });
    internal_static_transit_realtime_TranslatedString_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_transit_realtime_TranslatedString_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_TranslatedString_descriptor,
        new java.lang.String[] { "Translation", });
    internal_static_transit_realtime_TranslatedString_Translation_descriptor =
      internal_static_transit_realtime_TranslatedString_descriptor.getNestedTypes().get(0);
    internal_static_transit_realtime_TranslatedString_Translation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_TranslatedString_Translation_descriptor,
        new java.lang.String[] { "Text", "Language", });
    internal_static_transit_realtime_TripProperties_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_transit_realtime_TripProperties_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_TripProperties_descriptor,
        new java.lang.String[] { "TripId", "StartDate", "StartTime", "RouteId", "TripHeadsign", "TripShortName", "BlockId", "ShapeId", });
    internal_static_transit_realtime_VehicleProperties_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_transit_realtime_VehicleProperties_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_VehicleProperties_descriptor,
        new java.lang.String[] { "WheelchairAccessible", "BikedAllowed", });
    internal_static_transit_realtime_StopTimeProperties_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_transit_realtime_StopTimeProperties_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_StopTimeProperties_descriptor,
        new java.lang.String[] { "PlatformId", "StopHeadsign", "PickupType", "DropOffType", "ShapeDistTraveled", "StopId", });
    internal_static_transit_realtime_Trip_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_transit_realtime_Trip_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_Trip_descriptor,
        new java.lang.String[] { "TripId", "RouteId", "TripHeadsign", "TripShortName", "DirectionId", "BlockId", "ShapeId", "WheelchairAccessible", "BikedAllowed", "ReplacesTripId", });
    internal_static_transit_realtime_StopTime_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_transit_realtime_StopTime_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_StopTime_descriptor,
        new java.lang.String[] { "StopSequence", "ArrivalTime", "DepartureTime", "StopId", "StopHeadsign", "PickupType", "DropOffType", "ShapeDistTraveled", });
    internal_static_transit_realtime_Shape_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_transit_realtime_Shape_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_Shape_descriptor,
        new java.lang.String[] { "ShapeId", "ShapePoint", });
    internal_static_transit_realtime_ShapePoint_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_transit_realtime_ShapePoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_ShapePoint_descriptor,
        new java.lang.String[] { "ShapePtLat", "ShapePtLon", "ShapeDistTraveled", });
    internal_static_transit_realtime_Route_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_transit_realtime_Route_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_Route_descriptor,
        new java.lang.String[] { "RouteId", "AgencyId", "RouteShortName", "RouteLongName", "RouteDesc", "RouteType", "RouteUrl", "RouteColor", "RouteTextColor", "RouteSortOrder", });
    internal_static_transit_realtime_Stop_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_transit_realtime_Stop_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_Stop_descriptor,
        new java.lang.String[] { "StopId", "StopCode", "StopName", "StopDesc", "StopLat", "StopLon", "ZoneId", "StopUrl", "ParentStation", "StopTimezone", "WheelchairBoarding", "LevelId", "PlatformCode", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
